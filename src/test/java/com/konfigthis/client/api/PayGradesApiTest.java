/*
 * intelliHR Public API
 * You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)
 *
 * The version of the OpenAPI document: V1
 * Contact: support@intellihr.co
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.PayGradeCreateRequest;
import com.konfigthis.client.model.PayGradeCreateRequestEmploymentCondition;
import com.konfigthis.client.model.PayGradeCreateRequestPayStepsInner;
import com.konfigthis.client.model.PayGradeUpdateRequest;
import com.konfigthis.client.model.PayGradeUpdateRequestEmploymentCondition;
import com.konfigthis.client.model.PayGradeUpdateRequestPayStepsInner;
import com.konfigthis.client.model.PayGrades;
import com.konfigthis.client.model.PayGradesList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PayGradesApi
 */
@Disabled
public class PayGradesApiTest {

    private static PayGradesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PayGradesApi(apiClient);
    }

    /**
     * Create a new Pay Grade
     *
     * Create a new Pay Grade record with the provided data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRecordTest() throws ApiException {
        String name = null;
        String description = null;
        String code = null;
        PayGradeCreateRequestEmploymentCondition employmentCondition = null;
        String payGradeType = null;
        Boolean isOverridable = null;
        Double permanentHourlyRate = null;
        String permanentHourlyRateCurrency = null;
        Double casualHourlyRate = null;
        String casualHourlyRateCurrency = null;
        Double annualSalary = null;
        String annualSalaryCurrency = null;
        List<PayGradeCreateRequestPayStepsInner> paySteps = null;
        PayGrades response = api.createRecord(name)
                .description(description)
                .code(code)
                .employmentCondition(employmentCondition)
                .payGradeType(payGradeType)
                .isOverridable(isOverridable)
                .permanentHourlyRate(permanentHourlyRate)
                .permanentHourlyRateCurrency(permanentHourlyRateCurrency)
                .casualHourlyRate(casualHourlyRate)
                .casualHourlyRateCurrency(casualHourlyRateCurrency)
                .annualSalary(annualSalary)
                .annualSalaryCurrency(annualSalaryCurrency)
                .paySteps(paySteps)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a Pay Grade by ID
     *
     * Deletes the [Pay Grade](https://developers.intellihr.io/docs/v1/) by the given ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteByIdTest() throws ApiException {
        api.deleteById()
                .execute();
        // TODO: test validations
    }

    /**
     * Find a Pay Grade by ID
     *
     * Returns a single pay grade.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findByIdTest() throws ApiException {
        String asAt = null;
        PayGrades response = api.findById()
                .asAt(asAt)
                .execute();
        // TODO: test validations
    }

    /**
     * List all pay grades
     *
     * Returns a list of all pay grades.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllTest() throws ApiException {
        String asAt = null;
        PayGradesList response = api.getAll()
                .asAt(asAt)
                .execute();
        // TODO: test validations
    }

    /**
     * Patch an existing Pay Grade
     *
     * Patch attributes of an existing Pay Grade record with the provided data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRecordTest() throws ApiException {
        String effectiveFrom = null;
        String description = null;
        String effectiveTo = null;
        Boolean isEnabled = null;
        String name = null;
        String code = null;
        PayGradeUpdateRequestEmploymentCondition employmentCondition = null;
        String payGradeType = null;
        Boolean isOverridable = null;
        Double permanentHourlyRate = null;
        String permanentHourlyRateCurrency = null;
        Double casualHourlyRate = null;
        String casualHourlyRateCurrency = null;
        Double annualSalary = null;
        String annualSalaryCurrency = null;
        List<PayGradeUpdateRequestPayStepsInner> paySteps = null;
        PayGrades response = api.updateRecord(effectiveFrom)
                .description(description)
                .effectiveTo(effectiveTo)
                .isEnabled(isEnabled)
                .name(name)
                .code(code)
                .employmentCondition(employmentCondition)
                .payGradeType(payGradeType)
                .isOverridable(isOverridable)
                .permanentHourlyRate(permanentHourlyRate)
                .permanentHourlyRateCurrency(permanentHourlyRateCurrency)
                .casualHourlyRate(casualHourlyRate)
                .casualHourlyRateCurrency(casualHourlyRateCurrency)
                .annualSalary(annualSalary)
                .annualSalaryCurrency(annualSalaryCurrency)
                .paySteps(paySteps)
                .execute();
        // TODO: test validations
    }

}
