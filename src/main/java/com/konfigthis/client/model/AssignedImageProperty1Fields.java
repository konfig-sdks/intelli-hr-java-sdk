/*
 * intelliHR Public API
 * You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)
 *
 * The version of the OpenAPI document: V1
 * Contact: support@intellihr.co
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AssignedImageProperty1Fields
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AssignedImageProperty1Fields {
  public static final String SERIALIZED_NAME_X_AMZ_SERVER_SIDE_ENCRYPTION = "x-amz-server-side-encryption";
  @SerializedName(SERIALIZED_NAME_X_AMZ_SERVER_SIDE_ENCRYPTION)
  private String xAmzServerSideEncryption;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_AW_S_ACCESS_KEY_ID = "AWSAccessKeyId";
  @SerializedName(SERIALIZED_NAME_AW_S_ACCESS_KEY_ID)
  private String awSAccessKeyId;

  public static final String SERIALIZED_NAME_X_AMZ_SECURITY_TOKEN = "x-amz-security-token";
  @SerializedName(SERIALIZED_NAME_X_AMZ_SECURITY_TOKEN)
  private String xAmzSecurityToken;

  public static final String SERIALIZED_NAME_POLICY = "policy";
  @SerializedName(SERIALIZED_NAME_POLICY)
  private String policy;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  public AssignedImageProperty1Fields() {
  }

  public AssignedImageProperty1Fields xAmzServerSideEncryption(String xAmzServerSideEncryption) {
    
    
    
    
    this.xAmzServerSideEncryption = xAmzServerSideEncryption;
    return this;
  }

   /**
   * Get xAmzServerSideEncryption
   * @return xAmzServerSideEncryption
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "AES256", value = "")

  public String getxAmzServerSideEncryption() {
    return xAmzServerSideEncryption;
  }


  public void setxAmzServerSideEncryption(String xAmzServerSideEncryption) {
    
    
    
    this.xAmzServerSideEncryption = xAmzServerSideEncryption;
  }


  public AssignedImageProperty1Fields key(String key) {
    
    
    
    
    this.key = key;
    return this;
  }

   /**
   * Get key
   * @return key
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "<your-tenant>/cfe2f82b-fb9f-4044-b77b-1a44612d5fa9-original", value = "")

  public String getKey() {
    return key;
  }


  public void setKey(String key) {
    
    
    
    this.key = key;
  }


  public AssignedImageProperty1Fields awSAccessKeyId(String awSAccessKeyId) {
    
    
    
    
    this.awSAccessKeyId = awSAccessKeyId;
    return this;
  }

   /**
   * Get awSAccessKeyId
   * @return awSAccessKeyId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ASIA6HLWGVLAJALKDSOK", value = "")

  public String getAwSAccessKeyId() {
    return awSAccessKeyId;
  }


  public void setAwSAccessKeyId(String awSAccessKeyId) {
    
    
    
    this.awSAccessKeyId = awSAccessKeyId;
  }


  public AssignedImageProperty1Fields xAmzSecurityToken(String xAmzSecurityToken) {
    
    
    
    
    this.xAmzSecurityToken = xAmzSecurityToken;
    return this;
  }

   /**
   * Get xAmzSecurityToken
   * @return xAmzSecurityToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "IQoJb3JpZ2luX2VjEKT//////////wEaDmFwLXNvdXRoZWFzdC0yIkcwRQIgNjODBis3wNGYA93luB198gh4gNyViSJC0Hu8UChgMXECIQCXqthkPAGOX+UMMy2vdyOE30EBkV6rGPu8AgPt9OvlLyqxAghtEAIaDDk3Nzg4OTgzMTYzNiIMuFb9qo8aAjQ0rvHZKo4CVo1zxNbD9FHRLUnBtXH5YTF/q9F/wqsTf02upu6WUBriaPsqbJGwDBti/UKbZ8q8yMADOTTe7T/CW8bs4BvClOXVoCo1b7KrjI7MYR8BEWQBqVQ3YB2m4rH0q1oIfZSwAFHUs7+13yyUZ8zPsRrYsU9e4XQEfqK3eeCu+TDlCDXG+SVnjPvZrlpHylLDLurpDquh8MV5CwtPl2SaHFbkLAuUQ/uJY3UHA6gkcjcmAQ8vGHM3pgs4Z0QvZJtWOQsz4xoUIumkBpoThxX6TLyks90P+ctR1ckjFsAqgkUWYSPDPHNAUDA1sXg//P506UxD9xESGKyfsIbU8k5Wc3uoIxWkn/wrHonzrxTwdbMKMPvnxdwajadwWDAGOpoBNf/+h3+7dTvDXEXXrIh044fnKqFQXgCYJTx7lp8xVP20o4QnJXQKVBIL6GN1H2VGxKQ6s7jRCwgDCID1R3QR55UENLgRu85FGOGf9Rt+f+cIUk/VsjIJZov9CcTK6DytLFI102eFcKAGmwN/sM/pIYXgq0X/qXfyduBAwdrRhSGnzvsXznuiQBMic0cQ/buIrrDmVw==", value = "")

  public String getxAmzSecurityToken() {
    return xAmzSecurityToken;
  }


  public void setxAmzSecurityToken(String xAmzSecurityToken) {
    
    
    
    this.xAmzSecurityToken = xAmzSecurityToken;
  }


  public AssignedImageProperty1Fields policy(String policy) {
    
    
    
    
    this.policy = policy;
    return this;
  }

   /**
   * Get policy
   * @return policy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "eyJleHBpcmF1aW9uIjogIjIwMqItMDUtMDRUMDQ2MzK6MTZaIiwgImNvbmRpdGlvbnMiOiBbWyJjb250ZW50LWxlbmd0aC1yYW5nZSIsIDAsIDIwMDAwMDAwXSwgeyJ4LWFtei1zZXJ2ZXItc2lkZS1lbmNyeXB0aW9uIjogIkFFUzI1NiJ9LCB7ImJ1Y2tldCI6ICJpaHItaW1hZ2Utc2VydmljZS1leHBlcmltZW50YWwtaW1nLXN0YWdpbmcifSwgeyJrZXkiOiAibWFzdGVyX2xhcmdlX2RlbW8vY2ZlMmY4MmItZmI5Zi00MDQ0LWI3N2ItMWE0NDYxMmQ1ZmE5LW9yaWdpbmFsIn0sIHsieC1hbXotc2VjdXJpdHktdG9rZW4iOiAiSVFvSmIzSnBaMmx1WDJWakVLVC8vLy8vLy8vLy93RWFEbUZ3TFhOdmRYUm9aV0Z6ZEMweUlrY3dSUUlnTmpPREJpczN3TkdZQTkzbHVCMTk4Z2g0Z055VmlTSkMwSHU4VUNoZ01YRUNJUUNYcXRoa1BBR09YK1VNTXkydmR5T0UzMEVCa1Y2ckdQdThBZ1B0OU92bEx5cXhBZ2h0RUFJYUREazNOemc0T1Rnek1UWXpOaUlNdUZiOXFvOGFBalEwcnZIWktvNENWbzF6eE5iRDlGSFJMVW5CdFhINVlURi9xOUYvd3FzVGYwMnVwdTZXVUJyaWFQc3FiSkd3REJ0aS9VS2JaOHE4eU1BRE9UVGU3VC9DVzhiczRCdkNsT1hWb0NvMWI3S3JqSTdNWVI4QkVXUUJxVlEzWUIybTRySDBxMW9JZlpTd0FGSFVzNysxM3l5VVo4elBzUnJZc1U5ZTRYUUVmcUszZWVDdStURGxDRFhHK1NWbmpQdlpybHBIeWxMREx1cnBEcXVoOE1WNUN3dFBsMlNhSEZia0xBdVVRL3VKWTNVSEE2Z2tjamNtQVE4dkdITTNwZ3M0WjBRdlpKdFdPUXN6NHhvVUl1bWtCcG9UaHhYNlRMeWtzOTBQK2N0UjFja2pGc0FxZ2tVV1lTUERQSE5BVURBMXNYZy8vUDUwNlV4RDl4RVNHS3lmc0liVThrNVdjM3VvSXhXa24vd3JIb256cnhUd2RiTUtNUHZueDVNR09wb0JOZi8raDMrN2RUdkRYRVhYckloMGVXa3A5ak5oNDRmbktxRlFYZ0NZSlR4N2xwOHhWUDIwbzRRbkpYUUtWQklMNkdOMUgyVkd4S1E2czdqUkN3Z0RDSUQxUjNRUjU1VUVOTGdSdTg1RkdPR2Y5UnQrZitjSVVrL1ZzaklKWm92OUNjVEs2RHl0TEZJMTAyZUZjS0FHbXdOL3NNL3BJWVhncTBYL3FYZnlkdUJBd2RyUmhTR256dnNYem51aVFCTWljMGNRL2J1SXJyRG1Wdz09In1dfQ==", value = "")

  public String getPolicy() {
    return policy;
  }


  public void setPolicy(String policy) {
    
    
    
    this.policy = policy;
  }


  public AssignedImageProperty1Fields signature(String signature) {
    
    
    
    
    this.signature = signature;
    return this;
  }

   /**
   * Get signature
   * @return signature
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "JGX8ztYJqB+Kkr/m7dzYzzEZPlI=", value = "")

  public String getSignature() {
    return signature;
  }


  public void setSignature(String signature) {
    
    
    
    this.signature = signature;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AssignedImageProperty1Fields instance itself
   */
  public AssignedImageProperty1Fields putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssignedImageProperty1Fields assignedImageProperty1Fields = (AssignedImageProperty1Fields) o;
    return Objects.equals(this.xAmzServerSideEncryption, assignedImageProperty1Fields.xAmzServerSideEncryption) &&
        Objects.equals(this.key, assignedImageProperty1Fields.key) &&
        Objects.equals(this.awSAccessKeyId, assignedImageProperty1Fields.awSAccessKeyId) &&
        Objects.equals(this.xAmzSecurityToken, assignedImageProperty1Fields.xAmzSecurityToken) &&
        Objects.equals(this.policy, assignedImageProperty1Fields.policy) &&
        Objects.equals(this.signature, assignedImageProperty1Fields.signature)&&
        Objects.equals(this.additionalProperties, assignedImageProperty1Fields.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(xAmzServerSideEncryption, key, awSAccessKeyId, xAmzSecurityToken, policy, signature, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssignedImageProperty1Fields {\n");
    sb.append("    xAmzServerSideEncryption: ").append(toIndentedString(xAmzServerSideEncryption)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    awSAccessKeyId: ").append(toIndentedString(awSAccessKeyId)).append("\n");
    sb.append("    xAmzSecurityToken: ").append(toIndentedString(xAmzSecurityToken)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("x-amz-server-side-encryption");
    openapiFields.add("key");
    openapiFields.add("AWSAccessKeyId");
    openapiFields.add("x-amz-security-token");
    openapiFields.add("policy");
    openapiFields.add("signature");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AssignedImageProperty1Fields
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AssignedImageProperty1Fields.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssignedImageProperty1Fields is not found in the empty JSON string", AssignedImageProperty1Fields.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("x-amz-server-side-encryption") != null && !jsonObj.get("x-amz-server-side-encryption").isJsonNull()) && !jsonObj.get("x-amz-server-side-encryption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `x-amz-server-side-encryption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("x-amz-server-side-encryption").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("AWSAccessKeyId") != null && !jsonObj.get("AWSAccessKeyId").isJsonNull()) && !jsonObj.get("AWSAccessKeyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AWSAccessKeyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AWSAccessKeyId").toString()));
      }
      if ((jsonObj.get("x-amz-security-token") != null && !jsonObj.get("x-amz-security-token").isJsonNull()) && !jsonObj.get("x-amz-security-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `x-amz-security-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("x-amz-security-token").toString()));
      }
      if ((jsonObj.get("policy") != null && !jsonObj.get("policy").isJsonNull()) && !jsonObj.get("policy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policy").toString()));
      }
      if ((jsonObj.get("signature") != null && !jsonObj.get("signature").isJsonNull()) && !jsonObj.get("signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssignedImageProperty1Fields.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssignedImageProperty1Fields' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssignedImageProperty1Fields> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssignedImageProperty1Fields.class));

       return (TypeAdapter<T>) new TypeAdapter<AssignedImageProperty1Fields>() {
           @Override
           public void write(JsonWriter out, AssignedImageProperty1Fields value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AssignedImageProperty1Fields read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AssignedImageProperty1Fields instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AssignedImageProperty1Fields given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AssignedImageProperty1Fields
  * @throws IOException if the JSON string is invalid with respect to AssignedImageProperty1Fields
  */
  public static AssignedImageProperty1Fields fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssignedImageProperty1Fields.class);
  }

 /**
  * Convert an instance of AssignedImageProperty1Fields to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

