/*
 * intelliHR Public API
 * You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)
 *
 * The version of the OpenAPI document: V1
 * Contact: support@intellihr.co
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * JobEndPatchRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class JobEndPatchRequest {
  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_REASSIGN_DIRECT_REPORTS_TO = "reassignDirectReportsTo";
  @SerializedName(SERIALIZED_NAME_REASSIGN_DIRECT_REPORTS_TO)
  private String reassignDirectReportsTo;

  public static final String SERIALIZED_NAME_TURNOVER_TYPE = "turnoverType";
  @SerializedName(SERIALIZED_NAME_TURNOVER_TYPE)
  private String turnoverType;

  public static final String SERIALIZED_NAME_TURNOVER_REASON = "turnoverReason";
  @SerializedName(SERIALIZED_NAME_TURNOVER_REASON)
  private String turnoverReason;

  public JobEndPatchRequest() {
  }

  public JobEndPatchRequest endDate(String endDate) {
    
    
    
    
    this.endDate = endDate;
    return this;
  }

   /**
   * The &lt;b&gt;exclusive&lt;/b&gt; date this [Job](https://developers.intellihr.io/docs/v1/) ended or will end within the organisation. For example, if the person&#39;s last working date is on 2025-04-23, the &#x60;endDate&#x60; should be set as 2025-04-24 to reflect the exclusive date. Required if not finalising an end date, or the job does not have an end date. This date will follow the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.6).   YYYY-MM-DD date formatting is also supported, although by using this format the date will be stored as the start of day in UTC time, not the requesting tenants timezone.
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2015-03-01T22:30:00+00:00", value = "The <b>exclusive</b> date this [Job](https://developers.intellihr.io/docs/v1/) ended or will end within the organisation. For example, if the person's last working date is on 2025-04-23, the `endDate` should be set as 2025-04-24 to reflect the exclusive date. Required if not finalising an end date, or the job does not have an end date. This date will follow the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.6).   YYYY-MM-DD date formatting is also supported, although by using this format the date will be stored as the start of day in UTC time, not the requesting tenants timezone.")

  public String getEndDate() {
    return endDate;
  }


  public void setEndDate(String endDate) {
    
    
    
    this.endDate = endDate;
  }


  public JobEndPatchRequest reassignDirectReportsTo(String reassignDirectReportsTo) {
    
    
    if (reassignDirectReportsTo != null && reassignDirectReportsTo.length() < 36) {
      throw new IllegalArgumentException("Invalid value for reassignDirectReportsTo. Length must be greater than or equal to 36.");
    }
    
    this.reassignDirectReportsTo = reassignDirectReportsTo;
    return this;
  }

   /**
   * The identifier string for the [Job](https://developers.intellihr.io/docs/v1/) of the person that the direct report will be reassigned to.
   * @return reassignDirectReportsTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "8a5f3ea6-ea6b-4425-8a87-3c256bb7b6f9", value = "The identifier string for the [Job](https://developers.intellihr.io/docs/v1/) of the person that the direct report will be reassigned to.")

  public String getReassignDirectReportsTo() {
    return reassignDirectReportsTo;
  }


  public void setReassignDirectReportsTo(String reassignDirectReportsTo) {
    
    
    if (reassignDirectReportsTo != null && reassignDirectReportsTo.length() < 36) {
      throw new IllegalArgumentException("Invalid value for reassignDirectReportsTo. Length must be greater than or equal to 36.");
    }
    this.reassignDirectReportsTo = reassignDirectReportsTo;
  }


  public JobEndPatchRequest turnoverType(String turnoverType) {
    
    
    
    
    this.turnoverType = turnoverType;
    return this;
  }

   /**
   * The type of turnover this end of job would be classified as: &#x60;voluntary&#x60;, &#x60;involuntary&#x60; or &#x60;unknown&#x60;. Required if finalising an end date.
   * @return turnoverType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "involuntary", value = "The type of turnover this end of job would be classified as: `voluntary`, `involuntary` or `unknown`. Required if finalising an end date.")

  public String getTurnoverType() {
    return turnoverType;
  }


  public void setTurnoverType(String turnoverType) {
    
    
    
    this.turnoverType = turnoverType;
  }


  public JobEndPatchRequest turnoverReason(String turnoverReason) {
    
    
    
    
    this.turnoverReason = turnoverReason;
    return this;
  }

   /**
   * The name of the turnover reason.
   * @return turnoverReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Medical reasons", value = "The name of the turnover reason.")

  public String getTurnoverReason() {
    return turnoverReason;
  }


  public void setTurnoverReason(String turnoverReason) {
    
    
    
    this.turnoverReason = turnoverReason;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the JobEndPatchRequest instance itself
   */
  public JobEndPatchRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobEndPatchRequest jobEndPatchRequest = (JobEndPatchRequest) o;
    return Objects.equals(this.endDate, jobEndPatchRequest.endDate) &&
        Objects.equals(this.reassignDirectReportsTo, jobEndPatchRequest.reassignDirectReportsTo) &&
        Objects.equals(this.turnoverType, jobEndPatchRequest.turnoverType) &&
        Objects.equals(this.turnoverReason, jobEndPatchRequest.turnoverReason)&&
        Objects.equals(this.additionalProperties, jobEndPatchRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endDate, reassignDirectReportsTo, turnoverType, turnoverReason, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobEndPatchRequest {\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    reassignDirectReportsTo: ").append(toIndentedString(reassignDirectReportsTo)).append("\n");
    sb.append("    turnoverType: ").append(toIndentedString(turnoverType)).append("\n");
    sb.append("    turnoverReason: ").append(toIndentedString(turnoverReason)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endDate");
    openapiFields.add("reassignDirectReportsTo");
    openapiFields.add("turnoverType");
    openapiFields.add("turnoverReason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to JobEndPatchRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!JobEndPatchRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobEndPatchRequest is not found in the empty JSON string", JobEndPatchRequest.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("endDate") != null && !jsonObj.get("endDate").isJsonNull()) && !jsonObj.get("endDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endDate").toString()));
      }
      if ((jsonObj.get("reassignDirectReportsTo") != null && !jsonObj.get("reassignDirectReportsTo").isJsonNull()) && !jsonObj.get("reassignDirectReportsTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reassignDirectReportsTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reassignDirectReportsTo").toString()));
      }
      if ((jsonObj.get("turnoverType") != null && !jsonObj.get("turnoverType").isJsonNull()) && !jsonObj.get("turnoverType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `turnoverType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("turnoverType").toString()));
      }
      if ((jsonObj.get("turnoverReason") != null && !jsonObj.get("turnoverReason").isJsonNull()) && !jsonObj.get("turnoverReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `turnoverReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("turnoverReason").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobEndPatchRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobEndPatchRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobEndPatchRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobEndPatchRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<JobEndPatchRequest>() {
           @Override
           public void write(JsonWriter out, JobEndPatchRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public JobEndPatchRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             JobEndPatchRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of JobEndPatchRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of JobEndPatchRequest
  * @throws IOException if the JSON string is invalid with respect to JobEndPatchRequest
  */
  public static JobEndPatchRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobEndPatchRequest.class);
  }

 /**
  * Convert an instance of JobEndPatchRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

