/*
 * intelliHR Public API
 * You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)
 *
 * The version of the OpenAPI document: V1
 * Contact: support@intellihr.co
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInnerFormDesign;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DAYS = "days";
  @SerializedName(SERIALIZED_NAME_DAYS)
  private Double days;

  public static final String SERIALIZED_NAME_MONTHS = "months";
  @SerializedName(SERIALIZED_NAME_MONTHS)
  private Double months;

  public static final String SERIALIZED_NAME_FORM_DESIGN = "formDesign";
  @SerializedName(SERIALIZED_NAME_FORM_DESIGN)
  private WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInnerFormDesign formDesign;

  public WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner() {
  }

  public WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner id(String id) {
    
    
    if (id != null && id.length() < 36) {
      throw new IllegalArgumentException("Invalid value for id. Length must be greater than or equal to 36.");
    }
    
    this.id = id;
    return this;
  }

   /**
   * The identifier string for the Workflow Form Design.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "8a5f3ea6-ea6b-4425-8a87-3c256bb7b6f9", value = "The identifier string for the Workflow Form Design.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    if (id != null && id.length() < 36) {
      throw new IllegalArgumentException("Invalid value for id. Length must be greater than or equal to 36.");
    }
    this.id = id;
  }


  public WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner days(Double days) {
    
    
    
    
    this.days = days;
    return this;
  }

  public WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner days(Integer days) {
    
    
    
    
    this.days = days.doubleValue();
    return this;
  }

   /**
   * A number representing the number of days from the event that the form should be sent.  This can be either positive to determine days from event, or negative to determine days before the event.
   * @return days
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "-14", value = "A number representing the number of days from the event that the form should be sent.  This can be either positive to determine days from event, or negative to determine days before the event.")

  public Double getDays() {
    return days;
  }


  public void setDays(Double days) {
    
    
    
    this.days = days;
  }


  public WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner months(Double months) {
    
    
    
    
    this.months = months;
    return this;
  }

  public WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner months(Integer months) {
    
    
    
    
    this.months = months.doubleValue();
    return this;
  }

   /**
   * A number representing the number of months from the event that the form should be sent.  This can be either positive to determine days from event, or negative to determine days before the event.
   * @return months
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "A number representing the number of months from the event that the form should be sent.  This can be either positive to determine days from event, or negative to determine days before the event.")

  public Double getMonths() {
    return months;
  }


  public void setMonths(Double months) {
    
    
    
    this.months = months;
  }


  public WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner formDesign(WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInnerFormDesign formDesign) {
    
    
    
    
    this.formDesign = formDesign;
    return this;
  }

   /**
   * Get formDesign
   * @return formDesign
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInnerFormDesign getFormDesign() {
    return formDesign;
  }


  public void setFormDesign(WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInnerFormDesign formDesign) {
    
    
    
    this.formDesign = formDesign;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner instance itself
   */
  public WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner workflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner = (WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner) o;
    return Objects.equals(this.id, workflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner.id) &&
        Objects.equals(this.days, workflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner.days) &&
        Objects.equals(this.months, workflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner.months) &&
        Objects.equals(this.formDesign, workflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner.formDesign)&&
        Objects.equals(this.additionalProperties, workflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, days, months, formDesign, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    days: ").append(toIndentedString(days)).append("\n");
    sb.append("    months: ").append(toIndentedString(months)).append("\n");
    sb.append("    formDesign: ").append(toIndentedString(formDesign)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("days");
    openapiFields.add("months");
    openapiFields.add("formDesign");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner is not found in the empty JSON string", WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `formDesign`
      if (jsonObj.get("formDesign") != null && !jsonObj.get("formDesign").isJsonNull()) {
        WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInnerFormDesign.validateJsonObject(jsonObj.getAsJsonObject("formDesign"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner>() {
           @Override
           public void write(JsonWriter out, WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner
  * @throws IOException if the JSON string is invalid with respect to WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner
  */
  public static WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner.class);
  }

 /**
  * Convert an instance of WorkflowEventPropertyWorkflowsInnerWorkflowFormDesignsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

