/*
 * intelliHR Public API
 * You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)
 *
 * The version of the OpenAPI document: V1
 * Contact: support@intellihr.co
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PersonSDocument
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PersonSDocument {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_FILENAME = "filename";
  @SerializedName(SERIALIZED_NAME_FILENAME)
  private String filename;

  public static final String SERIALIZED_NAME_DOWNLOAD_URL_ABSOLUTE = "downloadUrlAbsolute";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_URL_ABSOLUTE)
  private String downloadUrlAbsolute;

  public static final String SERIALIZED_NAME_EXTENSION = "extension";
  @SerializedName(SERIALIZED_NAME_EXTENSION)
  private String extension;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public static final String SERIALIZED_NAME_HUMAN_READABLE_SIZE = "humanReadableSize";
  @SerializedName(SERIALIZED_NAME_HUMAN_READABLE_SIZE)
  private String humanReadableSize;

  public static final String SERIALIZED_NAME_UPLOAD_STATUS = "uploadStatus";
  @SerializedName(SERIALIZED_NAME_UPLOAD_STATUS)
  private Object uploadStatus = null;

  public PersonSDocument() {
  }

  public PersonSDocument id(String id) {
    
    
    if (id != null && id.length() < 36) {
      throw new IllegalArgumentException("Invalid value for id. Length must be greater than or equal to 36.");
    }
    
    this.id = id;
    return this;
  }

   /**
   * The identifier string for the [People Document](https://developers.intellihr.io/docs/v1/).
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "8a5f3ea6-ea6b-4425-8a87-3c256bb7b6f9", value = "The identifier string for the [People Document](https://developers.intellihr.io/docs/v1/).")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    if (id != null && id.length() < 36) {
      throw new IllegalArgumentException("Invalid value for id. Length must be greater than or equal to 36.");
    }
    this.id = id;
  }


  public PersonSDocument filename(String filename) {
    
    
    
    
    this.filename = filename;
    return this;
  }

   /**
   * The filename of the document. This will be used for display name. Includes extension.
   * @return filename
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "OfferLetter.pdf", value = "The filename of the document. This will be used for display name. Includes extension.")

  public String getFilename() {
    return filename;
  }


  public void setFilename(String filename) {
    
    
    
    this.filename = filename;
  }


  public PersonSDocument downloadUrlAbsolute(String downloadUrlAbsolute) {
    
    
    
    
    this.downloadUrlAbsolute = downloadUrlAbsolute;
    return this;
  }

   /**
   * A downloadable Url of the document.
   * @return downloadUrlAbsolute
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "http://{tenant}.internihr.ninja/api/domain/people/6ced7aed-adeb-4645-896a-5eaa21f4bf6e/attachments/0f1d4fb7-ef1b-4ca5-908f-1c73f489be04/download", value = "A downloadable Url of the document.")

  public String getDownloadUrlAbsolute() {
    return downloadUrlAbsolute;
  }


  public void setDownloadUrlAbsolute(String downloadUrlAbsolute) {
    
    
    
    this.downloadUrlAbsolute = downloadUrlAbsolute;
  }


  public PersonSDocument extension(String extension) {
    
    
    
    
    this.extension = extension;
    return this;
  }

   /**
   * The extension of the document, not including the dot
   * @return extension
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "pdf", value = "The extension of the document, not including the dot")

  public String getExtension() {
    return extension;
  }


  public void setExtension(String extension) {
    
    
    
    this.extension = extension;
  }


  public PersonSDocument size(Integer size) {
    
    
    
    
    this.size = size;
    return this;
  }

   /**
   * The size in bytes. We use this to validate the upload was successful so must match the actual file size
   * @return size
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "300", value = "The size in bytes. We use this to validate the upload was successful so must match the actual file size")

  public Integer getSize() {
    return size;
  }


  public void setSize(Integer size) {
    
    
    
    this.size = size;
  }


  public PersonSDocument humanReadableSize(String humanReadableSize) {
    
    
    
    
    this.humanReadableSize = humanReadableSize;
    return this;
  }

   /**
   * The size in bytes. We use this to validate the upload was successful so must match the actual file size
   * @return humanReadableSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "300 bytes", value = "The size in bytes. We use this to validate the upload was successful so must match the actual file size")

  public String getHumanReadableSize() {
    return humanReadableSize;
  }


  public void setHumanReadableSize(String humanReadableSize) {
    
    
    
    this.humanReadableSize = humanReadableSize;
  }


  public PersonSDocument uploadStatus(Object uploadStatus) {
    
    
    
    
    this.uploadStatus = uploadStatus;
    return this;
  }

   /**
   * The upload status of this [Document](https://developers.intellihr.io/docs/v1/). Enum: &#x60;SUCCESS&#x60;, &#x60;PENDING&#x60;, &#x60;FAILED&#x60;.
   * @return uploadStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SUCCESS", value = "The upload status of this [Document](https://developers.intellihr.io/docs/v1/). Enum: `SUCCESS`, `PENDING`, `FAILED`.")

  public Object getUploadStatus() {
    return uploadStatus;
  }


  public void setUploadStatus(Object uploadStatus) {
    
    
    
    this.uploadStatus = uploadStatus;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PersonSDocument instance itself
   */
  public PersonSDocument putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PersonSDocument personSDocument = (PersonSDocument) o;
    return Objects.equals(this.id, personSDocument.id) &&
        Objects.equals(this.filename, personSDocument.filename) &&
        Objects.equals(this.downloadUrlAbsolute, personSDocument.downloadUrlAbsolute) &&
        Objects.equals(this.extension, personSDocument.extension) &&
        Objects.equals(this.size, personSDocument.size) &&
        Objects.equals(this.humanReadableSize, personSDocument.humanReadableSize) &&
        Objects.equals(this.uploadStatus, personSDocument.uploadStatus)&&
        Objects.equals(this.additionalProperties, personSDocument.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, filename, downloadUrlAbsolute, extension, size, humanReadableSize, uploadStatus, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PersonSDocument {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    downloadUrlAbsolute: ").append(toIndentedString(downloadUrlAbsolute)).append("\n");
    sb.append("    extension: ").append(toIndentedString(extension)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    humanReadableSize: ").append(toIndentedString(humanReadableSize)).append("\n");
    sb.append("    uploadStatus: ").append(toIndentedString(uploadStatus)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("filename");
    openapiFields.add("downloadUrlAbsolute");
    openapiFields.add("extension");
    openapiFields.add("size");
    openapiFields.add("humanReadableSize");
    openapiFields.add("uploadStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PersonSDocument
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PersonSDocument.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PersonSDocument is not found in the empty JSON string", PersonSDocument.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("filename") != null && !jsonObj.get("filename").isJsonNull()) && !jsonObj.get("filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filename").toString()));
      }
      if ((jsonObj.get("downloadUrlAbsolute") != null && !jsonObj.get("downloadUrlAbsolute").isJsonNull()) && !jsonObj.get("downloadUrlAbsolute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `downloadUrlAbsolute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("downloadUrlAbsolute").toString()));
      }
      if ((jsonObj.get("extension") != null && !jsonObj.get("extension").isJsonNull()) && !jsonObj.get("extension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extension").toString()));
      }
      if ((jsonObj.get("humanReadableSize") != null && !jsonObj.get("humanReadableSize").isJsonNull()) && !jsonObj.get("humanReadableSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `humanReadableSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("humanReadableSize").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PersonSDocument.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PersonSDocument' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PersonSDocument> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PersonSDocument.class));

       return (TypeAdapter<T>) new TypeAdapter<PersonSDocument>() {
           @Override
           public void write(JsonWriter out, PersonSDocument value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PersonSDocument read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PersonSDocument instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PersonSDocument given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PersonSDocument
  * @throws IOException if the JSON string is invalid with respect to PersonSDocument
  */
  public static PersonSDocument fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PersonSDocument.class);
  }

 /**
  * Convert an instance of PersonSDocument to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

