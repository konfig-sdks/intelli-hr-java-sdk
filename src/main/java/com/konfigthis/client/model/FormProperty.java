/*
 * intelliHR Public API
 * You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)
 *
 * The version of the OpenAPI document: V1
 * Contact: support@intellihr.co
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.FormPropertyDocumentUploadsInner;
import com.konfigthis.client.model.FormPropertyFormDesign;
import com.konfigthis.client.model.FormPropertySubject;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * FormProperty
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class FormProperty {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ISSUE_DATE = "issueDate";
  @SerializedName(SERIALIZED_NAME_ISSUE_DATE)
  private String issueDate;

  public static final String SERIALIZED_NAME_DUE_DATE = "dueDate";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private Object dueDate = null;

  public static final String SERIALIZED_NAME_REMINDER_DATE = "reminderDate";
  @SerializedName(SERIALIZED_NAME_REMINDER_DATE)
  private Object reminderDate = null;

  public static final String SERIALIZED_NAME_ACCESS_CODE = "accessCode";
  @SerializedName(SERIALIZED_NAME_ACCESS_CODE)
  private String accessCode;

  public static final String SERIALIZED_NAME_COMPLETED_AT = "completedAt";
  @SerializedName(SERIALIZED_NAME_COMPLETED_AT)
  private Object completedAt = null;

  public static final String SERIALIZED_NAME_FORM_DESIGN = "formDesign";
  @SerializedName(SERIALIZED_NAME_FORM_DESIGN)
  private FormPropertyFormDesign formDesign;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private FormPropertySubject subject;

  public static final String SERIALIZED_NAME_RESPONDENT = "respondent";
  @SerializedName(SERIALIZED_NAME_RESPONDENT)
  private Object respondent = null;

  public static final String SERIALIZED_NAME_SUBMITTER = "submitter";
  @SerializedName(SERIALIZED_NAME_SUBMITTER)
  private Object submitter = null;

  public static final String SERIALIZED_NAME_ANSWERS = "answers";
  @SerializedName(SERIALIZED_NAME_ANSWERS)
  private Object answers = null;

  public static final String SERIALIZED_NAME_DOCUMENT_UPLOADS = "documentUploads";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_UPLOADS)
  private List<FormPropertyDocumentUploadsInner> documentUploads = null;

  public static final String SERIALIZED_NAME_JOB = "job";
  @SerializedName(SERIALIZED_NAME_JOB)
  private Object job = null;

  public static final String SERIALIZED_NAME_PERSON = "person";
  @SerializedName(SERIALIZED_NAME_PERSON)
  private Object person = null;

  public FormProperty() {
  }

  public FormProperty id(String id) {
    
    
    if (id != null && id.length() < 36) {
      throw new IllegalArgumentException("Invalid value for id. Length must be greater than or equal to 36.");
    }
    
    this.id = id;
    return this;
  }

   /**
   * The identifier string for the [Form](https://developers.intellihr.io/docs/v1/).
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "8a5f3ea6-ea6b-4425-8a87-3c256bb7b6f9", value = "The identifier string for the [Form](https://developers.intellihr.io/docs/v1/).")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    if (id != null && id.length() < 36) {
      throw new IllegalArgumentException("Invalid value for id. Length must be greater than or equal to 36.");
    }
    this.id = id;
  }


  public FormProperty issueDate(String issueDate) {
    
    
    
    
    this.issueDate = issueDate;
    return this;
  }

   /**
   * The date this [Form](https://developers.intellihr.io/docs/v1/) was issued to the recipient. This date will follow the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.6).
   * @return issueDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2015-03-01T22:30:00+00:00", value = "The date this [Form](https://developers.intellihr.io/docs/v1/) was issued to the recipient. This date will follow the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.6).")

  public String getIssueDate() {
    return issueDate;
  }


  public void setIssueDate(String issueDate) {
    
    
    
    this.issueDate = issueDate;
  }


  public FormProperty dueDate(Object dueDate) {
    
    
    
    
    this.dueDate = dueDate;
    return this;
  }

   /**
   * Get dueDate
   * @return dueDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getDueDate() {
    return dueDate;
  }


  public void setDueDate(Object dueDate) {
    
    
    
    this.dueDate = dueDate;
  }


  public FormProperty reminderDate(Object reminderDate) {
    
    
    
    
    this.reminderDate = reminderDate;
    return this;
  }

   /**
   * Get reminderDate
   * @return reminderDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getReminderDate() {
    return reminderDate;
  }


  public void setReminderDate(Object reminderDate) {
    
    
    
    this.reminderDate = reminderDate;
  }


  public FormProperty accessCode(String accessCode) {
    
    
    
    
    this.accessCode = accessCode;
    return this;
  }

   /**
   * The authorization code required to access this form via a url.
   * @return accessCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ABCDE12345", value = "The authorization code required to access this form via a url.")

  public String getAccessCode() {
    return accessCode;
  }


  public void setAccessCode(String accessCode) {
    
    
    
    this.accessCode = accessCode;
  }


  public FormProperty completedAt(Object completedAt) {
    
    
    
    
    this.completedAt = completedAt;
    return this;
  }

   /**
   * Get completedAt
   * @return completedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getCompletedAt() {
    return completedAt;
  }


  public void setCompletedAt(Object completedAt) {
    
    
    
    this.completedAt = completedAt;
  }


  public FormProperty formDesign(FormPropertyFormDesign formDesign) {
    
    
    
    
    this.formDesign = formDesign;
    return this;
  }

   /**
   * Get formDesign
   * @return formDesign
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FormPropertyFormDesign getFormDesign() {
    return formDesign;
  }


  public void setFormDesign(FormPropertyFormDesign formDesign) {
    
    
    
    this.formDesign = formDesign;
  }


  public FormProperty subject(FormPropertySubject subject) {
    
    
    
    
    this.subject = subject;
    return this;
  }

   /**
   * Get subject
   * @return subject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FormPropertySubject getSubject() {
    return subject;
  }


  public void setSubject(FormPropertySubject subject) {
    
    
    
    this.subject = subject;
  }


  public FormProperty respondent(Object respondent) {
    
    
    
    
    this.respondent = respondent;
    return this;
  }

   /**
   * Get respondent
   * @return respondent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getRespondent() {
    return respondent;
  }


  public void setRespondent(Object respondent) {
    
    
    
    this.respondent = respondent;
  }


  public FormProperty submitter(Object submitter) {
    
    
    
    
    this.submitter = submitter;
    return this;
  }

   /**
   * Get submitter
   * @return submitter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getSubmitter() {
    return submitter;
  }


  public void setSubmitter(Object submitter) {
    
    
    
    this.submitter = submitter;
  }


  public FormProperty answers(Object answers) {
    
    
    
    
    this.answers = answers;
    return this;
  }

   /**
   * Get answers
   * @return answers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getAnswers() {
    return answers;
  }


  public void setAnswers(Object answers) {
    
    
    
    this.answers = answers;
  }


  public FormProperty documentUploads(List<FormPropertyDocumentUploadsInner> documentUploads) {
    
    
    
    
    this.documentUploads = documentUploads;
    return this;
  }

  public FormProperty addDocumentUploadsItem(FormPropertyDocumentUploadsInner documentUploadsItem) {
    if (this.documentUploads == null) {
      this.documentUploads = new ArrayList<>();
    }
    this.documentUploads.add(documentUploadsItem);
    return this;
  }

   /**
   * A list of documents uploaded in this form.
   * @return documentUploads
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of documents uploaded in this form.")

  public List<FormPropertyDocumentUploadsInner> getDocumentUploads() {
    return documentUploads;
  }


  public void setDocumentUploads(List<FormPropertyDocumentUploadsInner> documentUploads) {
    
    
    
    this.documentUploads = documentUploads;
  }


  public FormProperty job(Object job) {
    
    
    
    
    this.job = job;
    return this;
  }

   /**
   * Get job
   * @return job
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getJob() {
    return job;
  }


  public void setJob(Object job) {
    
    
    
    this.job = job;
  }


  public FormProperty person(Object person) {
    
    
    
    
    this.person = person;
    return this;
  }

   /**
   * Get person
   * @return person
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getPerson() {
    return person;
  }


  public void setPerson(Object person) {
    
    
    
    this.person = person;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the FormProperty instance itself
   */
  public FormProperty putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FormProperty formProperty = (FormProperty) o;
    return Objects.equals(this.id, formProperty.id) &&
        Objects.equals(this.issueDate, formProperty.issueDate) &&
        Objects.equals(this.dueDate, formProperty.dueDate) &&
        Objects.equals(this.reminderDate, formProperty.reminderDate) &&
        Objects.equals(this.accessCode, formProperty.accessCode) &&
        Objects.equals(this.completedAt, formProperty.completedAt) &&
        Objects.equals(this.formDesign, formProperty.formDesign) &&
        Objects.equals(this.subject, formProperty.subject) &&
        Objects.equals(this.respondent, formProperty.respondent) &&
        Objects.equals(this.submitter, formProperty.submitter) &&
        Objects.equals(this.answers, formProperty.answers) &&
        Objects.equals(this.documentUploads, formProperty.documentUploads) &&
        Objects.equals(this.job, formProperty.job) &&
        Objects.equals(this.person, formProperty.person)&&
        Objects.equals(this.additionalProperties, formProperty.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, issueDate, dueDate, reminderDate, accessCode, completedAt, formDesign, subject, respondent, submitter, answers, documentUploads, job, person, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FormProperty {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    issueDate: ").append(toIndentedString(issueDate)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    reminderDate: ").append(toIndentedString(reminderDate)).append("\n");
    sb.append("    accessCode: ").append(toIndentedString(accessCode)).append("\n");
    sb.append("    completedAt: ").append(toIndentedString(completedAt)).append("\n");
    sb.append("    formDesign: ").append(toIndentedString(formDesign)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    respondent: ").append(toIndentedString(respondent)).append("\n");
    sb.append("    submitter: ").append(toIndentedString(submitter)).append("\n");
    sb.append("    answers: ").append(toIndentedString(answers)).append("\n");
    sb.append("    documentUploads: ").append(toIndentedString(documentUploads)).append("\n");
    sb.append("    job: ").append(toIndentedString(job)).append("\n");
    sb.append("    person: ").append(toIndentedString(person)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("issueDate");
    openapiFields.add("dueDate");
    openapiFields.add("reminderDate");
    openapiFields.add("accessCode");
    openapiFields.add("completedAt");
    openapiFields.add("formDesign");
    openapiFields.add("subject");
    openapiFields.add("respondent");
    openapiFields.add("submitter");
    openapiFields.add("answers");
    openapiFields.add("documentUploads");
    openapiFields.add("job");
    openapiFields.add("person");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FormProperty
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FormProperty.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FormProperty is not found in the empty JSON string", FormProperty.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("issueDate") != null && !jsonObj.get("issueDate").isJsonNull()) && !jsonObj.get("issueDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issueDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issueDate").toString()));
      }
      if ((jsonObj.get("accessCode") != null && !jsonObj.get("accessCode").isJsonNull()) && !jsonObj.get("accessCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessCode").toString()));
      }
      // validate the optional field `formDesign`
      if (jsonObj.get("formDesign") != null && !jsonObj.get("formDesign").isJsonNull()) {
        FormPropertyFormDesign.validateJsonObject(jsonObj.getAsJsonObject("formDesign"));
      }
      // validate the optional field `subject`
      if (jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) {
        FormPropertySubject.validateJsonObject(jsonObj.getAsJsonObject("subject"));
      }
      if (jsonObj.get("documentUploads") != null && !jsonObj.get("documentUploads").isJsonNull()) {
        JsonArray jsonArraydocumentUploads = jsonObj.getAsJsonArray("documentUploads");
        if (jsonArraydocumentUploads != null) {
          // ensure the json data is an array
          if (!jsonObj.get("documentUploads").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `documentUploads` to be an array in the JSON string but got `%s`", jsonObj.get("documentUploads").toString()));
          }

          // validate the optional field `documentUploads` (array)
          for (int i = 0; i < jsonArraydocumentUploads.size(); i++) {
            FormPropertyDocumentUploadsInner.validateJsonObject(jsonArraydocumentUploads.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FormProperty.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FormProperty' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FormProperty> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FormProperty.class));

       return (TypeAdapter<T>) new TypeAdapter<FormProperty>() {
           @Override
           public void write(JsonWriter out, FormProperty value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public FormProperty read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             FormProperty instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FormProperty given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FormProperty
  * @throws IOException if the JSON string is invalid with respect to FormProperty
  */
  public static FormProperty fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FormProperty.class);
  }

 /**
  * Convert an instance of FormProperty to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

