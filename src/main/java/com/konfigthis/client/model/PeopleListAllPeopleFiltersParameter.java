/*
 * intelliHR Public API
 * You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)
 *
 * The version of the OpenAPI document: V1
 * Contact: support@intellihr.co
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PeopleListAllPeopleFiltersParameter
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PeopleListAllPeopleFiltersParameter {
  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_PRIMARY_EMAIL_ADDRESS = "primaryEmailAddress";
  @SerializedName(SERIALIZED_NAME_PRIMARY_EMAIL_ADDRESS)
  private String primaryEmailAddress;

  public static final String SERIALIZED_NAME_EMPLOYEE_NUMBER = "employeeNumber";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_NUMBER)
  private String employeeNumber;

  public static final String SERIALIZED_NAME_AUTO_INCREMENT_INTELLIHR_ID = "autoIncrementIntellihrId";
  @SerializedName(SERIALIZED_NAME_AUTO_INCREMENT_INTELLIHR_ID)
  private Double autoIncrementIntellihrId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_UPDATED_WITHIN = "updatedWithin";
  @SerializedName(SERIALIZED_NAME_UPDATED_WITHIN)
  private Double updatedWithin;

  public static final String SERIALIZED_NAME_IS_ON_EXTENDED_LEAVE = "isOnExtendedLeave";
  @SerializedName(SERIALIZED_NAME_IS_ON_EXTENDED_LEAVE)
  private String isOnExtendedLeave;

  public PeopleListAllPeopleFiltersParameter() {
  }

  public PeopleListAllPeopleFiltersParameter jobId(String jobId) {
    
    
    if (jobId != null && jobId.length() < 36) {
      throw new IllegalArgumentException("Invalid value for jobId. Length must be greater than or equal to 36.");
    }
    
    this.jobId = jobId;
    return this;
  }

   /**
   * The identifier string for the [Job](https://developers.intellihr.io/docs/v1/). This can be chained by &#x60;,&#x60; to search for current jobs that belong to multiple [people](https://developers.intellihr.io/docs/v1/).  Example filter: &#x60;filters[jobId][eq]&#x3D;dc996d73-a75e-499c-a96e-bd7d0df45f57,26d0ffc4-60f6-4672-a603-caaa4564af12&#x60;  This filter supports the equality &#x60;[eq]&#x60; operation
   * @return jobId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "dc996d73-a75e-499c-a96e-bd7d0df45f57,26d0ffc4-60f6-4672-a603-caaa4564af12", value = "The identifier string for the [Job](https://developers.intellihr.io/docs/v1/). This can be chained by `,` to search for current jobs that belong to multiple [people](https://developers.intellihr.io/docs/v1/).  Example filter: `filters[jobId][eq]=dc996d73-a75e-499c-a96e-bd7d0df45f57,26d0ffc4-60f6-4672-a603-caaa4564af12`  This filter supports the equality `[eq]` operation")

  public String getJobId() {
    return jobId;
  }


  public void setJobId(String jobId) {
    
    
    if (jobId != null && jobId.length() < 36) {
      throw new IllegalArgumentException("Invalid value for jobId. Length must be greater than or equal to 36.");
    }
    this.jobId = jobId;
  }


  public PeopleListAllPeopleFiltersParameter primaryEmailAddress(String primaryEmailAddress) {
    
    
    
    
    this.primaryEmailAddress = primaryEmailAddress;
    return this;
  }

   /**
   * This Person&#39;s primary email address.  Example filter: &#x60;filters[primaryEmailAddress][eq]&#x3D;bruce.wayne@batman.org&#x60;  This filter supports the equality &#x60;[eq]&#x60; operation
   * @return primaryEmailAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "bruce.wayne@batman.org", value = "This Person's primary email address.  Example filter: `filters[primaryEmailAddress][eq]=bruce.wayne@batman.org`  This filter supports the equality `[eq]` operation")

  public String getPrimaryEmailAddress() {
    return primaryEmailAddress;
  }


  public void setPrimaryEmailAddress(String primaryEmailAddress) {
    
    
    
    this.primaryEmailAddress = primaryEmailAddress;
  }


  public PeopleListAllPeopleFiltersParameter employeeNumber(String employeeNumber) {
    
    
    
    
    this.employeeNumber = employeeNumber;
    return this;
  }

   /**
   * A manually entered employee number that identifies a [Person](https://developers.intellihr.io/docs/v1/) in intelliHR. It may be hidden in the system&#39;s UI depending upon your tenant&#39;s configuration.  Example filter: &#x60;filters[employeeNumber][eq]&#x3D;00001&#x60;  This filter supports the equality &#x60;[eq]&#x60; operation
   * @return employeeNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "00001", value = "A manually entered employee number that identifies a [Person](https://developers.intellihr.io/docs/v1/) in intelliHR. It may be hidden in the system's UI depending upon your tenant's configuration.  Example filter: `filters[employeeNumber][eq]=00001`  This filter supports the equality `[eq]` operation")

  public String getEmployeeNumber() {
    return employeeNumber;
  }


  public void setEmployeeNumber(String employeeNumber) {
    
    
    
    this.employeeNumber = employeeNumber;
  }


  public PeopleListAllPeopleFiltersParameter autoIncrementIntellihrId(Double autoIncrementIntellihrId) {
    
    
    
    
    this.autoIncrementIntellihrId = autoIncrementIntellihrId;
    return this;
  }

  public PeopleListAllPeopleFiltersParameter autoIncrementIntellihrId(Integer autoIncrementIntellihrId) {
    
    
    
    
    this.autoIncrementIntellihrId = autoIncrementIntellihrId.doubleValue();
    return this;
  }

   /**
   * An autogenerated number that uniquely identifies a [Person](https://developers.intellihr.io/docs/v1/) in intelliHR. It may be hidden in the system&#39;s UI depending upon your tenant&#39;s configuration.  Example filter: &#x60;filters[autoIncrementIntellihrId][eq]&#x3D;1000&#x60;  This filter supports the equality &#x60;[eq]&#x60; operation
   * @return autoIncrementIntellihrId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1000", value = "An autogenerated number that uniquely identifies a [Person](https://developers.intellihr.io/docs/v1/) in intelliHR. It may be hidden in the system's UI depending upon your tenant's configuration.  Example filter: `filters[autoIncrementIntellihrId][eq]=1000`  This filter supports the equality `[eq]` operation")

  public Double getAutoIncrementIntellihrId() {
    return autoIncrementIntellihrId;
  }


  public void setAutoIncrementIntellihrId(Double autoIncrementIntellihrId) {
    
    
    
    this.autoIncrementIntellihrId = autoIncrementIntellihrId;
  }


  public PeopleListAllPeopleFiltersParameter name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Name of a [Person](https://developers.intellihr.io/docs/v1/) in the system. This filter checks for an exact string match with any part of a [Persons](https://developers.intellihr.io/docs/v1/) name. This filter is performed case insensitively and regardless of name order (e.g. &#x60;&lt;last_name&gt; &lt;first_name&gt;&#x60;). If multiple [People](https://developers.intellihr.io/docs/v1/) match the &#x60;&lt;filter_value&gt;&#x60;, they will all be returned.  Example filter: &#x60;filters[name][eq]&#x3D;Batman%20(Bruce)%20Wayne&#x60;  This filter supports the equality &#x60;[eq]&#x60; operation
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Batman%20(Bruce)%20Wayne", value = "Name of a [Person](https://developers.intellihr.io/docs/v1/) in the system. This filter checks for an exact string match with any part of a [Persons](https://developers.intellihr.io/docs/v1/) name. This filter is performed case insensitively and regardless of name order (e.g. `<last_name> <first_name>`). If multiple [People](https://developers.intellihr.io/docs/v1/) match the `<filter_value>`, they will all be returned.  Example filter: `filters[name][eq]=Batman%20(Bruce)%20Wayne`  This filter supports the equality `[eq]` operation")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public PeopleListAllPeopleFiltersParameter updatedWithin(Double updatedWithin) {
    
    
    
    
    this.updatedWithin = updatedWithin;
    return this;
  }

  public PeopleListAllPeopleFiltersParameter updatedWithin(Integer updatedWithin) {
    
    
    
    
    this.updatedWithin = updatedWithin.doubleValue();
    return this;
  }

   /**
   * Filters people that have been updated within the specified amount of days.  Example filter: &#x60;filters[updatedWithin][eq]&#x3D;30&#x60;  This filter supports the equality &#x60;[eq]&#x60; operation
   * @return updatedWithin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "30", value = "Filters people that have been updated within the specified amount of days.  Example filter: `filters[updatedWithin][eq]=30`  This filter supports the equality `[eq]` operation")

  public Double getUpdatedWithin() {
    return updatedWithin;
  }


  public void setUpdatedWithin(Double updatedWithin) {
    
    
    
    this.updatedWithin = updatedWithin;
  }


  public PeopleListAllPeopleFiltersParameter isOnExtendedLeave(String isOnExtendedLeave) {
    
    
    
    
    this.isOnExtendedLeave = isOnExtendedLeave;
    return this;
  }

   /**
   * Filters people that are on extended leave. Parse &#39;true&#39; to filter for people on extended leave. Parse &#39;false&#39; for people not on extended leave  Example filter: &#x60;filters[isOnExtendedLeave][eq]&#x3D;true&#x60;  This filter supports the equality &#x60;[eq]&#x60; operation
   * @return isOnExtendedLeave
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Filters people that are on extended leave. Parse 'true' to filter for people on extended leave. Parse 'false' for people not on extended leave  Example filter: `filters[isOnExtendedLeave][eq]=true`  This filter supports the equality `[eq]` operation")

  public String getIsOnExtendedLeave() {
    return isOnExtendedLeave;
  }


  public void setIsOnExtendedLeave(String isOnExtendedLeave) {
    
    
    
    this.isOnExtendedLeave = isOnExtendedLeave;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PeopleListAllPeopleFiltersParameter instance itself
   */
  public PeopleListAllPeopleFiltersParameter putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PeopleListAllPeopleFiltersParameter peopleListAllPeopleFiltersParameter = (PeopleListAllPeopleFiltersParameter) o;
    return Objects.equals(this.jobId, peopleListAllPeopleFiltersParameter.jobId) &&
        Objects.equals(this.primaryEmailAddress, peopleListAllPeopleFiltersParameter.primaryEmailAddress) &&
        Objects.equals(this.employeeNumber, peopleListAllPeopleFiltersParameter.employeeNumber) &&
        Objects.equals(this.autoIncrementIntellihrId, peopleListAllPeopleFiltersParameter.autoIncrementIntellihrId) &&
        Objects.equals(this.name, peopleListAllPeopleFiltersParameter.name) &&
        Objects.equals(this.updatedWithin, peopleListAllPeopleFiltersParameter.updatedWithin) &&
        Objects.equals(this.isOnExtendedLeave, peopleListAllPeopleFiltersParameter.isOnExtendedLeave)&&
        Objects.equals(this.additionalProperties, peopleListAllPeopleFiltersParameter.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobId, primaryEmailAddress, employeeNumber, autoIncrementIntellihrId, name, updatedWithin, isOnExtendedLeave, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PeopleListAllPeopleFiltersParameter {\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    primaryEmailAddress: ").append(toIndentedString(primaryEmailAddress)).append("\n");
    sb.append("    employeeNumber: ").append(toIndentedString(employeeNumber)).append("\n");
    sb.append("    autoIncrementIntellihrId: ").append(toIndentedString(autoIncrementIntellihrId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    updatedWithin: ").append(toIndentedString(updatedWithin)).append("\n");
    sb.append("    isOnExtendedLeave: ").append(toIndentedString(isOnExtendedLeave)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jobId");
    openapiFields.add("primaryEmailAddress");
    openapiFields.add("employeeNumber");
    openapiFields.add("autoIncrementIntellihrId");
    openapiFields.add("name");
    openapiFields.add("updatedWithin");
    openapiFields.add("isOnExtendedLeave");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PeopleListAllPeopleFiltersParameter
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PeopleListAllPeopleFiltersParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PeopleListAllPeopleFiltersParameter is not found in the empty JSON string", PeopleListAllPeopleFiltersParameter.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) && !jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      if ((jsonObj.get("primaryEmailAddress") != null && !jsonObj.get("primaryEmailAddress").isJsonNull()) && !jsonObj.get("primaryEmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryEmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryEmailAddress").toString()));
      }
      if ((jsonObj.get("employeeNumber") != null && !jsonObj.get("employeeNumber").isJsonNull()) && !jsonObj.get("employeeNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeNumber").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("isOnExtendedLeave") != null && !jsonObj.get("isOnExtendedLeave").isJsonNull()) && !jsonObj.get("isOnExtendedLeave").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isOnExtendedLeave` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isOnExtendedLeave").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PeopleListAllPeopleFiltersParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PeopleListAllPeopleFiltersParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PeopleListAllPeopleFiltersParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PeopleListAllPeopleFiltersParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<PeopleListAllPeopleFiltersParameter>() {
           @Override
           public void write(JsonWriter out, PeopleListAllPeopleFiltersParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PeopleListAllPeopleFiltersParameter read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PeopleListAllPeopleFiltersParameter instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PeopleListAllPeopleFiltersParameter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PeopleListAllPeopleFiltersParameter
  * @throws IOException if the JSON string is invalid with respect to PeopleListAllPeopleFiltersParameter
  */
  public static PeopleListAllPeopleFiltersParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PeopleListAllPeopleFiltersParameter.class);
  }

 /**
  * Convert an instance of PeopleListAllPeopleFiltersParameter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

