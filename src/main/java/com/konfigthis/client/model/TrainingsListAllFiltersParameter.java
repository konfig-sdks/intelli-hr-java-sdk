/*
 * intelliHR Public API
 * You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)
 *
 * The version of the OpenAPI document: V1
 * Contact: support@intellihr.co
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TrainingsListAllFiltersParameter
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TrainingsListAllFiltersParameter {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROVIDER_ID = "providerId";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ID)
  private String providerId;

  public static final String SERIALIZED_NAME_PROVIDER_NAME = "providerName";
  @SerializedName(SERIALIZED_NAME_PROVIDER_NAME)
  private String providerName;

  public static final String SERIALIZED_NAME_TYPE_ID = "typeId";
  @SerializedName(SERIALIZED_NAME_TYPE_ID)
  private String typeId;

  public static final String SERIALIZED_NAME_TYPE_NAME = "typeName";
  @SerializedName(SERIALIZED_NAME_TYPE_NAME)
  private String typeName;

  public static final String SERIALIZED_NAME_EMPLOYEE_NUMBER = "employeeNumber";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_NUMBER)
  private String employeeNumber;

  public static final String SERIALIZED_NAME_PRIMARY_EMAIL_ADDRESS = "primaryEmailAddress";
  @SerializedName(SERIALIZED_NAME_PRIMARY_EMAIL_ADDRESS)
  private String primaryEmailAddress;

  public TrainingsListAllFiltersParameter() {
  }

  public TrainingsListAllFiltersParameter name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * User friendly name given to this [Training](https://developers.intellihr.io/docs/v1/). Filtering is done case insensitively  Example filter: &#x60;filters[name][eq]&#x3D;Accounting%20Compliance%20101&#x60;  This filter supports the equality &#x60;[eq]&#x60; operation
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Accounting%20Compliance%20101", value = "User friendly name given to this [Training](https://developers.intellihr.io/docs/v1/). Filtering is done case insensitively  Example filter: `filters[name][eq]=Accounting%20Compliance%20101`  This filter supports the equality `[eq]` operation")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public TrainingsListAllFiltersParameter providerId(String providerId) {
    
    
    if (providerId != null && providerId.length() < 36) {
      throw new IllegalArgumentException("Invalid value for providerId. Length must be greater than or equal to 36.");
    }
    
    this.providerId = providerId;
    return this;
  }

   /**
   * The identifier string for the [Training Provider](https://developers.intellihr.io/docs/v1/) of the [Training](https://developers.intellihr.io/docs/v1/).  Example filter: &#x60;filters[providerId][eq]&#x3D;8a5f3ea6-ea6b-4425-8a87-3c256bb7b6f9&#x60;  This filter supports the equality &#x60;[eq]&#x60; operation
   * @return providerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "8a5f3ea6-ea6b-4425-8a87-3c256bb7b6f9", value = "The identifier string for the [Training Provider](https://developers.intellihr.io/docs/v1/) of the [Training](https://developers.intellihr.io/docs/v1/).  Example filter: `filters[providerId][eq]=8a5f3ea6-ea6b-4425-8a87-3c256bb7b6f9`  This filter supports the equality `[eq]` operation")

  public String getProviderId() {
    return providerId;
  }


  public void setProviderId(String providerId) {
    
    
    if (providerId != null && providerId.length() < 36) {
      throw new IllegalArgumentException("Invalid value for providerId. Length must be greater than or equal to 36.");
    }
    this.providerId = providerId;
  }


  public TrainingsListAllFiltersParameter providerName(String providerName) {
    
    
    
    
    this.providerName = providerName;
    return this;
  }

   /**
   * User friendly name given to the [Training Provider](https://developers.intellihr.io/docs/v1/) of the [Training](https://developers.intellihr.io/docs/v1/).  Example filter: &#x60;filters[providerName][eq]&#x3D;HR%20Training%20Team&#x60;  This filter supports the equality &#x60;[eq]&#x60; operation
   * @return providerName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "HR%20Training%20Team", value = "User friendly name given to the [Training Provider](https://developers.intellihr.io/docs/v1/) of the [Training](https://developers.intellihr.io/docs/v1/).  Example filter: `filters[providerName][eq]=HR%20Training%20Team`  This filter supports the equality `[eq]` operation")

  public String getProviderName() {
    return providerName;
  }


  public void setProviderName(String providerName) {
    
    
    
    this.providerName = providerName;
  }


  public TrainingsListAllFiltersParameter typeId(String typeId) {
    
    
    if (typeId != null && typeId.length() < 36) {
      throw new IllegalArgumentException("Invalid value for typeId. Length must be greater than or equal to 36.");
    }
    
    this.typeId = typeId;
    return this;
  }

   /**
   * The identifier string for the [Training Type](https://developers.intellihr.io/docs/v1/) of the [Training](https://developers.intellihr.io/docs/v1/).  Example filter: &#x60;filters[typeId][eq]&#x3D;8a5f3ea6-ea6b-4425-8a87-3c256bb7b6f9&#x60;  This filter supports the equality &#x60;[eq]&#x60; operation
   * @return typeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "8a5f3ea6-ea6b-4425-8a87-3c256bb7b6f9", value = "The identifier string for the [Training Type](https://developers.intellihr.io/docs/v1/) of the [Training](https://developers.intellihr.io/docs/v1/).  Example filter: `filters[typeId][eq]=8a5f3ea6-ea6b-4425-8a87-3c256bb7b6f9`  This filter supports the equality `[eq]` operation")

  public String getTypeId() {
    return typeId;
  }


  public void setTypeId(String typeId) {
    
    
    if (typeId != null && typeId.length() < 36) {
      throw new IllegalArgumentException("Invalid value for typeId. Length must be greater than or equal to 36.");
    }
    this.typeId = typeId;
  }


  public TrainingsListAllFiltersParameter typeName(String typeName) {
    
    
    
    
    this.typeName = typeName;
    return this;
  }

   /**
   * User friendly name given to the [Training Type](https://developers.intellihr.io/docs/v1/) of the [Training](https://developers.intellihr.io/docs/v1/).  Example filter: &#x60;filters[typeName][eq]&#x3D;Soft%20Skills&#x60;  This filter supports the equality &#x60;[eq]&#x60; operation
   * @return typeName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Soft%20Skills", value = "User friendly name given to the [Training Type](https://developers.intellihr.io/docs/v1/) of the [Training](https://developers.intellihr.io/docs/v1/).  Example filter: `filters[typeName][eq]=Soft%20Skills`  This filter supports the equality `[eq]` operation")

  public String getTypeName() {
    return typeName;
  }


  public void setTypeName(String typeName) {
    
    
    
    this.typeName = typeName;
  }


  public TrainingsListAllFiltersParameter employeeNumber(String employeeNumber) {
    
    
    
    
    this.employeeNumber = employeeNumber;
    return this;
  }

   /**
   * The employee number for the [Person](https://developers.intellihr.io/docs/v1/) to whom the Training belongs.  Example filter: &#x60;filters[employeeNumber][eq]&#x3D;00001&#x60;  This filter supports the equality &#x60;[eq]&#x60; operation
   * @return employeeNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "00001", value = "The employee number for the [Person](https://developers.intellihr.io/docs/v1/) to whom the Training belongs.  Example filter: `filters[employeeNumber][eq]=00001`  This filter supports the equality `[eq]` operation")

  public String getEmployeeNumber() {
    return employeeNumber;
  }


  public void setEmployeeNumber(String employeeNumber) {
    
    
    
    this.employeeNumber = employeeNumber;
  }


  public TrainingsListAllFiltersParameter primaryEmailAddress(String primaryEmailAddress) {
    
    
    
    
    this.primaryEmailAddress = primaryEmailAddress;
    return this;
  }

   /**
   * The primary email address for the [Person](https://developers.intellihr.io/docs/v1/) to whom the Training belongs.  Example filter: &#x60;filters[primaryEmailAddress][eq]&#x3D;bruce.wayne@batman.org&#x60;  This filter supports the equality &#x60;[eq]&#x60; operation
   * @return primaryEmailAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "bruce.wayne@batman.org", value = "The primary email address for the [Person](https://developers.intellihr.io/docs/v1/) to whom the Training belongs.  Example filter: `filters[primaryEmailAddress][eq]=bruce.wayne@batman.org`  This filter supports the equality `[eq]` operation")

  public String getPrimaryEmailAddress() {
    return primaryEmailAddress;
  }


  public void setPrimaryEmailAddress(String primaryEmailAddress) {
    
    
    
    this.primaryEmailAddress = primaryEmailAddress;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TrainingsListAllFiltersParameter instance itself
   */
  public TrainingsListAllFiltersParameter putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrainingsListAllFiltersParameter trainingsListAllFiltersParameter = (TrainingsListAllFiltersParameter) o;
    return Objects.equals(this.name, trainingsListAllFiltersParameter.name) &&
        Objects.equals(this.providerId, trainingsListAllFiltersParameter.providerId) &&
        Objects.equals(this.providerName, trainingsListAllFiltersParameter.providerName) &&
        Objects.equals(this.typeId, trainingsListAllFiltersParameter.typeId) &&
        Objects.equals(this.typeName, trainingsListAllFiltersParameter.typeName) &&
        Objects.equals(this.employeeNumber, trainingsListAllFiltersParameter.employeeNumber) &&
        Objects.equals(this.primaryEmailAddress, trainingsListAllFiltersParameter.primaryEmailAddress)&&
        Objects.equals(this.additionalProperties, trainingsListAllFiltersParameter.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, providerId, providerName, typeId, typeName, employeeNumber, primaryEmailAddress, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrainingsListAllFiltersParameter {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    providerId: ").append(toIndentedString(providerId)).append("\n");
    sb.append("    providerName: ").append(toIndentedString(providerName)).append("\n");
    sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("    employeeNumber: ").append(toIndentedString(employeeNumber)).append("\n");
    sb.append("    primaryEmailAddress: ").append(toIndentedString(primaryEmailAddress)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("providerId");
    openapiFields.add("providerName");
    openapiFields.add("typeId");
    openapiFields.add("typeName");
    openapiFields.add("employeeNumber");
    openapiFields.add("primaryEmailAddress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TrainingsListAllFiltersParameter
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TrainingsListAllFiltersParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrainingsListAllFiltersParameter is not found in the empty JSON string", TrainingsListAllFiltersParameter.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("providerId") != null && !jsonObj.get("providerId").isJsonNull()) && !jsonObj.get("providerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerId").toString()));
      }
      if ((jsonObj.get("providerName") != null && !jsonObj.get("providerName").isJsonNull()) && !jsonObj.get("providerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerName").toString()));
      }
      if ((jsonObj.get("typeId") != null && !jsonObj.get("typeId").isJsonNull()) && !jsonObj.get("typeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeId").toString()));
      }
      if ((jsonObj.get("typeName") != null && !jsonObj.get("typeName").isJsonNull()) && !jsonObj.get("typeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeName").toString()));
      }
      if ((jsonObj.get("employeeNumber") != null && !jsonObj.get("employeeNumber").isJsonNull()) && !jsonObj.get("employeeNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeNumber").toString()));
      }
      if ((jsonObj.get("primaryEmailAddress") != null && !jsonObj.get("primaryEmailAddress").isJsonNull()) && !jsonObj.get("primaryEmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryEmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryEmailAddress").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrainingsListAllFiltersParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrainingsListAllFiltersParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrainingsListAllFiltersParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrainingsListAllFiltersParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<TrainingsListAllFiltersParameter>() {
           @Override
           public void write(JsonWriter out, TrainingsListAllFiltersParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TrainingsListAllFiltersParameter read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TrainingsListAllFiltersParameter instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TrainingsListAllFiltersParameter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TrainingsListAllFiltersParameter
  * @throws IOException if the JSON string is invalid with respect to TrainingsListAllFiltersParameter
  */
  public static TrainingsListAllFiltersParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrainingsListAllFiltersParameter.class);
  }

 /**
  * Convert an instance of TrainingsListAllFiltersParameter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

