/*
 * intelliHR Public API
 * You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)
 *
 * The version of the OpenAPI document: V1
 * Contact: support@intellihr.co
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PayGrade Model
 */
@ApiModel(description = "PayGrade Model")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PayGrade {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private Object startDate = null;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private Object endDate = null;

  public static final String SERIALIZED_NAME_IS_ENABLED = "isEnabled";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED)
  private Boolean isEnabled = true;

  public static final String SERIALIZED_NAME_ACTIVE_JOBS = "activeJobs";
  @SerializedName(SERIALIZED_NAME_ACTIVE_JOBS)
  private Integer activeJobs;

  public static final String SERIALIZED_NAME_IS_OVERRIDABLE = "isOverridable";
  @SerializedName(SERIALIZED_NAME_IS_OVERRIDABLE)
  private Boolean isOverridable = true;

  public static final String SERIALIZED_NAME_PERMANENT_HOURLY_RATE = "permanentHourlyRate";
  @SerializedName(SERIALIZED_NAME_PERMANENT_HOURLY_RATE)
  private Object permanentHourlyRate = null;

  public static final String SERIALIZED_NAME_PERMANENT_HOURLY_RATE_CURRENCY = "permanentHourlyRateCurrency";
  @SerializedName(SERIALIZED_NAME_PERMANENT_HOURLY_RATE_CURRENCY)
  private Object permanentHourlyRateCurrency = null;

  public static final String SERIALIZED_NAME_CASUAL_HOURLY_RATE = "casualHourlyRate";
  @SerializedName(SERIALIZED_NAME_CASUAL_HOURLY_RATE)
  private Object casualHourlyRate = null;

  public static final String SERIALIZED_NAME_CASUAL_HOURLY_RATE_CURRENCY = "casualHourlyRateCurrency";
  @SerializedName(SERIALIZED_NAME_CASUAL_HOURLY_RATE_CURRENCY)
  private Object casualHourlyRateCurrency = null;

  public static final String SERIALIZED_NAME_ANNUAL_SALARY = "annualSalary";
  @SerializedName(SERIALIZED_NAME_ANNUAL_SALARY)
  private Object annualSalary = null;

  public static final String SERIALIZED_NAME_ANNUAL_SALARY_CURRENCY = "annualSalaryCurrency";
  @SerializedName(SERIALIZED_NAME_ANNUAL_SALARY_CURRENCY)
  private Object annualSalaryCurrency = null;

  /**
   * The type of this [Pay Grade](https://developers.intellihr.io/docs/v1/)
   */
  @JsonAdapter(PayGradeTypeEnum.Adapter.class)
 public enum PayGradeTypeEnum {
    FIXED("FIXED"),
    
    STEP("STEP");

    private String value;

    PayGradeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PayGradeTypeEnum fromValue(String value) {
      for (PayGradeTypeEnum b : PayGradeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PayGradeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PayGradeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PayGradeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PayGradeTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAY_GRADE_TYPE = "payGradeType";
  @SerializedName(SERIALIZED_NAME_PAY_GRADE_TYPE)
  private PayGradeTypeEnum payGradeType;

  public static final String SERIALIZED_NAME_PAY_GRADE_VALUES = "payGradeValues";
  @SerializedName(SERIALIZED_NAME_PAY_GRADE_VALUES)
  private Object payGradeValues = null;

  public static final String SERIALIZED_NAME_CHANGE_USER = "changeUser";
  @SerializedName(SERIALIZED_NAME_CHANGE_USER)
  private Object changeUser = null;

  public static final String SERIALIZED_NAME_EMPLOYMENT_CONDITION = "employmentCondition";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT_CONDITION)
  private Object employmentCondition = null;

  public PayGrade() {
  }

  public PayGrade description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Description of the [Pay Grade](https://developers.intellihr.io/docs/v1/).
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "The founder pay grade", value = "Description of the [Pay Grade](https://developers.intellihr.io/docs/v1/).")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public PayGrade id(String id) {
    
    
    if (id != null && id.length() < 36) {
      throw new IllegalArgumentException("Invalid value for id. Length must be greater than or equal to 36.");
    }
    
    this.id = id;
    return this;
  }

   /**
   * The identifier string for the [Pay Grade](https://developers.intellihr.io/docs/v1/).
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "8a5f3ea6-ea6b-4425-8a87-3c256bb7b6f9", value = "The identifier string for the [Pay Grade](https://developers.intellihr.io/docs/v1/).")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    if (id != null && id.length() < 36) {
      throw new IllegalArgumentException("Invalid value for id. Length must be greater than or equal to 36.");
    }
    this.id = id;
  }


  public PayGrade code(String code) {
    
    
    
    
    this.code = code;
    return this;
  }

   /**
   * Administrative, short code associated to the [Pay Grade](https://developers.intellihr.io/docs/v1/).
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "L0", value = "Administrative, short code associated to the [Pay Grade](https://developers.intellihr.io/docs/v1/).")

  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    
    
    
    this.code = code;
  }


  public PayGrade name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * User friendly name given to the [Pay Grade](https://developers.intellihr.io/docs/v1/).
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Founder", value = "User friendly name given to the [Pay Grade](https://developers.intellihr.io/docs/v1/).")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public PayGrade startDate(Object startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getStartDate() {
    return startDate;
  }


  public void setStartDate(Object startDate) {
    
    
    
    this.startDate = startDate;
  }


  public PayGrade endDate(Object endDate) {
    
    
    
    
    this.endDate = endDate;
    return this;
  }

   /**
   * Get endDate
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getEndDate() {
    return endDate;
  }


  public void setEndDate(Object endDate) {
    
    
    
    this.endDate = endDate;
  }


  public PayGrade isEnabled(Boolean isEnabled) {
    
    
    
    
    this.isEnabled = isEnabled;
    return this;
  }

   /**
   * Specifies whether users can select this [Pay Grade](https://developers.intellihr.io/docs/v1/) in dropdowns.
   * @return isEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Specifies whether users can select this [Pay Grade](https://developers.intellihr.io/docs/v1/) in dropdowns.")

  public Boolean getIsEnabled() {
    return isEnabled;
  }


  public void setIsEnabled(Boolean isEnabled) {
    
    
    
    this.isEnabled = isEnabled;
  }


  public PayGrade activeJobs(Integer activeJobs) {
    
    
    
    
    this.activeJobs = activeJobs;
    return this;
  }

   /**
   * Number of [Jobs](https://developers.intellihr.io/docs/v1/) that have been assigned this [Pay Grade](https://developers.intellihr.io/docs/v1/) in dropdowns.
   * @return activeJobs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "Number of [Jobs](https://developers.intellihr.io/docs/v1/) that have been assigned this [Pay Grade](https://developers.intellihr.io/docs/v1/) in dropdowns.")

  public Integer getActiveJobs() {
    return activeJobs;
  }


  public void setActiveJobs(Integer activeJobs) {
    
    
    
    this.activeJobs = activeJobs;
  }


  public PayGrade isOverridable(Boolean isOverridable) {
    
    
    
    
    this.isOverridable = isOverridable;
    return this;
  }

   /**
   * Allow this [Pay Grade](https://developers.intellihr.io/docs/v1/) value to be overwritten.
   * @return isOverridable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Allow this [Pay Grade](https://developers.intellihr.io/docs/v1/) value to be overwritten.")

  public Boolean getIsOverridable() {
    return isOverridable;
  }


  public void setIsOverridable(Boolean isOverridable) {
    
    
    
    this.isOverridable = isOverridable;
  }


  public PayGrade permanentHourlyRate(Object permanentHourlyRate) {
    
    
    
    
    this.permanentHourlyRate = permanentHourlyRate;
    return this;
  }

   /**
   * Get permanentHourlyRate
   * @return permanentHourlyRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getPermanentHourlyRate() {
    return permanentHourlyRate;
  }


  public void setPermanentHourlyRate(Object permanentHourlyRate) {
    
    
    
    this.permanentHourlyRate = permanentHourlyRate;
  }


  public PayGrade permanentHourlyRateCurrency(Object permanentHourlyRateCurrency) {
    
    
    
    
    this.permanentHourlyRateCurrency = permanentHourlyRateCurrency;
    return this;
  }

   /**
   * Get permanentHourlyRateCurrency
   * @return permanentHourlyRateCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getPermanentHourlyRateCurrency() {
    return permanentHourlyRateCurrency;
  }


  public void setPermanentHourlyRateCurrency(Object permanentHourlyRateCurrency) {
    
    
    
    this.permanentHourlyRateCurrency = permanentHourlyRateCurrency;
  }


  public PayGrade casualHourlyRate(Object casualHourlyRate) {
    
    
    
    
    this.casualHourlyRate = casualHourlyRate;
    return this;
  }

   /**
   * Get casualHourlyRate
   * @return casualHourlyRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getCasualHourlyRate() {
    return casualHourlyRate;
  }


  public void setCasualHourlyRate(Object casualHourlyRate) {
    
    
    
    this.casualHourlyRate = casualHourlyRate;
  }


  public PayGrade casualHourlyRateCurrency(Object casualHourlyRateCurrency) {
    
    
    
    
    this.casualHourlyRateCurrency = casualHourlyRateCurrency;
    return this;
  }

   /**
   * Get casualHourlyRateCurrency
   * @return casualHourlyRateCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getCasualHourlyRateCurrency() {
    return casualHourlyRateCurrency;
  }


  public void setCasualHourlyRateCurrency(Object casualHourlyRateCurrency) {
    
    
    
    this.casualHourlyRateCurrency = casualHourlyRateCurrency;
  }


  public PayGrade annualSalary(Object annualSalary) {
    
    
    
    
    this.annualSalary = annualSalary;
    return this;
  }

   /**
   * Get annualSalary
   * @return annualSalary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getAnnualSalary() {
    return annualSalary;
  }


  public void setAnnualSalary(Object annualSalary) {
    
    
    
    this.annualSalary = annualSalary;
  }


  public PayGrade annualSalaryCurrency(Object annualSalaryCurrency) {
    
    
    
    
    this.annualSalaryCurrency = annualSalaryCurrency;
    return this;
  }

   /**
   * Get annualSalaryCurrency
   * @return annualSalaryCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getAnnualSalaryCurrency() {
    return annualSalaryCurrency;
  }


  public void setAnnualSalaryCurrency(Object annualSalaryCurrency) {
    
    
    
    this.annualSalaryCurrency = annualSalaryCurrency;
  }


  public PayGrade payGradeType(PayGradeTypeEnum payGradeType) {
    
    
    
    
    this.payGradeType = payGradeType;
    return this;
  }

   /**
   * The type of this [Pay Grade](https://developers.intellihr.io/docs/v1/)
   * @return payGradeType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of this [Pay Grade](https://developers.intellihr.io/docs/v1/)")

  public PayGradeTypeEnum getPayGradeType() {
    return payGradeType;
  }


  public void setPayGradeType(PayGradeTypeEnum payGradeType) {
    
    
    
    this.payGradeType = payGradeType;
  }


  public PayGrade payGradeValues(Object payGradeValues) {
    
    
    
    
    this.payGradeValues = payGradeValues;
    return this;
  }

   /**
   * Get payGradeValues
   * @return payGradeValues
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getPayGradeValues() {
    return payGradeValues;
  }


  public void setPayGradeValues(Object payGradeValues) {
    
    
    
    this.payGradeValues = payGradeValues;
  }


  public PayGrade changeUser(Object changeUser) {
    
    
    
    
    this.changeUser = changeUser;
    return this;
  }

   /**
   * Get changeUser
   * @return changeUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getChangeUser() {
    return changeUser;
  }


  public void setChangeUser(Object changeUser) {
    
    
    
    this.changeUser = changeUser;
  }


  public PayGrade employmentCondition(Object employmentCondition) {
    
    
    
    
    this.employmentCondition = employmentCondition;
    return this;
  }

   /**
   * Get employmentCondition
   * @return employmentCondition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getEmploymentCondition() {
    return employmentCondition;
  }


  public void setEmploymentCondition(Object employmentCondition) {
    
    
    
    this.employmentCondition = employmentCondition;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PayGrade instance itself
   */
  public PayGrade putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayGrade payGrade = (PayGrade) o;
    return Objects.equals(this.description, payGrade.description) &&
        Objects.equals(this.id, payGrade.id) &&
        Objects.equals(this.code, payGrade.code) &&
        Objects.equals(this.name, payGrade.name) &&
        Objects.equals(this.startDate, payGrade.startDate) &&
        Objects.equals(this.endDate, payGrade.endDate) &&
        Objects.equals(this.isEnabled, payGrade.isEnabled) &&
        Objects.equals(this.activeJobs, payGrade.activeJobs) &&
        Objects.equals(this.isOverridable, payGrade.isOverridable) &&
        Objects.equals(this.permanentHourlyRate, payGrade.permanentHourlyRate) &&
        Objects.equals(this.permanentHourlyRateCurrency, payGrade.permanentHourlyRateCurrency) &&
        Objects.equals(this.casualHourlyRate, payGrade.casualHourlyRate) &&
        Objects.equals(this.casualHourlyRateCurrency, payGrade.casualHourlyRateCurrency) &&
        Objects.equals(this.annualSalary, payGrade.annualSalary) &&
        Objects.equals(this.annualSalaryCurrency, payGrade.annualSalaryCurrency) &&
        Objects.equals(this.payGradeType, payGrade.payGradeType) &&
        Objects.equals(this.payGradeValues, payGrade.payGradeValues) &&
        Objects.equals(this.changeUser, payGrade.changeUser) &&
        Objects.equals(this.employmentCondition, payGrade.employmentCondition)&&
        Objects.equals(this.additionalProperties, payGrade.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, id, code, name, startDate, endDate, isEnabled, activeJobs, isOverridable, permanentHourlyRate, permanentHourlyRateCurrency, casualHourlyRate, casualHourlyRateCurrency, annualSalary, annualSalaryCurrency, payGradeType, payGradeValues, changeUser, employmentCondition, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayGrade {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    activeJobs: ").append(toIndentedString(activeJobs)).append("\n");
    sb.append("    isOverridable: ").append(toIndentedString(isOverridable)).append("\n");
    sb.append("    permanentHourlyRate: ").append(toIndentedString(permanentHourlyRate)).append("\n");
    sb.append("    permanentHourlyRateCurrency: ").append(toIndentedString(permanentHourlyRateCurrency)).append("\n");
    sb.append("    casualHourlyRate: ").append(toIndentedString(casualHourlyRate)).append("\n");
    sb.append("    casualHourlyRateCurrency: ").append(toIndentedString(casualHourlyRateCurrency)).append("\n");
    sb.append("    annualSalary: ").append(toIndentedString(annualSalary)).append("\n");
    sb.append("    annualSalaryCurrency: ").append(toIndentedString(annualSalaryCurrency)).append("\n");
    sb.append("    payGradeType: ").append(toIndentedString(payGradeType)).append("\n");
    sb.append("    payGradeValues: ").append(toIndentedString(payGradeValues)).append("\n");
    sb.append("    changeUser: ").append(toIndentedString(changeUser)).append("\n");
    sb.append("    employmentCondition: ").append(toIndentedString(employmentCondition)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("code");
    openapiFields.add("name");
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("isEnabled");
    openapiFields.add("activeJobs");
    openapiFields.add("isOverridable");
    openapiFields.add("permanentHourlyRate");
    openapiFields.add("permanentHourlyRateCurrency");
    openapiFields.add("casualHourlyRate");
    openapiFields.add("casualHourlyRateCurrency");
    openapiFields.add("annualSalary");
    openapiFields.add("annualSalaryCurrency");
    openapiFields.add("payGradeType");
    openapiFields.add("payGradeValues");
    openapiFields.add("changeUser");
    openapiFields.add("employmentCondition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PayGrade
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PayGrade.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PayGrade is not found in the empty JSON string", PayGrade.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("payGradeType") != null && !jsonObj.get("payGradeType").isJsonNull()) && !jsonObj.get("payGradeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payGradeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payGradeType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PayGrade.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PayGrade' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PayGrade> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PayGrade.class));

       return (TypeAdapter<T>) new TypeAdapter<PayGrade>() {
           @Override
           public void write(JsonWriter out, PayGrade value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PayGrade read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PayGrade instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PayGrade given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PayGrade
  * @throws IOException if the JSON string is invalid with respect to PayGrade
  */
  public static PayGrade fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PayGrade.class);
  }

 /**
  * Convert an instance of PayGrade to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

