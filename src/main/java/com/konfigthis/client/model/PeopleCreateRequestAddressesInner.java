/*
 * intelliHR Public API
 * You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)
 *
 * The version of the OpenAPI document: V1
 * Contact: support@intellihr.co
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.BusinessEntitiesCreateRequestCustomFieldsValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PeopleCreateRequestAddressesInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PeopleCreateRequestAddressesInner {
  public static final String SERIALIZED_NAME_ADDRESS_TYPE = "addressType";
  @SerializedName(SERIALIZED_NAME_ADDRESS_TYPE)
  private String addressType;

  public static final String SERIALIZED_NAME_FULL_ADDRESS = "fullAddress";
  @SerializedName(SERIALIZED_NAME_FULL_ADDRESS)
  private String fullAddress;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_POSTCODE = "postcode";
  @SerializedName(SERIALIZED_NAME_POSTCODE)
  private String postcode;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STREET = "street";
  @SerializedName(SERIALIZED_NAME_STREET)
  private String street;

  public static final String SERIALIZED_NAME_SUBURB = "suburb";
  @SerializedName(SERIALIZED_NAME_SUBURB)
  private String suburb;

  public static final String SERIALIZED_NAME_IS_PRIMARY = "isPrimary";
  @SerializedName(SERIALIZED_NAME_IS_PRIMARY)
  private Boolean isPrimary = false;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "customFields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Map<String, BusinessEntitiesCreateRequestCustomFieldsValue> customFields = null;

  public PeopleCreateRequestAddressesInner() {
  }

  public PeopleCreateRequestAddressesInner addressType(String addressType) {
    
    
    
    
    this.addressType = addressType;
    return this;
  }

   /**
   * Enum: &#x60;Home&#x60;, &#x60;Postal&#x60;. The type of address.
   * @return addressType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Enum: `Home`, `Postal`. The type of address.")

  public String getAddressType() {
    return addressType;
  }


  public void setAddressType(String addressType) {
    
    
    
    this.addressType = addressType;
  }


  public PeopleCreateRequestAddressesInner fullAddress(String fullAddress) {
    
    
    
    
    this.fullAddress = fullAddress;
    return this;
  }

   /**
   * The full readable address, minus the postcode and country.  This value will be resolved against Google maps api and will populate the state, suburb and street if a match is found.  You can override these results if you also pass the corresponding fields you wish to set.
   * @return fullAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The full readable address, minus the postcode and country.  This value will be resolved against Google maps api and will populate the state, suburb and street if a match is found.  You can override these results if you also pass the corresponding fields you wish to set.")

  public String getFullAddress() {
    return fullAddress;
  }


  public void setFullAddress(String fullAddress) {
    
    
    
    this.fullAddress = fullAddress;
  }


  public PeopleCreateRequestAddressesInner country(String country) {
    
    
    
    
    this.country = country;
    return this;
  }

   /**
   * The country the address is in.
   * @return country
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The country the address is in.")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    
    
    
    this.country = country;
  }


  public PeopleCreateRequestAddressesInner postcode(String postcode) {
    
    
    
    
    this.postcode = postcode;
    return this;
  }

   /**
   * The postcode of the address.
   * @return postcode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The postcode of the address.")

  public String getPostcode() {
    return postcode;
  }


  public void setPostcode(String postcode) {
    
    
    
    this.postcode = postcode;
  }


  public PeopleCreateRequestAddressesInner state(String state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * The state the address is in. This field is required if the fullAddress field is not provided.
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The state the address is in. This field is required if the fullAddress field is not provided.")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    
    
    
    this.state = state;
  }


  public PeopleCreateRequestAddressesInner street(String street) {
    
    
    
    
    this.street = street;
    return this;
  }

   /**
   * The street the address is on. This field is required if the fullAddress field is not provided.
   * @return street
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The street the address is on. This field is required if the fullAddress field is not provided.")

  public String getStreet() {
    return street;
  }


  public void setStreet(String street) {
    
    
    
    this.street = street;
  }


  public PeopleCreateRequestAddressesInner suburb(String suburb) {
    
    
    
    
    this.suburb = suburb;
    return this;
  }

   /**
   * The suburb the address is in. This field is required if the fullAddress field is not provided.
   * @return suburb
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The suburb the address is in. This field is required if the fullAddress field is not provided.")

  public String getSuburb() {
    return suburb;
  }


  public void setSuburb(String suburb) {
    
    
    
    this.suburb = suburb;
  }


  public PeopleCreateRequestAddressesInner isPrimary(Boolean isPrimary) {
    
    
    
    
    this.isPrimary = isPrimary;
    return this;
  }

   /**
   * Denotes whether this address is the primary. By default, the first address in the array                will be set as the primary if all addresses are set with isPrimary: false.
   * @return isPrimary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Denotes whether this address is the primary. By default, the first address in the array                will be set as the primary if all addresses are set with isPrimary: false.")

  public Boolean getIsPrimary() {
    return isPrimary;
  }


  public void setIsPrimary(Boolean isPrimary) {
    
    
    
    this.isPrimary = isPrimary;
  }


  public PeopleCreateRequestAddressesInner customFields(Map<String, BusinessEntitiesCreateRequestCustomFieldsValue> customFields) {
    
    
    
    
    this.customFields = customFields;
    return this;
  }

  public PeopleCreateRequestAddressesInner putCustomFieldsItem(String key, BusinessEntitiesCreateRequestCustomFieldsValue customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new HashMap<>();
    }
    this.customFields.put(key, customFieldsItem);
    return this;
  }

   /**
   * The custom field values for this address
   * @return customFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"text_field_api_name\":{\"value\":\"Some text value\"},\"numeric_field_api_name\":{\"value\":\"50\"},\"single_select_api_name\":{\"value\":{\"label\":\"Drama\"}},\"multi_select_api_name\":{\"value\":{\"labels\":[\"Bananas\",\"Apples\"]}},\"people_dropdown_api_name\":{\"value\":[{\"person\":{\"id\":\"8a5f3ea6-ea6b-4425-8a87-3c256bb7b6f9X\",\"name\":\"Bruce Wayne\",\"primaryEmailAddress\":\"bruce.wayne@example.com\",\"employeeNumber\":\"00001\",\"autoIncrementIntellihrId\":\"1000\"},\"job\":{\"id\":\"569904c8-5d36-4c2f-afb0-525eeb8da32dX\",\"name\":\"Maintenance worker\"}},{\"person\":{\"id\":\"313fde44-f24e-4ec9-9473-0d0f3527222dX\",\"name\":\"Batman\",\"primaryEmailAddress\":\"batman@example.com\",\"employeeNumber\":\"00002\",\"autoIncrementIntellihrId\":\"1001\"},\"job\":{\"id\":\"653304c8-5d36-4c2f-afb0-525eeb8da32dX\",\"name\":\"Janitor\"}}]}}", value = "The custom field values for this address")

  public Map<String, BusinessEntitiesCreateRequestCustomFieldsValue> getCustomFields() {
    return customFields;
  }


  public void setCustomFields(Map<String, BusinessEntitiesCreateRequestCustomFieldsValue> customFields) {
    
    
    
    this.customFields = customFields;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PeopleCreateRequestAddressesInner instance itself
   */
  public PeopleCreateRequestAddressesInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PeopleCreateRequestAddressesInner peopleCreateRequestAddressesInner = (PeopleCreateRequestAddressesInner) o;
    return Objects.equals(this.addressType, peopleCreateRequestAddressesInner.addressType) &&
        Objects.equals(this.fullAddress, peopleCreateRequestAddressesInner.fullAddress) &&
        Objects.equals(this.country, peopleCreateRequestAddressesInner.country) &&
        Objects.equals(this.postcode, peopleCreateRequestAddressesInner.postcode) &&
        Objects.equals(this.state, peopleCreateRequestAddressesInner.state) &&
        Objects.equals(this.street, peopleCreateRequestAddressesInner.street) &&
        Objects.equals(this.suburb, peopleCreateRequestAddressesInner.suburb) &&
        Objects.equals(this.isPrimary, peopleCreateRequestAddressesInner.isPrimary) &&
        Objects.equals(this.customFields, peopleCreateRequestAddressesInner.customFields)&&
        Objects.equals(this.additionalProperties, peopleCreateRequestAddressesInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressType, fullAddress, country, postcode, state, street, suburb, isPrimary, customFields, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PeopleCreateRequestAddressesInner {\n");
    sb.append("    addressType: ").append(toIndentedString(addressType)).append("\n");
    sb.append("    fullAddress: ").append(toIndentedString(fullAddress)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    postcode: ").append(toIndentedString(postcode)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    street: ").append(toIndentedString(street)).append("\n");
    sb.append("    suburb: ").append(toIndentedString(suburb)).append("\n");
    sb.append("    isPrimary: ").append(toIndentedString(isPrimary)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressType");
    openapiFields.add("fullAddress");
    openapiFields.add("country");
    openapiFields.add("postcode");
    openapiFields.add("state");
    openapiFields.add("street");
    openapiFields.add("suburb");
    openapiFields.add("isPrimary");
    openapiFields.add("customFields");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("addressType");
    openapiRequiredFields.add("country");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PeopleCreateRequestAddressesInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PeopleCreateRequestAddressesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PeopleCreateRequestAddressesInner is not found in the empty JSON string", PeopleCreateRequestAddressesInner.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PeopleCreateRequestAddressesInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("addressType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressType").toString()));
      }
      if ((jsonObj.get("fullAddress") != null && !jsonObj.get("fullAddress").isJsonNull()) && !jsonObj.get("fullAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullAddress").toString()));
      }
      if (!jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("postcode") != null && !jsonObj.get("postcode").isJsonNull()) && !jsonObj.get("postcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postcode").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("street") != null && !jsonObj.get("street").isJsonNull()) && !jsonObj.get("street").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street").toString()));
      }
      if ((jsonObj.get("suburb") != null && !jsonObj.get("suburb").isJsonNull()) && !jsonObj.get("suburb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suburb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suburb").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PeopleCreateRequestAddressesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PeopleCreateRequestAddressesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PeopleCreateRequestAddressesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PeopleCreateRequestAddressesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<PeopleCreateRequestAddressesInner>() {
           @Override
           public void write(JsonWriter out, PeopleCreateRequestAddressesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PeopleCreateRequestAddressesInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PeopleCreateRequestAddressesInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PeopleCreateRequestAddressesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PeopleCreateRequestAddressesInner
  * @throws IOException if the JSON string is invalid with respect to PeopleCreateRequestAddressesInner
  */
  public static PeopleCreateRequestAddressesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PeopleCreateRequestAddressesInner.class);
  }

 /**
  * Convert an instance of PeopleCreateRequestAddressesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

