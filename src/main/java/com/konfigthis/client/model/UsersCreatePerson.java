/*
 * intelliHR Public API
 * You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)
 *
 * The version of the OpenAPI document: V1
 * Contact: support@intellihr.co
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * [Person](https://developers.intellihr.io/docs/v1/) to whom this [User](https://developers.intellihr.io/docs/v1/) belongs. This [Person](https://developers.intellihr.io/docs/v1/) is specified as a search object, which will match the person who best fits the keys for this object.         Multiple keys can be used together to further narrow search results (for example, if there are multiple people with the same name, email address         can be used as well to limit to a single person. A validation error will be thrown if this search is unable to be narrowed to a single [Person](https://developers.intellihr.io/docs/v1/).
 */
@ApiModel(description = "[Person](https://developers.intellihr.io/docs/v1/) to whom this [User](https://developers.intellihr.io/docs/v1/) belongs. This [Person](https://developers.intellihr.io/docs/v1/) is specified as a search object, which will match the person who best fits the keys for this object.         Multiple keys can be used together to further narrow search results (for example, if there are multiple people with the same name, email address         can be used as well to limit to a single person. A validation error will be thrown if this search is unable to be narrowed to a single [Person](https://developers.intellihr.io/docs/v1/).")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class UsersCreatePerson {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRIMARY_EMAIL_ADDRESS = "primaryEmailAddress";
  @SerializedName(SERIALIZED_NAME_PRIMARY_EMAIL_ADDRESS)
  private String primaryEmailAddress;

  public static final String SERIALIZED_NAME_EMPLOYEE_NUMBER = "employeeNumber";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_NUMBER)
  private String employeeNumber;

  public static final String SERIALIZED_NAME_AUTO_INCREMENT_INTELLIHR_ID = "autoIncrementIntellihrId";
  @SerializedName(SERIALIZED_NAME_AUTO_INCREMENT_INTELLIHR_ID)
  private String autoIncrementIntellihrId;

  public UsersCreatePerson() {
  }

  public UsersCreatePerson id(String id) {
    
    
    if (id != null && id.length() < 36) {
      throw new IllegalArgumentException("Invalid value for id. Length must be greater than or equal to 36.");
    }
    
    this.id = id;
    return this;
  }

   /**
   * The identifier string for the [Person](https://developers.intellihr.io/docs/v1/) to locate in the system.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "8a5f3ea6-ea6b-4425-8a87-3c256bb7b6f9", value = "The identifier string for the [Person](https://developers.intellihr.io/docs/v1/) to locate in the system.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    if (id != null && id.length() < 36) {
      throw new IllegalArgumentException("Invalid value for id. Length must be greater than or equal to 36.");
    }
    this.id = id;
  }


  public UsersCreatePerson name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The name of the [Person](https://developers.intellihr.io/docs/v1/) in intelliHR to search for. Note that the search accounts for differences in name order automatically.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the [Person](https://developers.intellihr.io/docs/v1/) in intelliHR to search for. Note that the search accounts for differences in name order automatically.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public UsersCreatePerson primaryEmailAddress(String primaryEmailAddress) {
    
    
    
    
    this.primaryEmailAddress = primaryEmailAddress;
    return this;
  }

   /**
   * The email address flagged as primary for the [Person](https://developers.intellihr.io/docs/v1/) within the system.
   * @return primaryEmailAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The email address flagged as primary for the [Person](https://developers.intellihr.io/docs/v1/) within the system.")

  public String getPrimaryEmailAddress() {
    return primaryEmailAddress;
  }


  public void setPrimaryEmailAddress(String primaryEmailAddress) {
    
    
    
    this.primaryEmailAddress = primaryEmailAddress;
  }


  public UsersCreatePerson employeeNumber(String employeeNumber) {
    
    
    
    
    this.employeeNumber = employeeNumber;
    return this;
  }

   /**
   * A manually entered employee number that identifies a [Person](https://developers.intellihr.io/docs/v1/) in intelliHR. It may be hidden in the system&#39;s UI depending upon your tenant&#39;s configuration.
   * @return employeeNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A manually entered employee number that identifies a [Person](https://developers.intellihr.io/docs/v1/) in intelliHR. It may be hidden in the system's UI depending upon your tenant's configuration.")

  public String getEmployeeNumber() {
    return employeeNumber;
  }


  public void setEmployeeNumber(String employeeNumber) {
    
    
    
    this.employeeNumber = employeeNumber;
  }


  public UsersCreatePerson autoIncrementIntellihrId(String autoIncrementIntellihrId) {
    
    
    
    
    this.autoIncrementIntellihrId = autoIncrementIntellihrId;
    return this;
  }

   /**
   * An autogenerated number that uniquely identifies a [Person](https://developers.intellihr.io/docs/v1/) in intelliHR. It may be hidden in the system&#39;s UI depending upon your tenant&#39;s configuration.
   * @return autoIncrementIntellihrId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An autogenerated number that uniquely identifies a [Person](https://developers.intellihr.io/docs/v1/) in intelliHR. It may be hidden in the system's UI depending upon your tenant's configuration.")

  public String getAutoIncrementIntellihrId() {
    return autoIncrementIntellihrId;
  }


  public void setAutoIncrementIntellihrId(String autoIncrementIntellihrId) {
    
    
    
    this.autoIncrementIntellihrId = autoIncrementIntellihrId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UsersCreatePerson instance itself
   */
  public UsersCreatePerson putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsersCreatePerson usersCreatePerson = (UsersCreatePerson) o;
    return Objects.equals(this.id, usersCreatePerson.id) &&
        Objects.equals(this.name, usersCreatePerson.name) &&
        Objects.equals(this.primaryEmailAddress, usersCreatePerson.primaryEmailAddress) &&
        Objects.equals(this.employeeNumber, usersCreatePerson.employeeNumber) &&
        Objects.equals(this.autoIncrementIntellihrId, usersCreatePerson.autoIncrementIntellihrId)&&
        Objects.equals(this.additionalProperties, usersCreatePerson.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, primaryEmailAddress, employeeNumber, autoIncrementIntellihrId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsersCreatePerson {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    primaryEmailAddress: ").append(toIndentedString(primaryEmailAddress)).append("\n");
    sb.append("    employeeNumber: ").append(toIndentedString(employeeNumber)).append("\n");
    sb.append("    autoIncrementIntellihrId: ").append(toIndentedString(autoIncrementIntellihrId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("primaryEmailAddress");
    openapiFields.add("employeeNumber");
    openapiFields.add("autoIncrementIntellihrId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UsersCreatePerson
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UsersCreatePerson.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsersCreatePerson is not found in the empty JSON string", UsersCreatePerson.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("primaryEmailAddress") != null && !jsonObj.get("primaryEmailAddress").isJsonNull()) && !jsonObj.get("primaryEmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryEmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryEmailAddress").toString()));
      }
      if ((jsonObj.get("employeeNumber") != null && !jsonObj.get("employeeNumber").isJsonNull()) && !jsonObj.get("employeeNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeNumber").toString()));
      }
      if ((jsonObj.get("autoIncrementIntellihrId") != null && !jsonObj.get("autoIncrementIntellihrId").isJsonNull()) && !jsonObj.get("autoIncrementIntellihrId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoIncrementIntellihrId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoIncrementIntellihrId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsersCreatePerson.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsersCreatePerson' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsersCreatePerson> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsersCreatePerson.class));

       return (TypeAdapter<T>) new TypeAdapter<UsersCreatePerson>() {
           @Override
           public void write(JsonWriter out, UsersCreatePerson value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UsersCreatePerson read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             UsersCreatePerson instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UsersCreatePerson given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UsersCreatePerson
  * @throws IOException if the JSON string is invalid with respect to UsersCreatePerson
  */
  public static UsersCreatePerson fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsersCreatePerson.class);
  }

 /**
  * Convert an instance of UsersCreatePerson to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

