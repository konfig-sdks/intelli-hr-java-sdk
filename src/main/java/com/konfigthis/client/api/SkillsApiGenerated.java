/*
 * intelliHR Public API
 * You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)
 *
 * The version of the OpenAPI document: V1
 * Contact: support@intellihr.co
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Skills;
import com.konfigthis.client.model.SkillsCreateRequest;
import com.konfigthis.client.model.SkillsGetAllFiltersParameter;
import com.konfigthis.client.model.SkillsList;
import com.konfigthis.client.model.SkillsPatchRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SkillsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SkillsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SkillsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewSkillCall(SkillsCreateRequest skillsCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = skillsCreateRequest;

        // create path and map variables
        String localVarPath = "/skills";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewSkillValidateBeforeCall(SkillsCreateRequest skillsCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'skillsCreateRequest' is set
        if (skillsCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'skillsCreateRequest' when calling createNewSkill(Async)");
        }

        return createNewSkillCall(skillsCreateRequest, _callback);

    }


    private ApiResponse<Skills> createNewSkillWithHttpInfo(SkillsCreateRequest skillsCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewSkillValidateBeforeCall(skillsCreateRequest, null);
        Type localVarReturnType = new TypeToken<Skills>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewSkillAsync(SkillsCreateRequest skillsCreateRequest, final ApiCallback<Skills> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewSkillValidateBeforeCall(skillsCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<Skills>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewSkillRequestBuilder {
        private final String description;
        private final String name;
        private final Boolean isBusinessCritical;
        private final String skillDisciplineId;

        private CreateNewSkillRequestBuilder(String description, String name, Boolean isBusinessCritical, String skillDisciplineId) {
            this.description = description;
            this.name = name;
            this.isBusinessCritical = isBusinessCritical;
            this.skillDisciplineId = skillDisciplineId;
        }

        /**
         * Build call for createNewSkill
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SkillsCreateRequest skillsCreateRequest = buildBodyParams();
            return createNewSkillCall(skillsCreateRequest, _callback);
        }

        private SkillsCreateRequest buildBodyParams() {
            SkillsCreateRequest skillsCreateRequest = new SkillsCreateRequest();
            skillsCreateRequest.description(this.description);
            skillsCreateRequest.name(this.name);
            skillsCreateRequest.isBusinessCritical(this.isBusinessCritical);
            skillsCreateRequest.skillDisciplineId(this.skillDisciplineId);
            return skillsCreateRequest;
        }

        /**
         * Execute createNewSkill request
         * @return Skills
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Skills execute() throws ApiException {
            SkillsCreateRequest skillsCreateRequest = buildBodyParams();
            ApiResponse<Skills> localVarResp = createNewSkillWithHttpInfo(skillsCreateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewSkill request with HTTP info returned
         * @return ApiResponse&lt;Skills&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Skills> executeWithHttpInfo() throws ApiException {
            SkillsCreateRequest skillsCreateRequest = buildBodyParams();
            return createNewSkillWithHttpInfo(skillsCreateRequest);
        }

        /**
         * Execute createNewSkill request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Skills> _callback) throws ApiException {
            SkillsCreateRequest skillsCreateRequest = buildBodyParams();
            return createNewSkillAsync(skillsCreateRequest, _callback);
        }
    }

    /**
     * 
     * Create a new Skill
     * @param skillsCreateRequest  (required)
     * @return CreateNewSkillRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewSkillRequestBuilder createNewSkill(String description, String name, Boolean isBusinessCritical, String skillDisciplineId) throws IllegalArgumentException {
        if (description == null) throw new IllegalArgumentException("\"description\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (isBusinessCritical == null) throw new IllegalArgumentException("\"isBusinessCritical\" is required but got null");
        if (skillDisciplineId == null) throw new IllegalArgumentException("\"skillDisciplineId\" is required but got null");
            if (skillDisciplineId != null && skillDisciplineId.length() < 36) {
              throw new IllegalArgumentException("Invalid value for skillDisciplineId. Length must be greater than or equal to 36.");
            }

        return new CreateNewSkillRequestBuilder(description, name, isBusinessCritical, skillDisciplineId);
    }
    private okhttp3.Call findSkillByIdCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/skills/{id}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findSkillByIdValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return findSkillByIdCall(_callback);

    }


    private ApiResponse<Skills> findSkillByIdWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = findSkillByIdValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Skills>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findSkillByIdAsync(final ApiCallback<Skills> _callback) throws ApiException {

        okhttp3.Call localVarCall = findSkillByIdValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Skills>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindSkillByIdRequestBuilder {

        private FindSkillByIdRequestBuilder() {
        }

        /**
         * Build call for findSkillById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findSkillByIdCall(_callback);
        }


        /**
         * Execute findSkillById request
         * @return Skills
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Skills execute() throws ApiException {
            ApiResponse<Skills> localVarResp = findSkillByIdWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findSkillById request with HTTP info returned
         * @return ApiResponse&lt;Skills&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Skills> executeWithHttpInfo() throws ApiException {
            return findSkillByIdWithHttpInfo();
        }

        /**
         * Execute findSkillById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Skills> _callback) throws ApiException {
            return findSkillByIdAsync(_callback);
        }
    }

    /**
     * Find a Skill by ID
     * Returns a single [Skill](https://developers.intellihr.io/docs/v1/).
     * @return FindSkillByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FindSkillByIdRequestBuilder findSkillById() throws IllegalArgumentException {
        return new FindSkillByIdRequestBuilder();
    }
    private okhttp3.Call getAllCall(SkillsGetAllFiltersParameter filters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/skills";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(SkillsGetAllFiltersParameter filters, final ApiCallback _callback) throws ApiException {
        return getAllCall(filters, _callback);

    }


    private ApiResponse<SkillsList> getAllWithHttpInfo(SkillsGetAllFiltersParameter filters) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(filters, null);
        Type localVarReturnType = new TypeToken<SkillsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(SkillsGetAllFiltersParameter filters, final ApiCallback<SkillsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(filters, _callback);
        Type localVarReturnType = new TypeToken<SkillsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private SkillsGetAllFiltersParameter filters;

        private GetAllRequestBuilder() {
        }

        /**
         * Set filters
         * @param filters Filters can be applied in the query string to limit the data returned from this endpoint. Filters are provided in the format &#x60;filters[&lt;filter_name&gt;][&lt;operation_type&gt;]&#x3D;&lt;filter_value&gt;&#x60;.For example, a filter to get items matching a specific filter value would be &#x60;filters[isBusinessCritical][eq]&#x3D;true&#x60;  Below is a list of operation types available on filters, note that each filter may not support every type:  • Equality &#x60;[eq]&#x60;: Checks for an exact match with the given filter value  The list of supported filters is given below. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder filters(SkillsGetAllFiltersParameter filters) {
            this.filters = filters;
            return this;
        }
        
        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(filters, _callback);
        }


        /**
         * Execute getAll request
         * @return SkillsList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public SkillsList execute() throws ApiException {
            ApiResponse<SkillsList> localVarResp = getAllWithHttpInfo(filters);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;SkillsList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SkillsList> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(filters);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SkillsList> _callback) throws ApiException {
            return getAllAsync(filters, _callback);
        }
    }

    /**
     * List all Skills
     * Returns a list of all [Skills](https://developers.intellihr.io/docs/v1/).
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll() throws IllegalArgumentException {
        return new GetAllRequestBuilder();
    }
    private okhttp3.Call updateSkillByIdCall(SkillsPatchRequest skillsPatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = skillsPatchRequest;

        // create path and map variables
        String localVarPath = "/skills/{id}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSkillByIdValidateBeforeCall(SkillsPatchRequest skillsPatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'skillsPatchRequest' is set
        if (skillsPatchRequest == null) {
            throw new ApiException("Missing the required parameter 'skillsPatchRequest' when calling updateSkillById(Async)");
        }

        return updateSkillByIdCall(skillsPatchRequest, _callback);

    }


    private ApiResponse<Skills> updateSkillByIdWithHttpInfo(SkillsPatchRequest skillsPatchRequest) throws ApiException {
        okhttp3.Call localVarCall = updateSkillByIdValidateBeforeCall(skillsPatchRequest, null);
        Type localVarReturnType = new TypeToken<Skills>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSkillByIdAsync(SkillsPatchRequest skillsPatchRequest, final ApiCallback<Skills> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSkillByIdValidateBeforeCall(skillsPatchRequest, _callback);
        Type localVarReturnType = new TypeToken<Skills>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSkillByIdRequestBuilder {
        private String description;
        private String name;
        private Boolean isBusinessCritical;
        private String skillDisciplineId;

        private UpdateSkillByIdRequestBuilder() {
        }

        /**
         * Set description
         * @param description A description of the [Skill](https://developers.intellihr.io/docs/v1/). (optional)
         * @return UpdateSkillByIdRequestBuilder
         */
        public UpdateSkillByIdRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name User friendly name given to this [Skill](https://developers.intellihr.io/docs/v1/). (optional)
         * @return UpdateSkillByIdRequestBuilder
         */
        public UpdateSkillByIdRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set isBusinessCritical
         * @param isBusinessCritical Whether this [Skill](https://developers.intellihr.io/docs/v1/) is business critical. (optional)
         * @return UpdateSkillByIdRequestBuilder
         */
        public UpdateSkillByIdRequestBuilder isBusinessCritical(Boolean isBusinessCritical) {
            this.isBusinessCritical = isBusinessCritical;
            return this;
        }
        
        /**
         * Set skillDisciplineId
         * @param skillDisciplineId The identifier string for the [Skill Discipline](https://developers.intellihr.io/docs/v1/) to which this [Skill](https://developers.intellihr.io/docs/v1/) belongs. (optional)
         * @return UpdateSkillByIdRequestBuilder
         */
        public UpdateSkillByIdRequestBuilder skillDisciplineId(String skillDisciplineId) {
            this.skillDisciplineId = skillDisciplineId;
            return this;
        }
        
        /**
         * Build call for updateSkillById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SkillsPatchRequest skillsPatchRequest = buildBodyParams();
            return updateSkillByIdCall(skillsPatchRequest, _callback);
        }

        private SkillsPatchRequest buildBodyParams() {
            SkillsPatchRequest skillsPatchRequest = new SkillsPatchRequest();
            skillsPatchRequest.description(this.description);
            skillsPatchRequest.name(this.name);
            skillsPatchRequest.isBusinessCritical(this.isBusinessCritical);
            skillsPatchRequest.skillDisciplineId(this.skillDisciplineId);
            return skillsPatchRequest;
        }

        /**
         * Execute updateSkillById request
         * @return Skills
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Skills execute() throws ApiException {
            SkillsPatchRequest skillsPatchRequest = buildBodyParams();
            ApiResponse<Skills> localVarResp = updateSkillByIdWithHttpInfo(skillsPatchRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSkillById request with HTTP info returned
         * @return ApiResponse&lt;Skills&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Skills> executeWithHttpInfo() throws ApiException {
            SkillsPatchRequest skillsPatchRequest = buildBodyParams();
            return updateSkillByIdWithHttpInfo(skillsPatchRequest);
        }

        /**
         * Execute updateSkillById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Skills> _callback) throws ApiException {
            SkillsPatchRequest skillsPatchRequest = buildBodyParams();
            return updateSkillByIdAsync(skillsPatchRequest, _callback);
        }
    }

    /**
     * 
     * Update a Skill
     * @param skillsPatchRequest  (required)
     * @return UpdateSkillByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSkillByIdRequestBuilder updateSkillById() throws IllegalArgumentException {
        return new UpdateSkillByIdRequestBuilder();
    }
}
