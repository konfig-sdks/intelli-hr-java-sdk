/*
 * intelliHR Public API
 * You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)
 *
 * The version of the OpenAPI document: V1
 * Contact: support@intellihr.co
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.LeaveCreateRequest;
import com.konfigthis.client.model.LeaveCreateRequestLeaveType;
import com.konfigthis.client.model.LeaveCreateResponse;
import com.konfigthis.client.model.LeaveUpdateRequest;
import com.konfigthis.client.model.LeaveUpdateRequestLeaveType;
import com.konfigthis.client.model.LeaveUpdateResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ExtendedLeaveApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExtendedLeaveApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ExtendedLeaveApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewCall(LeaveCreateRequest leaveCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = leaveCreateRequest;

        // create path and map variables
        String localVarPath = "/extended-leave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewValidateBeforeCall(LeaveCreateRequest leaveCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'leaveCreateRequest' is set
        if (leaveCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'leaveCreateRequest' when calling createNew(Async)");
        }

        return createNewCall(leaveCreateRequest, _callback);

    }


    private ApiResponse<LeaveCreateResponse> createNewWithHttpInfo(LeaveCreateRequest leaveCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewValidateBeforeCall(leaveCreateRequest, null);
        Type localVarReturnType = new TypeToken<LeaveCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewAsync(LeaveCreateRequest leaveCreateRequest, final ApiCallback<LeaveCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewValidateBeforeCall(leaveCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<LeaveCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewRequestBuilder {
        private final String jobId;
        private final String startDate;
        private final String endDate;
        private final LeaveCreateRequestLeaveType leaveType;
        private String fte;

        private CreateNewRequestBuilder(String jobId, String startDate, String endDate, LeaveCreateRequestLeaveType leaveType) {
            this.jobId = jobId;
            this.startDate = startDate;
            this.endDate = endDate;
            this.leaveType = leaveType;
        }

        /**
         * Set fte
         * @param fte The full time equivalent for this [Job](https://developers.intellihr.io/docs/v1/) if changing during this leave period. (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder fte(String fte) {
            this.fte = fte;
            return this;
        }
        
        /**
         * Build call for createNew
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LeaveCreateRequest leaveCreateRequest = buildBodyParams();
            return createNewCall(leaveCreateRequest, _callback);
        }

        private LeaveCreateRequest buildBodyParams() {
            LeaveCreateRequest leaveCreateRequest = new LeaveCreateRequest();
            leaveCreateRequest.jobId(this.jobId);
            leaveCreateRequest.startDate(this.startDate);
            leaveCreateRequest.endDate(this.endDate);
            leaveCreateRequest.leaveType(this.leaveType);
            leaveCreateRequest.fte(this.fte);
            return leaveCreateRequest;
        }

        /**
         * Execute createNew request
         * @return LeaveCreateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public LeaveCreateResponse execute() throws ApiException {
            LeaveCreateRequest leaveCreateRequest = buildBodyParams();
            ApiResponse<LeaveCreateResponse> localVarResp = createNewWithHttpInfo(leaveCreateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNew request with HTTP info returned
         * @return ApiResponse&lt;LeaveCreateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LeaveCreateResponse> executeWithHttpInfo() throws ApiException {
            LeaveCreateRequest leaveCreateRequest = buildBodyParams();
            return createNewWithHttpInfo(leaveCreateRequest);
        }

        /**
         * Execute createNew request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LeaveCreateResponse> _callback) throws ApiException {
            LeaveCreateRequest leaveCreateRequest = buildBodyParams();
            return createNewAsync(leaveCreateRequest, _callback);
        }
    }

    /**
     * Create Extended Leave
     * Create a new Extended Leave on an existing Job.
     * @param leaveCreateRequest  (required)
     * @return CreateNewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewRequestBuilder createNew(String jobId, String startDate, String endDate, LeaveCreateRequestLeaveType leaveType) throws IllegalArgumentException {
        if (jobId == null) throw new IllegalArgumentException("\"jobId\" is required but got null");
            if (jobId != null && jobId.length() < 36) {
              throw new IllegalArgumentException("Invalid value for jobId. Length must be greater than or equal to 36.");
            }

        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
            

        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
            

        if (leaveType == null) throw new IllegalArgumentException("\"leaveType\" is required but got null");
        return new CreateNewRequestBuilder(jobId, startDate, endDate, leaveType);
    }
    private okhttp3.Call updateFinaliseCall(LeaveUpdateRequest leaveUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = leaveUpdateRequest;

        // create path and map variables
        String localVarPath = "/extended-leave/{id}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFinaliseValidateBeforeCall(LeaveUpdateRequest leaveUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'leaveUpdateRequest' is set
        if (leaveUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'leaveUpdateRequest' when calling updateFinalise(Async)");
        }

        return updateFinaliseCall(leaveUpdateRequest, _callback);

    }


    private ApiResponse<LeaveUpdateResponse> updateFinaliseWithHttpInfo(LeaveUpdateRequest leaveUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateFinaliseValidateBeforeCall(leaveUpdateRequest, null);
        Type localVarReturnType = new TypeToken<LeaveUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateFinaliseAsync(LeaveUpdateRequest leaveUpdateRequest, final ApiCallback<LeaveUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFinaliseValidateBeforeCall(leaveUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<LeaveUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateFinaliseRequestBuilder {
        private final String jobId;
        private final String endDate;
        private Boolean shouldNotFinaliseEndDate;
        private String startDate;
        private LeaveUpdateRequestLeaveType leaveType;
        private String fte;

        private UpdateFinaliseRequestBuilder(String jobId, String endDate) {
            this.jobId = jobId;
            this.endDate = endDate;
        }

        /**
         * Set shouldNotFinaliseEndDate
         * @param shouldNotFinaliseEndDate Whether or not to finalise the end date for the [Extended Leave](https://developers.intellihr.io/docs/v1/). This boolean will change the input variables required if you are finalising an Extended Leave or just updating it. Finalising the end date prevents any further changes to this Extended Leave. (optional, default to false)
         * @return UpdateFinaliseRequestBuilder
         */
        public UpdateFinaliseRequestBuilder shouldNotFinaliseEndDate(Boolean shouldNotFinaliseEndDate) {
            this.shouldNotFinaliseEndDate = shouldNotFinaliseEndDate;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate The date this [Extended Leave](https://developers.intellihr.io/docs/v1/) started or will start. This field is only required if not finalising the Extended Leave end date, and will not be used if shouldNotFinaliseEndDate is not set or is set to false. This date will follow the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.6).   YYYY-MM-DD date formatting is also supported, although by using this format the date will be stored as the start of day in UTC time, not the requesting tenants timezone. (optional)
         * @return UpdateFinaliseRequestBuilder
         */
        public UpdateFinaliseRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set leaveType
         * @param leaveType  (optional)
         * @return UpdateFinaliseRequestBuilder
         */
        public UpdateFinaliseRequestBuilder leaveType(LeaveUpdateRequestLeaveType leaveType) {
            this.leaveType = leaveType;
            return this;
        }
        
        /**
         * Set fte
         * @param fte The full time equivalent for this [Job](https://developers.intellihr.io/docs/v1/) upon returning from Extended Leave. This field is only required when finalising the Extended Leave end date, and will not be used if shouldNotFinaliseEndDate is set to true. (optional)
         * @return UpdateFinaliseRequestBuilder
         */
        public UpdateFinaliseRequestBuilder fte(String fte) {
            this.fte = fte;
            return this;
        }
        
        /**
         * Build call for updateFinalise
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LeaveUpdateRequest leaveUpdateRequest = buildBodyParams();
            return updateFinaliseCall(leaveUpdateRequest, _callback);
        }

        private LeaveUpdateRequest buildBodyParams() {
            LeaveUpdateRequest leaveUpdateRequest = new LeaveUpdateRequest();
            leaveUpdateRequest.jobId(this.jobId);
            leaveUpdateRequest.shouldNotFinaliseEndDate(this.shouldNotFinaliseEndDate);
            leaveUpdateRequest.startDate(this.startDate);
            leaveUpdateRequest.endDate(this.endDate);
            leaveUpdateRequest.leaveType(this.leaveType);
            leaveUpdateRequest.fte(this.fte);
            return leaveUpdateRequest;
        }

        /**
         * Execute updateFinalise request
         * @return LeaveUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public LeaveUpdateResponse execute() throws ApiException {
            LeaveUpdateRequest leaveUpdateRequest = buildBodyParams();
            ApiResponse<LeaveUpdateResponse> localVarResp = updateFinaliseWithHttpInfo(leaveUpdateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateFinalise request with HTTP info returned
         * @return ApiResponse&lt;LeaveUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LeaveUpdateResponse> executeWithHttpInfo() throws ApiException {
            LeaveUpdateRequest leaveUpdateRequest = buildBodyParams();
            return updateFinaliseWithHttpInfo(leaveUpdateRequest);
        }

        /**
         * Execute updateFinalise request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LeaveUpdateResponse> _callback) throws ApiException {
            LeaveUpdateRequest leaveUpdateRequest = buildBodyParams();
            return updateFinaliseAsync(leaveUpdateRequest, _callback);
        }
    }

    /**
     * Update or Finalise Extended Leave
     * Update or Finalise an existing Extended Leave.
     * @param leaveUpdateRequest  (required)
     * @return UpdateFinaliseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFinaliseRequestBuilder updateFinalise(String jobId, String endDate) throws IllegalArgumentException {
        if (jobId == null) throw new IllegalArgumentException("\"jobId\" is required but got null");
            if (jobId != null && jobId.length() < 36) {
              throw new IllegalArgumentException("Invalid value for jobId. Length must be greater than or equal to 36.");
            }

        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
            

        return new UpdateFinaliseRequestBuilder(jobId, endDate);
    }
}
