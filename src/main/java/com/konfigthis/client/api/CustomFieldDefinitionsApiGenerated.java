/*
 * intelliHR Public API
 * You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)
 *
 * The version of the OpenAPI document: V1
 * Contact: support@intellihr.co
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CustomFieldDefinitionCreateRequest;
import com.konfigthis.client.model.CustomFieldDefinitionPatchRequest;
import com.konfigthis.client.model.CustomFieldDefinitions;
import com.konfigthis.client.model.CustomFieldDefinitionsList;
import com.konfigthis.client.model.CustomFieldDefinitionsListAllFiltersParameter;
import com.konfigthis.client.model.OptionallyAddTextValidationOfTheCustomFieldDefinitionProperty;
import com.konfigthis.client.model.ThePeopleDropdownDefinitionOfTheCustomFieldDefinitionProperty;
import com.konfigthis.client.model.ThePeopleDropdownDefinitionOfTheCustomFieldDefinitionProperty1;
import com.konfigthis.client.model.TheSelectDefinitionOfTheCustomFieldDefinitionProperty;
import com.konfigthis.client.model.TheSelectDefinitionOfTheCustomFieldDefinitionProperty1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CustomFieldDefinitionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomFieldDefinitionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CustomFieldDefinitionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createDefinitionCall(CustomFieldDefinitionCreateRequest customFieldDefinitionCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customFieldDefinitionCreateRequest;

        // create path and map variables
        String localVarPath = "/custom-field-definitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDefinitionValidateBeforeCall(CustomFieldDefinitionCreateRequest customFieldDefinitionCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customFieldDefinitionCreateRequest' is set
        if (customFieldDefinitionCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'customFieldDefinitionCreateRequest' when calling createDefinition(Async)");
        }

        return createDefinitionCall(customFieldDefinitionCreateRequest, _callback);

    }


    private ApiResponse<CustomFieldDefinitions> createDefinitionWithHttpInfo(CustomFieldDefinitionCreateRequest customFieldDefinitionCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createDefinitionValidateBeforeCall(customFieldDefinitionCreateRequest, null);
        Type localVarReturnType = new TypeToken<CustomFieldDefinitions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createDefinitionAsync(CustomFieldDefinitionCreateRequest customFieldDefinitionCreateRequest, final ApiCallback<CustomFieldDefinitions> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDefinitionValidateBeforeCall(customFieldDefinitionCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldDefinitions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateDefinitionRequestBuilder {
        private final String name;
        private final String apiName;
        private final String modelType;
        private final String type;
        private Object description;
        private Boolean isSensitive;
        private TheSelectDefinitionOfTheCustomFieldDefinitionProperty selectDefinition;
        private OptionallyAddTextValidationOfTheCustomFieldDefinitionProperty textDefinition;
        private ThePeopleDropdownDefinitionOfTheCustomFieldDefinitionProperty peopleDropdownDefinition;

        private CreateDefinitionRequestBuilder(String name, String apiName, String modelType, String type) {
            this.name = name;
            this.apiName = apiName;
            this.modelType = modelType;
            this.type = type;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return CreateDefinitionRequestBuilder
         */
        public CreateDefinitionRequestBuilder description(Object description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set isSensitive
         * @param isSensitive Whether or not this [Custom Field Definition](https://developers.intellihr.io/docs/v1/) is marked as sensitive information. (optional)
         * @return CreateDefinitionRequestBuilder
         */
        public CreateDefinitionRequestBuilder isSensitive(Boolean isSensitive) {
            this.isSensitive = isSensitive;
            return this;
        }
        
        /**
         * Set selectDefinition
         * @param selectDefinition  (optional)
         * @return CreateDefinitionRequestBuilder
         */
        public CreateDefinitionRequestBuilder selectDefinition(TheSelectDefinitionOfTheCustomFieldDefinitionProperty selectDefinition) {
            this.selectDefinition = selectDefinition;
            return this;
        }
        
        /**
         * Set textDefinition
         * @param textDefinition  (optional)
         * @return CreateDefinitionRequestBuilder
         */
        public CreateDefinitionRequestBuilder textDefinition(OptionallyAddTextValidationOfTheCustomFieldDefinitionProperty textDefinition) {
            this.textDefinition = textDefinition;
            return this;
        }
        
        /**
         * Set peopleDropdownDefinition
         * @param peopleDropdownDefinition  (optional)
         * @return CreateDefinitionRequestBuilder
         */
        public CreateDefinitionRequestBuilder peopleDropdownDefinition(ThePeopleDropdownDefinitionOfTheCustomFieldDefinitionProperty peopleDropdownDefinition) {
            this.peopleDropdownDefinition = peopleDropdownDefinition;
            return this;
        }
        
        /**
         * Build call for createDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomFieldDefinitionCreateRequest customFieldDefinitionCreateRequest = buildBodyParams();
            return createDefinitionCall(customFieldDefinitionCreateRequest, _callback);
        }

        private CustomFieldDefinitionCreateRequest buildBodyParams() {
            CustomFieldDefinitionCreateRequest customFieldDefinitionCreateRequest = new CustomFieldDefinitionCreateRequest();
            customFieldDefinitionCreateRequest.description(this.description);
            customFieldDefinitionCreateRequest.name(this.name);
            customFieldDefinitionCreateRequest.apiName(this.apiName);
            customFieldDefinitionCreateRequest.modelType(this.modelType);
            customFieldDefinitionCreateRequest.type(this.type);
            customFieldDefinitionCreateRequest.isSensitive(this.isSensitive);
            customFieldDefinitionCreateRequest.selectDefinition(this.selectDefinition);
            customFieldDefinitionCreateRequest.textDefinition(this.textDefinition);
            customFieldDefinitionCreateRequest.peopleDropdownDefinition(this.peopleDropdownDefinition);
            return customFieldDefinitionCreateRequest;
        }

        /**
         * Execute createDefinition request
         * @return CustomFieldDefinitions
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CustomFieldDefinitions execute() throws ApiException {
            CustomFieldDefinitionCreateRequest customFieldDefinitionCreateRequest = buildBodyParams();
            ApiResponse<CustomFieldDefinitions> localVarResp = createDefinitionWithHttpInfo(customFieldDefinitionCreateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createDefinition request with HTTP info returned
         * @return ApiResponse&lt;CustomFieldDefinitions&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomFieldDefinitions> executeWithHttpInfo() throws ApiException {
            CustomFieldDefinitionCreateRequest customFieldDefinitionCreateRequest = buildBodyParams();
            return createDefinitionWithHttpInfo(customFieldDefinitionCreateRequest);
        }

        /**
         * Execute createDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomFieldDefinitions> _callback) throws ApiException {
            CustomFieldDefinitionCreateRequest customFieldDefinitionCreateRequest = buildBodyParams();
            return createDefinitionAsync(customFieldDefinitionCreateRequest, _callback);
        }
    }

    /**
     * Create a Custom Field Definition
     * Returns the created [Custom Field Definition](https://developers.intellihr.io/docs/v1/)
     * @param customFieldDefinitionCreateRequest  (required)
     * @return CreateDefinitionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateDefinitionRequestBuilder createDefinition(String name, String apiName, String modelType, String type) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (apiName == null) throw new IllegalArgumentException("\"apiName\" is required but got null");
            

        if (modelType == null) throw new IllegalArgumentException("\"modelType\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new CreateDefinitionRequestBuilder(name, apiName, modelType, type);
    }
    private okhttp3.Call deleteByIdCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/custom-field-definitions/{id}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByIdValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return deleteByIdCall(_callback);

    }


    private ApiResponse<Void> deleteByIdWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteByIdAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteByIdRequestBuilder {

        private DeleteByIdRequestBuilder() {
        }

        /**
         * Build call for deleteById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByIdCall(_callback);
        }


        /**
         * Execute deleteById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteByIdWithHttpInfo();
        }

        /**
         * Execute deleteById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteByIdWithHttpInfo();
        }

        /**
         * Execute deleteById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteByIdAsync(_callback);
        }
    }

    /**
     * Delete a Custom Field Definition by ID
     * Deletes the [Custom Field Definition](https://developers.intellihr.io/docs/v1/) by the given ID.
     * @return DeleteByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByIdRequestBuilder deleteById() throws IllegalArgumentException {
        return new DeleteByIdRequestBuilder();
    }
    private okhttp3.Call findDefinitionByIdCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/custom-field-definitions/{id}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findDefinitionByIdValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return findDefinitionByIdCall(_callback);

    }


    private ApiResponse<CustomFieldDefinitions> findDefinitionByIdWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = findDefinitionByIdValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CustomFieldDefinitions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findDefinitionByIdAsync(final ApiCallback<CustomFieldDefinitions> _callback) throws ApiException {

        okhttp3.Call localVarCall = findDefinitionByIdValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CustomFieldDefinitions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindDefinitionByIdRequestBuilder {

        private FindDefinitionByIdRequestBuilder() {
        }

        /**
         * Build call for findDefinitionById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findDefinitionByIdCall(_callback);
        }


        /**
         * Execute findDefinitionById request
         * @return CustomFieldDefinitions
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CustomFieldDefinitions execute() throws ApiException {
            ApiResponse<CustomFieldDefinitions> localVarResp = findDefinitionByIdWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findDefinitionById request with HTTP info returned
         * @return ApiResponse&lt;CustomFieldDefinitions&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomFieldDefinitions> executeWithHttpInfo() throws ApiException {
            return findDefinitionByIdWithHttpInfo();
        }

        /**
         * Execute findDefinitionById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomFieldDefinitions> _callback) throws ApiException {
            return findDefinitionByIdAsync(_callback);
        }
    }

    /**
     * Find a Custom Field Definition by ID
     * Returns a single Custom Field Definition.
     * @return FindDefinitionByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FindDefinitionByIdRequestBuilder findDefinitionById() throws IllegalArgumentException {
        return new FindDefinitionByIdRequestBuilder();
    }
    private okhttp3.Call listAllCall(CustomFieldDefinitionsListAllFiltersParameter filters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/custom-field-definitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllValidateBeforeCall(CustomFieldDefinitionsListAllFiltersParameter filters, final ApiCallback _callback) throws ApiException {
        return listAllCall(filters, _callback);

    }


    private ApiResponse<CustomFieldDefinitionsList> listAllWithHttpInfo(CustomFieldDefinitionsListAllFiltersParameter filters) throws ApiException {
        okhttp3.Call localVarCall = listAllValidateBeforeCall(filters, null);
        Type localVarReturnType = new TypeToken<CustomFieldDefinitionsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAsync(CustomFieldDefinitionsListAllFiltersParameter filters, final ApiCallback<CustomFieldDefinitionsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllValidateBeforeCall(filters, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldDefinitionsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllRequestBuilder {
        private CustomFieldDefinitionsListAllFiltersParameter filters;

        private ListAllRequestBuilder() {
        }

        /**
         * Set filters
         * @param filters Filters can be applied in the query string to limit the data returned from this endpoint. Filters are provided in the format &#x60;filters[&lt;filter_name&gt;][&lt;operation_type&gt;]&#x3D;&lt;filter_value&gt;&#x60;.For example, a filter to get items matching a specific filter value would be &#x60;filters[modelType][eq]&#x3D;TRAINING&#x60;  Below is a list of operation types available on filters, note that each filter may not support every type:  • Equality &#x60;[eq]&#x60;: Checks for an exact match with the given filter value  The list of supported filters is given below. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder filters(CustomFieldDefinitionsListAllFiltersParameter filters) {
            this.filters = filters;
            return this;
        }
        
        /**
         * Build call for listAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCall(filters, _callback);
        }


        /**
         * Execute listAll request
         * @return CustomFieldDefinitionsList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CustomFieldDefinitionsList execute() throws ApiException {
            ApiResponse<CustomFieldDefinitionsList> localVarResp = listAllWithHttpInfo(filters);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAll request with HTTP info returned
         * @return ApiResponse&lt;CustomFieldDefinitionsList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomFieldDefinitionsList> executeWithHttpInfo() throws ApiException {
            return listAllWithHttpInfo(filters);
        }

        /**
         * Execute listAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomFieldDefinitionsList> _callback) throws ApiException {
            return listAllAsync(filters, _callback);
        }
    }

    /**
     * List all Custom Field Definitions
     * Returns a list of all Custom Field Definitions.
     * @return ListAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListAllRequestBuilder listAll() throws IllegalArgumentException {
        return new ListAllRequestBuilder();
    }
    private okhttp3.Call updateDefinitionByIdCall(CustomFieldDefinitionPatchRequest customFieldDefinitionPatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customFieldDefinitionPatchRequest;

        // create path and map variables
        String localVarPath = "/custom-field-definitions/{id}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDefinitionByIdValidateBeforeCall(CustomFieldDefinitionPatchRequest customFieldDefinitionPatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customFieldDefinitionPatchRequest' is set
        if (customFieldDefinitionPatchRequest == null) {
            throw new ApiException("Missing the required parameter 'customFieldDefinitionPatchRequest' when calling updateDefinitionById(Async)");
        }

        return updateDefinitionByIdCall(customFieldDefinitionPatchRequest, _callback);

    }


    private ApiResponse<CustomFieldDefinitions> updateDefinitionByIdWithHttpInfo(CustomFieldDefinitionPatchRequest customFieldDefinitionPatchRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDefinitionByIdValidateBeforeCall(customFieldDefinitionPatchRequest, null);
        Type localVarReturnType = new TypeToken<CustomFieldDefinitions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDefinitionByIdAsync(CustomFieldDefinitionPatchRequest customFieldDefinitionPatchRequest, final ApiCallback<CustomFieldDefinitions> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDefinitionByIdValidateBeforeCall(customFieldDefinitionPatchRequest, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldDefinitions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDefinitionByIdRequestBuilder {
        private Object description;
        private String name;
        private Boolean isEnabled;
        private Boolean isSensitive;
        private TheSelectDefinitionOfTheCustomFieldDefinitionProperty1 selectDefinition;
        private ThePeopleDropdownDefinitionOfTheCustomFieldDefinitionProperty1 peopleDropdownDefinition;

        private UpdateDefinitionByIdRequestBuilder() {
        }

        /**
         * Set description
         * @param description  (optional)
         * @return UpdateDefinitionByIdRequestBuilder
         */
        public UpdateDefinitionByIdRequestBuilder description(Object description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name Name given to this [Custom Field Definition](https://developers.intellihr.io/docs/v1/). This name would normally be shown to users of the system. (optional)
         * @return UpdateDefinitionByIdRequestBuilder
         */
        public UpdateDefinitionByIdRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set isEnabled
         * @param isEnabled Whether or not this [Custom Field Definition](https://developers.intellihr.io/docs/v1/) is enabled to be used. (optional)
         * @return UpdateDefinitionByIdRequestBuilder
         */
        public UpdateDefinitionByIdRequestBuilder isEnabled(Boolean isEnabled) {
            this.isEnabled = isEnabled;
            return this;
        }
        
        /**
         * Set isSensitive
         * @param isSensitive Whether or not this [Custom Field Definition](https://developers.intellihr.io/docs/v1/) is marked as sensitive information. (optional)
         * @return UpdateDefinitionByIdRequestBuilder
         */
        public UpdateDefinitionByIdRequestBuilder isSensitive(Boolean isSensitive) {
            this.isSensitive = isSensitive;
            return this;
        }
        
        /**
         * Set selectDefinition
         * @param selectDefinition  (optional)
         * @return UpdateDefinitionByIdRequestBuilder
         */
        public UpdateDefinitionByIdRequestBuilder selectDefinition(TheSelectDefinitionOfTheCustomFieldDefinitionProperty1 selectDefinition) {
            this.selectDefinition = selectDefinition;
            return this;
        }
        
        /**
         * Set peopleDropdownDefinition
         * @param peopleDropdownDefinition  (optional)
         * @return UpdateDefinitionByIdRequestBuilder
         */
        public UpdateDefinitionByIdRequestBuilder peopleDropdownDefinition(ThePeopleDropdownDefinitionOfTheCustomFieldDefinitionProperty1 peopleDropdownDefinition) {
            this.peopleDropdownDefinition = peopleDropdownDefinition;
            return this;
        }
        
        /**
         * Build call for updateDefinitionById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomFieldDefinitionPatchRequest customFieldDefinitionPatchRequest = buildBodyParams();
            return updateDefinitionByIdCall(customFieldDefinitionPatchRequest, _callback);
        }

        private CustomFieldDefinitionPatchRequest buildBodyParams() {
            CustomFieldDefinitionPatchRequest customFieldDefinitionPatchRequest = new CustomFieldDefinitionPatchRequest();
            customFieldDefinitionPatchRequest.description(this.description);
            customFieldDefinitionPatchRequest.name(this.name);
            customFieldDefinitionPatchRequest.isEnabled(this.isEnabled);
            customFieldDefinitionPatchRequest.isSensitive(this.isSensitive);
            customFieldDefinitionPatchRequest.selectDefinition(this.selectDefinition);
            customFieldDefinitionPatchRequest.peopleDropdownDefinition(this.peopleDropdownDefinition);
            return customFieldDefinitionPatchRequest;
        }

        /**
         * Execute updateDefinitionById request
         * @return CustomFieldDefinitions
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CustomFieldDefinitions execute() throws ApiException {
            CustomFieldDefinitionPatchRequest customFieldDefinitionPatchRequest = buildBodyParams();
            ApiResponse<CustomFieldDefinitions> localVarResp = updateDefinitionByIdWithHttpInfo(customFieldDefinitionPatchRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateDefinitionById request with HTTP info returned
         * @return ApiResponse&lt;CustomFieldDefinitions&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomFieldDefinitions> executeWithHttpInfo() throws ApiException {
            CustomFieldDefinitionPatchRequest customFieldDefinitionPatchRequest = buildBodyParams();
            return updateDefinitionByIdWithHttpInfo(customFieldDefinitionPatchRequest);
        }

        /**
         * Execute updateDefinitionById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomFieldDefinitions> _callback) throws ApiException {
            CustomFieldDefinitionPatchRequest customFieldDefinitionPatchRequest = buildBodyParams();
            return updateDefinitionByIdAsync(customFieldDefinitionPatchRequest, _callback);
        }
    }

    /**
     * Update a Custom Field Definition
     * Returns the updated [Custom Field Definition](https://developers.intellihr.io/docs/v1/)
     * @param customFieldDefinitionPatchRequest  (required)
     * @return UpdateDefinitionByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDefinitionByIdRequestBuilder updateDefinitionById() throws IllegalArgumentException {
        return new UpdateDefinitionByIdRequestBuilder();
    }
}
