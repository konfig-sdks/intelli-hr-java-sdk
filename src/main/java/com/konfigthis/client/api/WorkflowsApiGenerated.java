/*
 * intelliHR Public API
 * You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)
 *
 * The version of the OpenAPI document: V1
 * Contact: support@intellihr.co
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.WorkflowsPatchRequest;
import com.konfigthis.client.model.WorkflowsPatchRequestWorkflowFormDesignsInner;
import com.konfigthis.client.model.WorkflowsPatchResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WorkflowsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkflowsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WorkflowsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call triggerByIdCall(String id, WorkflowsPatchRequest workflowsPatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workflowsPatchRequest;

        // create path and map variables
        String localVarPath = "/workflows/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call triggerByIdValidateBeforeCall(String id, WorkflowsPatchRequest workflowsPatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling triggerById(Async)");
        }

        // verify the required parameter 'workflowsPatchRequest' is set
        if (workflowsPatchRequest == null) {
            throw new ApiException("Missing the required parameter 'workflowsPatchRequest' when calling triggerById(Async)");
        }

        return triggerByIdCall(id, workflowsPatchRequest, _callback);

    }


    private ApiResponse<WorkflowsPatchResponse> triggerByIdWithHttpInfo(String id, WorkflowsPatchRequest workflowsPatchRequest) throws ApiException {
        okhttp3.Call localVarCall = triggerByIdValidateBeforeCall(id, workflowsPatchRequest, null);
        Type localVarReturnType = new TypeToken<WorkflowsPatchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call triggerByIdAsync(String id, WorkflowsPatchRequest workflowsPatchRequest, final ApiCallback<WorkflowsPatchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = triggerByIdValidateBeforeCall(id, workflowsPatchRequest, _callback);
        Type localVarReturnType = new TypeToken<WorkflowsPatchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TriggerByIdRequestBuilder {
        private final String jobId;
        private final List<WorkflowsPatchRequestWorkflowFormDesignsInner> workflowFormDesigns;
        private final String id;

        private TriggerByIdRequestBuilder(String jobId, List<WorkflowsPatchRequestWorkflowFormDesignsInner> workflowFormDesigns, String id) {
            this.jobId = jobId;
            this.workflowFormDesigns = workflowFormDesigns;
            this.id = id;
        }

        /**
         * Build call for triggerById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkflowsPatchRequest workflowsPatchRequest = buildBodyParams();
            return triggerByIdCall(id, workflowsPatchRequest, _callback);
        }

        private WorkflowsPatchRequest buildBodyParams() {
            WorkflowsPatchRequest workflowsPatchRequest = new WorkflowsPatchRequest();
            workflowsPatchRequest.jobId(this.jobId);
            workflowsPatchRequest.workflowFormDesigns(this.workflowFormDesigns);
            return workflowsPatchRequest;
        }

        /**
         * Execute triggerById request
         * @return WorkflowsPatchResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowsPatchResponse execute() throws ApiException {
            WorkflowsPatchRequest workflowsPatchRequest = buildBodyParams();
            ApiResponse<WorkflowsPatchResponse> localVarResp = triggerByIdWithHttpInfo(id, workflowsPatchRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute triggerById request with HTTP info returned
         * @return ApiResponse&lt;WorkflowsPatchResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowsPatchResponse> executeWithHttpInfo() throws ApiException {
            WorkflowsPatchRequest workflowsPatchRequest = buildBodyParams();
            return triggerByIdWithHttpInfo(id, workflowsPatchRequest);
        }

        /**
         * Execute triggerById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowsPatchResponse> _callback) throws ApiException {
            WorkflowsPatchRequest workflowsPatchRequest = buildBodyParams();
            return triggerByIdAsync(id, workflowsPatchRequest, _callback);
        }
    }

    /**
     * Trigger a Workflow by ID
     * Trigger a Workflow and related Workflow Form Designs.   This endpoint supports Workflows that are linked to Job onboarding, offboarding, role change and extended leave.  Currently the recipient and email address type for the individual forms will be automatically set based on the Respondent Type on the Form Design.  Form Designs with a Respondent Type of &#x60;Supervisor&#x60; for a job with no supervisor currently are not supported as no default option can be selected.
     * @param id The id of the Workflow to trigger. (required)
     * @param workflowsPatchRequest  (required)
     * @return TriggerByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public TriggerByIdRequestBuilder triggerById(String jobId, List<WorkflowsPatchRequestWorkflowFormDesignsInner> workflowFormDesigns, String id) throws IllegalArgumentException {
        if (jobId == null) throw new IllegalArgumentException("\"jobId\" is required but got null");
            if (jobId != null && jobId.length() < 36) {
              throw new IllegalArgumentException("Invalid value for jobId. Length must be greater than or equal to 36.");
            }

        if (workflowFormDesigns == null) throw new IllegalArgumentException("\"workflowFormDesigns\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            if (id != null && id.length() < 36) {
              throw new IllegalArgumentException("Invalid value for id. Length must be greater than or equal to 36.");
            }

        return new TriggerByIdRequestBuilder(jobId, workflowFormDesigns, id);
    }
}
