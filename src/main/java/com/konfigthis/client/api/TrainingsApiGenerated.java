/*
 * intelliHR Public API
 * You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)
 *
 * The version of the OpenAPI document: V1
 * Contact: support@intellihr.co
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BusinessEntitiesCreateRequestCustomFieldsValue;
import com.konfigthis.client.model.BusinessEntitiesPatchRequestCustomFieldsValue;
import com.konfigthis.client.model.Trainings;
import com.konfigthis.client.model.TrainingsCreateRequest;
import com.konfigthis.client.model.TrainingsCreateRequestCoordinatorPerson;
import com.konfigthis.client.model.TrainingsCreateRequestJob;
import com.konfigthis.client.model.TrainingsCreateRequestPerson;
import com.konfigthis.client.model.TrainingsCreateRequestProvider;
import com.konfigthis.client.model.TrainingsCreateRequestStatus;
import com.konfigthis.client.model.TrainingsCreateRequestType;
import com.konfigthis.client.model.TrainingsList;
import com.konfigthis.client.model.TrainingsListAllFiltersParameter;
import com.konfigthis.client.model.TrainingsPatchRequest;
import com.konfigthis.client.model.TrainingsPatchRequestCoordinatorPerson;
import com.konfigthis.client.model.TrainingsPatchRequestJob;
import com.konfigthis.client.model.TrainingsPatchRequestPerson;
import com.konfigthis.client.model.TrainingsPatchRequestProvider;
import com.konfigthis.client.model.TrainingsPatchRequestStatus;
import com.konfigthis.client.model.TrainingsPatchRequestType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TrainingsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TrainingsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TrainingsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewTrainingCall(TrainingsCreateRequest trainingsCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = trainingsCreateRequest;

        // create path and map variables
        String localVarPath = "/trainings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewTrainingValidateBeforeCall(TrainingsCreateRequest trainingsCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trainingsCreateRequest' is set
        if (trainingsCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'trainingsCreateRequest' when calling createNewTraining(Async)");
        }

        return createNewTrainingCall(trainingsCreateRequest, _callback);

    }


    private ApiResponse<Trainings> createNewTrainingWithHttpInfo(TrainingsCreateRequest trainingsCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewTrainingValidateBeforeCall(trainingsCreateRequest, null);
        Type localVarReturnType = new TypeToken<Trainings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewTrainingAsync(TrainingsCreateRequest trainingsCreateRequest, final ApiCallback<Trainings> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewTrainingValidateBeforeCall(trainingsCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<Trainings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewTrainingRequestBuilder {
        private final String name;
        private final TrainingsCreateRequestPerson person;
        private TrainingsCreateRequestCoordinatorPerson coordinatorPerson;
        private String completionDate;
        private String cost;
        private String currency;
        private String hours;
        private TrainingsCreateRequestJob job;
        private TrainingsCreateRequestProvider provider;
        private TrainingsCreateRequestType type;
        private Map<String, BusinessEntitiesCreateRequestCustomFieldsValue> customFields;
        private TrainingsCreateRequestStatus status;

        private CreateNewTrainingRequestBuilder(String name, TrainingsCreateRequestPerson person) {
            this.name = name;
            this.person = person;
        }

        /**
         * Set coordinatorPerson
         * @param coordinatorPerson  (optional)
         * @return CreateNewTrainingRequestBuilder
         */
        public CreateNewTrainingRequestBuilder coordinatorPerson(TrainingsCreateRequestCoordinatorPerson coordinatorPerson) {
            this.coordinatorPerson = coordinatorPerson;
            return this;
        }
        
        /**
         * Set completionDate
         * @param completionDate The timestamp the [Training](https://developers.intellihr.io/docs/v1/) was completed. This date will follow the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.6).   YYYY-MM-DD date formatting is also supported, although by using this format the date will be stored as the start of day in UTC time, not the requesting tenants timezone. (optional)
         * @return CreateNewTrainingRequestBuilder
         */
        public CreateNewTrainingRequestBuilder completionDate(String completionDate) {
            this.completionDate = completionDate;
            return this;
        }
        
        /**
         * Set cost
         * @param cost The cost of this [Training](https://developers.intellihr.io/docs/v1/). (optional)
         * @return CreateNewTrainingRequestBuilder
         */
        public CreateNewTrainingRequestBuilder cost(String cost) {
            this.cost = cost;
            return this;
        }
        
        /**
         * Set currency
         * @param currency The currency used for this [Training](https://developers.intellihr.io/docs/v1/). Will default to the tenant default currency when not provided. An international currency code. Typically AUD for Australian dollar, USD for American dollar etc. See [Official list of codes](https://www.iban.com/currency-codes). (optional)
         * @return CreateNewTrainingRequestBuilder
         */
        public CreateNewTrainingRequestBuilder currency(String currency) {
            this.currency = currency;
            return this;
        }
        
        /**
         * Set hours
         * @param hours How many hours were spent on this [Training](https://developers.intellihr.io/docs/v1/) (optional)
         * @return CreateNewTrainingRequestBuilder
         */
        public CreateNewTrainingRequestBuilder hours(String hours) {
            this.hours = hours;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return CreateNewTrainingRequestBuilder
         */
        public CreateNewTrainingRequestBuilder job(TrainingsCreateRequestJob job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set provider
         * @param provider  (optional)
         * @return CreateNewTrainingRequestBuilder
         */
        public CreateNewTrainingRequestBuilder provider(TrainingsCreateRequestProvider provider) {
            this.provider = provider;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return CreateNewTrainingRequestBuilder
         */
        public CreateNewTrainingRequestBuilder type(TrainingsCreateRequestType type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set customFields
         * @param customFields The custom field values for this [Training](https://developers.intellihr.io/docs/v1/) (optional)
         * @return CreateNewTrainingRequestBuilder
         */
        public CreateNewTrainingRequestBuilder customFields(Map<String, BusinessEntitiesCreateRequestCustomFieldsValue> customFields) {
            this.customFields = customFields;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return CreateNewTrainingRequestBuilder
         */
        public CreateNewTrainingRequestBuilder status(TrainingsCreateRequestStatus status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for createNewTraining
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TrainingsCreateRequest trainingsCreateRequest = buildBodyParams();
            return createNewTrainingCall(trainingsCreateRequest, _callback);
        }

        private TrainingsCreateRequest buildBodyParams() {
            TrainingsCreateRequest trainingsCreateRequest = new TrainingsCreateRequest();
            trainingsCreateRequest.coordinatorPerson(this.coordinatorPerson);
            trainingsCreateRequest.completionDate(this.completionDate);
            trainingsCreateRequest.cost(this.cost);
            trainingsCreateRequest.currency(this.currency);
            trainingsCreateRequest.hours(this.hours);
            trainingsCreateRequest.job(this.job);
            trainingsCreateRequest.name(this.name);
            trainingsCreateRequest.person(this.person);
            trainingsCreateRequest.provider(this.provider);
            trainingsCreateRequest.type(this.type);
            trainingsCreateRequest.customFields(this.customFields);
            trainingsCreateRequest.status(this.status);
            return trainingsCreateRequest;
        }

        /**
         * Execute createNewTraining request
         * @return Trainings
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Trainings execute() throws ApiException {
            TrainingsCreateRequest trainingsCreateRequest = buildBodyParams();
            ApiResponse<Trainings> localVarResp = createNewTrainingWithHttpInfo(trainingsCreateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewTraining request with HTTP info returned
         * @return ApiResponse&lt;Trainings&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Trainings> executeWithHttpInfo() throws ApiException {
            TrainingsCreateRequest trainingsCreateRequest = buildBodyParams();
            return createNewTrainingWithHttpInfo(trainingsCreateRequest);
        }

        /**
         * Execute createNewTraining request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Trainings> _callback) throws ApiException {
            TrainingsCreateRequest trainingsCreateRequest = buildBodyParams();
            return createNewTrainingAsync(trainingsCreateRequest, _callback);
        }
    }

    /**
     * 
     * Create a new Training
     * @param trainingsCreateRequest  (required)
     * @return CreateNewTrainingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewTrainingRequestBuilder createNewTraining(String name, TrainingsCreateRequestPerson person) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (person == null) throw new IllegalArgumentException("\"person\" is required but got null");
        return new CreateNewTrainingRequestBuilder(name, person);
    }
    private okhttp3.Call deleteByIdCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/trainings/{id}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByIdValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return deleteByIdCall(_callback);

    }


    private ApiResponse<Void> deleteByIdWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteByIdAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteByIdRequestBuilder {

        private DeleteByIdRequestBuilder() {
        }

        /**
         * Build call for deleteById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByIdCall(_callback);
        }


        /**
         * Execute deleteById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteByIdWithHttpInfo();
        }

        /**
         * Execute deleteById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteByIdWithHttpInfo();
        }

        /**
         * Execute deleteById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteByIdAsync(_callback);
        }
    }

    /**
     * Delete a Training by ID
     * Deletes the provided [Training](https://developers.intellihr.io/docs/v1/) record.
     * @return DeleteByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByIdRequestBuilder deleteById() throws IllegalArgumentException {
        return new DeleteByIdRequestBuilder();
    }
    private okhttp3.Call findTrainingByIdCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/trainings/{id}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findTrainingByIdValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return findTrainingByIdCall(_callback);

    }


    private ApiResponse<Trainings> findTrainingByIdWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = findTrainingByIdValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Trainings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findTrainingByIdAsync(final ApiCallback<Trainings> _callback) throws ApiException {

        okhttp3.Call localVarCall = findTrainingByIdValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Trainings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindTrainingByIdRequestBuilder {

        private FindTrainingByIdRequestBuilder() {
        }

        /**
         * Build call for findTrainingById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findTrainingByIdCall(_callback);
        }


        /**
         * Execute findTrainingById request
         * @return Trainings
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Trainings execute() throws ApiException {
            ApiResponse<Trainings> localVarResp = findTrainingByIdWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findTrainingById request with HTTP info returned
         * @return ApiResponse&lt;Trainings&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Trainings> executeWithHttpInfo() throws ApiException {
            return findTrainingByIdWithHttpInfo();
        }

        /**
         * Execute findTrainingById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Trainings> _callback) throws ApiException {
            return findTrainingByIdAsync(_callback);
        }
    }

    /**
     * Find a Training by ID
     * Returns a single [Training](https://developers.intellihr.io/docs/v1/).
     * @return FindTrainingByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FindTrainingByIdRequestBuilder findTrainingById() throws IllegalArgumentException {
        return new FindTrainingByIdRequestBuilder();
    }
    private okhttp3.Call listAllCall(TrainingsListAllFiltersParameter filters, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/trainings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllValidateBeforeCall(TrainingsListAllFiltersParameter filters, String sort, final ApiCallback _callback) throws ApiException {
        return listAllCall(filters, sort, _callback);

    }


    private ApiResponse<TrainingsList> listAllWithHttpInfo(TrainingsListAllFiltersParameter filters, String sort) throws ApiException {
        okhttp3.Call localVarCall = listAllValidateBeforeCall(filters, sort, null);
        Type localVarReturnType = new TypeToken<TrainingsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAsync(TrainingsListAllFiltersParameter filters, String sort, final ApiCallback<TrainingsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllValidateBeforeCall(filters, sort, _callback);
        Type localVarReturnType = new TypeToken<TrainingsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllRequestBuilder {
        private TrainingsListAllFiltersParameter filters;
        private String sort;

        private ListAllRequestBuilder() {
        }

        /**
         * Set filters
         * @param filters Filters can be applied in the query string to limit the data returned from this endpoint. Filters are provided in the format &#x60;filters[&lt;filter_name&gt;][&lt;operation_type&gt;]&#x3D;&lt;filter_value&gt;&#x60;.For example, a filter to get items matching a specific filter value would be &#x60;filters[name][eq]&#x3D;Accounting%20Compliance%20101&#x60;  Below is a list of operation types available on filters, note that each filter may not support every type:  • Equality &#x60;[eq]&#x60;: Checks for an exact match with the given filter value  The list of supported filters is given below. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder filters(TrainingsListAllFiltersParameter filters) {
            this.filters = filters;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sorting can be applied in the query string to order the data returned from this endpoint. Sort can be prepended with a minus to return the data in descending (-) order. For example, a sort to get the most recent records first would be &#x60;-createdAt&#x60;. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for listAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCall(filters, sort, _callback);
        }


        /**
         * Execute listAll request
         * @return TrainingsList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public TrainingsList execute() throws ApiException {
            ApiResponse<TrainingsList> localVarResp = listAllWithHttpInfo(filters, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAll request with HTTP info returned
         * @return ApiResponse&lt;TrainingsList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TrainingsList> executeWithHttpInfo() throws ApiException {
            return listAllWithHttpInfo(filters, sort);
        }

        /**
         * Execute listAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TrainingsList> _callback) throws ApiException {
            return listAllAsync(filters, sort, _callback);
        }
    }

    /**
     * List all Trainings
     * Returns a list of all [Trainings](https://developers.intellihr.io/docs/v1/).
     * @return ListAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListAllRequestBuilder listAll() throws IllegalArgumentException {
        return new ListAllRequestBuilder();
    }
    private okhttp3.Call updateTrainingByIdCall(TrainingsPatchRequest trainingsPatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = trainingsPatchRequest;

        // create path and map variables
        String localVarPath = "/trainings/{id}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTrainingByIdValidateBeforeCall(TrainingsPatchRequest trainingsPatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trainingsPatchRequest' is set
        if (trainingsPatchRequest == null) {
            throw new ApiException("Missing the required parameter 'trainingsPatchRequest' when calling updateTrainingById(Async)");
        }

        return updateTrainingByIdCall(trainingsPatchRequest, _callback);

    }


    private ApiResponse<Trainings> updateTrainingByIdWithHttpInfo(TrainingsPatchRequest trainingsPatchRequest) throws ApiException {
        okhttp3.Call localVarCall = updateTrainingByIdValidateBeforeCall(trainingsPatchRequest, null);
        Type localVarReturnType = new TypeToken<Trainings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTrainingByIdAsync(TrainingsPatchRequest trainingsPatchRequest, final ApiCallback<Trainings> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTrainingByIdValidateBeforeCall(trainingsPatchRequest, _callback);
        Type localVarReturnType = new TypeToken<Trainings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTrainingByIdRequestBuilder {
        private TrainingsPatchRequestCoordinatorPerson coordinatorPerson;
        private String completionDate;
        private String cost;
        private String currency;
        private String hours;
        private TrainingsPatchRequestJob job;
        private String name;
        private TrainingsPatchRequestPerson person;
        private TrainingsPatchRequestProvider provider;
        private TrainingsPatchRequestType type;
        private Map<String, BusinessEntitiesPatchRequestCustomFieldsValue> customFields;
        private TrainingsPatchRequestStatus status;

        private UpdateTrainingByIdRequestBuilder() {
        }

        /**
         * Set coordinatorPerson
         * @param coordinatorPerson  (optional)
         * @return UpdateTrainingByIdRequestBuilder
         */
        public UpdateTrainingByIdRequestBuilder coordinatorPerson(TrainingsPatchRequestCoordinatorPerson coordinatorPerson) {
            this.coordinatorPerson = coordinatorPerson;
            return this;
        }
        
        /**
         * Set completionDate
         * @param completionDate The timestamp the [Training](https://developers.intellihr.io/docs/v1/) was completed. This date will follow the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.6).   YYYY-MM-DD date formatting is also supported, although by using this format the date will be stored as the start of day in UTC time, not the requesting tenants timezone. (optional)
         * @return UpdateTrainingByIdRequestBuilder
         */
        public UpdateTrainingByIdRequestBuilder completionDate(String completionDate) {
            this.completionDate = completionDate;
            return this;
        }
        
        /**
         * Set cost
         * @param cost The cost of this [Training](https://developers.intellihr.io/docs/v1/). (optional)
         * @return UpdateTrainingByIdRequestBuilder
         */
        public UpdateTrainingByIdRequestBuilder cost(String cost) {
            this.cost = cost;
            return this;
        }
        
        /**
         * Set currency
         * @param currency The currency used for this [Training](https://developers.intellihr.io/docs/v1/). Will default to the tenant default currency when not provided. An international currency code. Typically AUD for Australian dollar, USD for American dollar etc. See [Official list of codes](https://www.iban.com/currency-codes). (optional)
         * @return UpdateTrainingByIdRequestBuilder
         */
        public UpdateTrainingByIdRequestBuilder currency(String currency) {
            this.currency = currency;
            return this;
        }
        
        /**
         * Set hours
         * @param hours How many hours were spent on this [Training](https://developers.intellihr.io/docs/v1/) (optional)
         * @return UpdateTrainingByIdRequestBuilder
         */
        public UpdateTrainingByIdRequestBuilder hours(String hours) {
            this.hours = hours;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return UpdateTrainingByIdRequestBuilder
         */
        public UpdateTrainingByIdRequestBuilder job(TrainingsPatchRequestJob job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set name
         * @param name User friendly name given to this [Training](https://developers.intellihr.io/docs/v1/) to identify it in the system. (optional)
         * @return UpdateTrainingByIdRequestBuilder
         */
        public UpdateTrainingByIdRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set person
         * @param person  (optional)
         * @return UpdateTrainingByIdRequestBuilder
         */
        public UpdateTrainingByIdRequestBuilder person(TrainingsPatchRequestPerson person) {
            this.person = person;
            return this;
        }
        
        /**
         * Set provider
         * @param provider  (optional)
         * @return UpdateTrainingByIdRequestBuilder
         */
        public UpdateTrainingByIdRequestBuilder provider(TrainingsPatchRequestProvider provider) {
            this.provider = provider;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return UpdateTrainingByIdRequestBuilder
         */
        public UpdateTrainingByIdRequestBuilder type(TrainingsPatchRequestType type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set customFields
         * @param customFields The custom field values for this [Training](https://developers.intellihr.io/docs/v1/) (optional)
         * @return UpdateTrainingByIdRequestBuilder
         */
        public UpdateTrainingByIdRequestBuilder customFields(Map<String, BusinessEntitiesPatchRequestCustomFieldsValue> customFields) {
            this.customFields = customFields;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return UpdateTrainingByIdRequestBuilder
         */
        public UpdateTrainingByIdRequestBuilder status(TrainingsPatchRequestStatus status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for updateTrainingById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TrainingsPatchRequest trainingsPatchRequest = buildBodyParams();
            return updateTrainingByIdCall(trainingsPatchRequest, _callback);
        }

        private TrainingsPatchRequest buildBodyParams() {
            TrainingsPatchRequest trainingsPatchRequest = new TrainingsPatchRequest();
            trainingsPatchRequest.coordinatorPerson(this.coordinatorPerson);
            trainingsPatchRequest.completionDate(this.completionDate);
            trainingsPatchRequest.cost(this.cost);
            trainingsPatchRequest.currency(this.currency);
            trainingsPatchRequest.hours(this.hours);
            trainingsPatchRequest.job(this.job);
            trainingsPatchRequest.name(this.name);
            trainingsPatchRequest.person(this.person);
            trainingsPatchRequest.provider(this.provider);
            trainingsPatchRequest.type(this.type);
            trainingsPatchRequest.customFields(this.customFields);
            trainingsPatchRequest.status(this.status);
            return trainingsPatchRequest;
        }

        /**
         * Execute updateTrainingById request
         * @return Trainings
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Trainings execute() throws ApiException {
            TrainingsPatchRequest trainingsPatchRequest = buildBodyParams();
            ApiResponse<Trainings> localVarResp = updateTrainingByIdWithHttpInfo(trainingsPatchRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateTrainingById request with HTTP info returned
         * @return ApiResponse&lt;Trainings&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Trainings> executeWithHttpInfo() throws ApiException {
            TrainingsPatchRequest trainingsPatchRequest = buildBodyParams();
            return updateTrainingByIdWithHttpInfo(trainingsPatchRequest);
        }

        /**
         * Execute updateTrainingById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Trainings> _callback) throws ApiException {
            TrainingsPatchRequest trainingsPatchRequest = buildBodyParams();
            return updateTrainingByIdAsync(trainingsPatchRequest, _callback);
        }
    }

    /**
     * 
     * Update a Training
     * @param trainingsPatchRequest  (required)
     * @return UpdateTrainingByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTrainingByIdRequestBuilder updateTrainingById() throws IllegalArgumentException {
        return new UpdateTrainingByIdRequestBuilder();
    }
}
