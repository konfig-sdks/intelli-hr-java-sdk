/*
 * intelliHR Public API
 * You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)
 *
 * The version of the OpenAPI document: V1
 * Contact: support@intellihr.co
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PositionTitles;
import com.konfigthis.client.model.PositionTitlesCreateRequest;
import com.konfigthis.client.model.PositionTitlesList;
import com.konfigthis.client.model.PositionTitlesListAllFiltersParameter;
import com.konfigthis.client.model.PositionTitlesPatchRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PositionTitlesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PositionTitlesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PositionTitlesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewRecordCall(PositionTitlesCreateRequest positionTitlesCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = positionTitlesCreateRequest;

        // create path and map variables
        String localVarPath = "/position-titles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewRecordValidateBeforeCall(PositionTitlesCreateRequest positionTitlesCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'positionTitlesCreateRequest' is set
        if (positionTitlesCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'positionTitlesCreateRequest' when calling createNewRecord(Async)");
        }

        return createNewRecordCall(positionTitlesCreateRequest, _callback);

    }


    private ApiResponse<PositionTitles> createNewRecordWithHttpInfo(PositionTitlesCreateRequest positionTitlesCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewRecordValidateBeforeCall(positionTitlesCreateRequest, null);
        Type localVarReturnType = new TypeToken<PositionTitles>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewRecordAsync(PositionTitlesCreateRequest positionTitlesCreateRequest, final ApiCallback<PositionTitles> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewRecordValidateBeforeCall(positionTitlesCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<PositionTitles>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewRecordRequestBuilder {
        private final String name;
        private Object code;

        private CreateNewRecordRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set code
         * @param code Code given to this [Position Title](https://developers.intellihr.io/docs/v1/). (optional)
         * @return CreateNewRecordRequestBuilder
         */
        public CreateNewRecordRequestBuilder code(Object code) {
            this.code = code;
            return this;
        }
        
        /**
         * Build call for createNewRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PositionTitlesCreateRequest positionTitlesCreateRequest = buildBodyParams();
            return createNewRecordCall(positionTitlesCreateRequest, _callback);
        }

        private PositionTitlesCreateRequest buildBodyParams() {
            PositionTitlesCreateRequest positionTitlesCreateRequest = new PositionTitlesCreateRequest();
            positionTitlesCreateRequest.name(this.name);
            positionTitlesCreateRequest.code(this.code);
            return positionTitlesCreateRequest;
        }

        /**
         * Execute createNewRecord request
         * @return PositionTitles
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public PositionTitles execute() throws ApiException {
            PositionTitlesCreateRequest positionTitlesCreateRequest = buildBodyParams();
            ApiResponse<PositionTitles> localVarResp = createNewRecordWithHttpInfo(positionTitlesCreateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewRecord request with HTTP info returned
         * @return ApiResponse&lt;PositionTitles&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PositionTitles> executeWithHttpInfo() throws ApiException {
            PositionTitlesCreateRequest positionTitlesCreateRequest = buildBodyParams();
            return createNewRecordWithHttpInfo(positionTitlesCreateRequest);
        }

        /**
         * Execute createNewRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PositionTitles> _callback) throws ApiException {
            PositionTitlesCreateRequest positionTitlesCreateRequest = buildBodyParams();
            return createNewRecordAsync(positionTitlesCreateRequest, _callback);
        }
    }

    /**
     * Create a new Position Title
     * Create a new [Position Title](https://developers.intellihr.io/docs/v1/) record with the provided data.
     * @param positionTitlesCreateRequest  (required)
     * @return CreateNewRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewRecordRequestBuilder createNewRecord(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateNewRecordRequestBuilder(name);
    }
    private okhttp3.Call deleteByIdCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/position-titles/{id}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByIdValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return deleteByIdCall(_callback);

    }


    private ApiResponse<Void> deleteByIdWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteByIdAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteByIdRequestBuilder {

        private DeleteByIdRequestBuilder() {
        }

        /**
         * Build call for deleteById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByIdCall(_callback);
        }


        /**
         * Execute deleteById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteByIdWithHttpInfo();
        }

        /**
         * Execute deleteById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteByIdWithHttpInfo();
        }

        /**
         * Execute deleteById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteByIdAsync(_callback);
        }
    }

    /**
     * Delete a Position Title by ID
     * Deletes the [Position Titles](https://developers.intellihr.io/docs/v1/) by the given ID.
     * @return DeleteByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByIdRequestBuilder deleteById() throws IllegalArgumentException {
        return new DeleteByIdRequestBuilder();
    }
    private okhttp3.Call listAllCall(PositionTitlesListAllFiltersParameter filters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/position-titles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllValidateBeforeCall(PositionTitlesListAllFiltersParameter filters, final ApiCallback _callback) throws ApiException {
        return listAllCall(filters, _callback);

    }


    private ApiResponse<PositionTitlesList> listAllWithHttpInfo(PositionTitlesListAllFiltersParameter filters) throws ApiException {
        okhttp3.Call localVarCall = listAllValidateBeforeCall(filters, null);
        Type localVarReturnType = new TypeToken<PositionTitlesList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAsync(PositionTitlesListAllFiltersParameter filters, final ApiCallback<PositionTitlesList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllValidateBeforeCall(filters, _callback);
        Type localVarReturnType = new TypeToken<PositionTitlesList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllRequestBuilder {
        private PositionTitlesListAllFiltersParameter filters;

        private ListAllRequestBuilder() {
        }

        /**
         * Set filters
         * @param filters Filters can be applied in the query string to limit the data returned from this endpoint. Filters are provided in the format &#x60;filters[&lt;filter_name&gt;][&lt;operation_type&gt;]&#x3D;&lt;filter_value&gt;&#x60;.For example, a filter to get items matching a specific filter value would be &#x60;filters[name][eq]&#x3D;Engineering Manager&#x60;  Below is a list of operation types available on filters, note that each filter may not support every type:  • Equality &#x60;[eq]&#x60;: Checks for an exact match with the given filter value  The list of supported filters is given below. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder filters(PositionTitlesListAllFiltersParameter filters) {
            this.filters = filters;
            return this;
        }
        
        /**
         * Build call for listAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCall(filters, _callback);
        }


        /**
         * Execute listAll request
         * @return PositionTitlesList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public PositionTitlesList execute() throws ApiException {
            ApiResponse<PositionTitlesList> localVarResp = listAllWithHttpInfo(filters);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAll request with HTTP info returned
         * @return ApiResponse&lt;PositionTitlesList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PositionTitlesList> executeWithHttpInfo() throws ApiException {
            return listAllWithHttpInfo(filters);
        }

        /**
         * Execute listAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PositionTitlesList> _callback) throws ApiException {
            return listAllAsync(filters, _callback);
        }
    }

    /**
     * List all position titles
     * Returns a list of all [Position Titles](https://developers.intellihr.io/docs/v1/) recorded in the system.
     * @return ListAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListAllRequestBuilder listAll() throws IllegalArgumentException {
        return new ListAllRequestBuilder();
    }
    private okhttp3.Call updateAttributesCall(PositionTitlesPatchRequest positionTitlesPatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = positionTitlesPatchRequest;

        // create path and map variables
        String localVarPath = "/position-titles/{id}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAttributesValidateBeforeCall(PositionTitlesPatchRequest positionTitlesPatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'positionTitlesPatchRequest' is set
        if (positionTitlesPatchRequest == null) {
            throw new ApiException("Missing the required parameter 'positionTitlesPatchRequest' when calling updateAttributes(Async)");
        }

        return updateAttributesCall(positionTitlesPatchRequest, _callback);

    }


    private ApiResponse<PositionTitles> updateAttributesWithHttpInfo(PositionTitlesPatchRequest positionTitlesPatchRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAttributesValidateBeforeCall(positionTitlesPatchRequest, null);
        Type localVarReturnType = new TypeToken<PositionTitles>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAttributesAsync(PositionTitlesPatchRequest positionTitlesPatchRequest, final ApiCallback<PositionTitles> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAttributesValidateBeforeCall(positionTitlesPatchRequest, _callback);
        Type localVarReturnType = new TypeToken<PositionTitles>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateAttributesRequestBuilder {
        private String name;
        private Object code;
        private Boolean isEnabled;

        private UpdateAttributesRequestBuilder() {
        }

        /**
         * Set name
         * @param name Name given to this [Position Title](https://developers.intellihr.io/docs/v1/). This name would normally be shown to users of the system. (optional)
         * @return UpdateAttributesRequestBuilder
         */
        public UpdateAttributesRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set code
         * @param code Code given to this [Position Title](https://developers.intellihr.io/docs/v1/). (optional)
         * @return UpdateAttributesRequestBuilder
         */
        public UpdateAttributesRequestBuilder code(Object code) {
            this.code = code;
            return this;
        }
        
        /**
         * Set isEnabled
         * @param isEnabled Specifies whether users can select this [Position Title](https://developers.intellihr.io/docs/v1/) in dropdowns. (optional)
         * @return UpdateAttributesRequestBuilder
         */
        public UpdateAttributesRequestBuilder isEnabled(Boolean isEnabled) {
            this.isEnabled = isEnabled;
            return this;
        }
        
        /**
         * Build call for updateAttributes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PositionTitlesPatchRequest positionTitlesPatchRequest = buildBodyParams();
            return updateAttributesCall(positionTitlesPatchRequest, _callback);
        }

        private PositionTitlesPatchRequest buildBodyParams() {
            PositionTitlesPatchRequest positionTitlesPatchRequest = new PositionTitlesPatchRequest();
            positionTitlesPatchRequest.name(this.name);
            positionTitlesPatchRequest.code(this.code);
            positionTitlesPatchRequest.isEnabled(this.isEnabled);
            return positionTitlesPatchRequest;
        }

        /**
         * Execute updateAttributes request
         * @return PositionTitles
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public PositionTitles execute() throws ApiException {
            PositionTitlesPatchRequest positionTitlesPatchRequest = buildBodyParams();
            ApiResponse<PositionTitles> localVarResp = updateAttributesWithHttpInfo(positionTitlesPatchRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateAttributes request with HTTP info returned
         * @return ApiResponse&lt;PositionTitles&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PositionTitles> executeWithHttpInfo() throws ApiException {
            PositionTitlesPatchRequest positionTitlesPatchRequest = buildBodyParams();
            return updateAttributesWithHttpInfo(positionTitlesPatchRequest);
        }

        /**
         * Execute updateAttributes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PositionTitles> _callback) throws ApiException {
            PositionTitlesPatchRequest positionTitlesPatchRequest = buildBodyParams();
            return updateAttributesAsync(positionTitlesPatchRequest, _callback);
        }
    }

    /**
     * Patch an existing Position Title
     * Patch attributes of an existing [Position Titles](https://developers.intellihr.io/docs/v1/) record with the provided data.
     * @param positionTitlesPatchRequest  (required)
     * @return UpdateAttributesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAttributesRequestBuilder updateAttributes() throws IllegalArgumentException {
        return new UpdateAttributesRequestBuilder();
    }
}
