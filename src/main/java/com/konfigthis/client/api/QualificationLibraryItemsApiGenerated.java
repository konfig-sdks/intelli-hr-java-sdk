/*
 * intelliHR Public API
 * You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)
 *
 * The version of the OpenAPI document: V1
 * Contact: support@intellihr.co
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.QualificationLibraryItems;
import com.konfigthis.client.model.QualificationLibraryItemsCreateRequest;
import com.konfigthis.client.model.QualificationLibraryItemsList;
import com.konfigthis.client.model.QualificationLibraryItemsPatchRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class QualificationLibraryItemsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public QualificationLibraryItemsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public QualificationLibraryItemsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewRecordCall(QualificationLibraryItemsCreateRequest qualificationLibraryItemsCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = qualificationLibraryItemsCreateRequest;

        // create path and map variables
        String localVarPath = "/qualification-library-items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewRecordValidateBeforeCall(QualificationLibraryItemsCreateRequest qualificationLibraryItemsCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qualificationLibraryItemsCreateRequest' is set
        if (qualificationLibraryItemsCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'qualificationLibraryItemsCreateRequest' when calling createNewRecord(Async)");
        }

        return createNewRecordCall(qualificationLibraryItemsCreateRequest, _callback);

    }


    private ApiResponse<QualificationLibraryItems> createNewRecordWithHttpInfo(QualificationLibraryItemsCreateRequest qualificationLibraryItemsCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewRecordValidateBeforeCall(qualificationLibraryItemsCreateRequest, null);
        Type localVarReturnType = new TypeToken<QualificationLibraryItems>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewRecordAsync(QualificationLibraryItemsCreateRequest qualificationLibraryItemsCreateRequest, final ApiCallback<QualificationLibraryItems> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewRecordValidateBeforeCall(qualificationLibraryItemsCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<QualificationLibraryItems>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewRecordRequestBuilder {
        private final String name;
        private final String qualificationTypeId;
        private final String qualificationExpiryType;
        private final String qualificationRegistrationNumberVisibilityType;
        private final String qualificationAttachmentRequirementType;
        private Double expiryWarningPeriod;
        private Boolean sendExpiryWarning;

        private CreateNewRecordRequestBuilder(String name, String qualificationTypeId, String qualificationExpiryType, String qualificationRegistrationNumberVisibilityType, String qualificationAttachmentRequirementType) {
            this.name = name;
            this.qualificationTypeId = qualificationTypeId;
            this.qualificationExpiryType = qualificationExpiryType;
            this.qualificationRegistrationNumberVisibilityType = qualificationRegistrationNumberVisibilityType;
            this.qualificationAttachmentRequirementType = qualificationAttachmentRequirementType;
        }

        /**
         * Set expiryWarningPeriod
         * @param expiryWarningPeriod Period in days, that there is a warning before the expiry of the qualification. If qualificationExpiryType is set to EXPIRY_INAPPLICABLE, this value will be ignored. (optional)
         * @return CreateNewRecordRequestBuilder
         */
        public CreateNewRecordRequestBuilder expiryWarningPeriod(Double expiryWarningPeriod) {
            this.expiryWarningPeriod = expiryWarningPeriod;
            return this;
        }
        
        /**
         * Set sendExpiryWarning
         * @param sendExpiryWarning If this [Qualification Library Item](https://developers.intellihr.io/docs/v1/) will send expiry warning/s using the periods defined. If qualificationExpiryType is set to EXPIRY_INAPPLICABLE, this value will be ignored. (optional)
         * @return CreateNewRecordRequestBuilder
         */
        public CreateNewRecordRequestBuilder sendExpiryWarning(Boolean sendExpiryWarning) {
            this.sendExpiryWarning = sendExpiryWarning;
            return this;
        }
        
        /**
         * Build call for createNewRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            QualificationLibraryItemsCreateRequest qualificationLibraryItemsCreateRequest = buildBodyParams();
            return createNewRecordCall(qualificationLibraryItemsCreateRequest, _callback);
        }

        private QualificationLibraryItemsCreateRequest buildBodyParams() {
            QualificationLibraryItemsCreateRequest qualificationLibraryItemsCreateRequest = new QualificationLibraryItemsCreateRequest();
            qualificationLibraryItemsCreateRequest.name(this.name);
            qualificationLibraryItemsCreateRequest.qualificationTypeId(this.qualificationTypeId);
            if (this.qualificationExpiryType != null)
            qualificationLibraryItemsCreateRequest.qualificationExpiryType(QualificationLibraryItemsCreateRequest.QualificationExpiryTypeEnum.fromValue(this.qualificationExpiryType));
            if (this.qualificationRegistrationNumberVisibilityType != null)
            qualificationLibraryItemsCreateRequest.qualificationRegistrationNumberVisibilityType(QualificationLibraryItemsCreateRequest.QualificationRegistrationNumberVisibilityTypeEnum.fromValue(this.qualificationRegistrationNumberVisibilityType));
            if (this.qualificationAttachmentRequirementType != null)
            qualificationLibraryItemsCreateRequest.qualificationAttachmentRequirementType(QualificationLibraryItemsCreateRequest.QualificationAttachmentRequirementTypeEnum.fromValue(this.qualificationAttachmentRequirementType));
            qualificationLibraryItemsCreateRequest.expiryWarningPeriod(this.expiryWarningPeriod);
            qualificationLibraryItemsCreateRequest.sendExpiryWarning(this.sendExpiryWarning);
            return qualificationLibraryItemsCreateRequest;
        }

        /**
         * Execute createNewRecord request
         * @return QualificationLibraryItems
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public QualificationLibraryItems execute() throws ApiException {
            QualificationLibraryItemsCreateRequest qualificationLibraryItemsCreateRequest = buildBodyParams();
            ApiResponse<QualificationLibraryItems> localVarResp = createNewRecordWithHttpInfo(qualificationLibraryItemsCreateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewRecord request with HTTP info returned
         * @return ApiResponse&lt;QualificationLibraryItems&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<QualificationLibraryItems> executeWithHttpInfo() throws ApiException {
            QualificationLibraryItemsCreateRequest qualificationLibraryItemsCreateRequest = buildBodyParams();
            return createNewRecordWithHttpInfo(qualificationLibraryItemsCreateRequest);
        }

        /**
         * Execute createNewRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<QualificationLibraryItems> _callback) throws ApiException {
            QualificationLibraryItemsCreateRequest qualificationLibraryItemsCreateRequest = buildBodyParams();
            return createNewRecordAsync(qualificationLibraryItemsCreateRequest, _callback);
        }
    }

    /**
     * Create a new Qualification Library Item
     * Create a new [Qualification Library Item](https://developers.intellihr.io/docs/v1/) record with the provided data.
     * @param qualificationLibraryItemsCreateRequest  (required)
     * @return CreateNewRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewRecordRequestBuilder createNewRecord(String name, String qualificationTypeId, String qualificationExpiryType, String qualificationRegistrationNumberVisibilityType, String qualificationAttachmentRequirementType) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (qualificationTypeId == null) throw new IllegalArgumentException("\"qualificationTypeId\" is required but got null");
            if (qualificationTypeId != null && qualificationTypeId.length() < 36) {
              throw new IllegalArgumentException("Invalid value for qualificationTypeId. Length must be greater than or equal to 36.");
            }

        if (qualificationExpiryType == null) throw new IllegalArgumentException("\"qualificationExpiryType\" is required but got null");
            

        if (qualificationRegistrationNumberVisibilityType == null) throw new IllegalArgumentException("\"qualificationRegistrationNumberVisibilityType\" is required but got null");
            

        if (qualificationAttachmentRequirementType == null) throw new IllegalArgumentException("\"qualificationAttachmentRequirementType\" is required but got null");
            

        return new CreateNewRecordRequestBuilder(name, qualificationTypeId, qualificationExpiryType, qualificationRegistrationNumberVisibilityType, qualificationAttachmentRequirementType);
    }
    private okhttp3.Call deleteByIdCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/qualification-library-items/{id}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByIdValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return deleteByIdCall(_callback);

    }


    private ApiResponse<Void> deleteByIdWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteByIdAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteByIdRequestBuilder {

        private DeleteByIdRequestBuilder() {
        }

        /**
         * Build call for deleteById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByIdCall(_callback);
        }


        /**
         * Execute deleteById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteByIdWithHttpInfo();
        }

        /**
         * Execute deleteById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteByIdWithHttpInfo();
        }

        /**
         * Execute deleteById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteByIdAsync(_callback);
        }
    }

    /**
     * Delete a Qualification Library Item by ID
     * Deletes the [Qualification Library Items](https://developers.intellihr.io/docs/v1/) by the given ID.
     * @return DeleteByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByIdRequestBuilder deleteById() throws IllegalArgumentException {
        return new DeleteByIdRequestBuilder();
    }
    private okhttp3.Call findByIDCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/qualification-library-items/{id}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findByIDValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return findByIDCall(_callback);

    }


    private ApiResponse<QualificationLibraryItemsList> findByIDWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = findByIDValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<QualificationLibraryItemsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findByIDAsync(final ApiCallback<QualificationLibraryItemsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = findByIDValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<QualificationLibraryItemsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindByIDRequestBuilder {

        private FindByIDRequestBuilder() {
        }

        /**
         * Build call for findByID
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findByIDCall(_callback);
        }


        /**
         * Execute findByID request
         * @return QualificationLibraryItemsList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public QualificationLibraryItemsList execute() throws ApiException {
            ApiResponse<QualificationLibraryItemsList> localVarResp = findByIDWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findByID request with HTTP info returned
         * @return ApiResponse&lt;QualificationLibraryItemsList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<QualificationLibraryItemsList> executeWithHttpInfo() throws ApiException {
            return findByIDWithHttpInfo();
        }

        /**
         * Execute findByID request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<QualificationLibraryItemsList> _callback) throws ApiException {
            return findByIDAsync(_callback);
        }
    }

    /**
     * Find a Qualification Library Item by ID
     * Returns a single [Qualification Library Item](https://developers.intellihr.io/docs/v1/) by its identifier.
     * @return FindByIDRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FindByIDRequestBuilder findByID() throws IllegalArgumentException {
        return new FindByIDRequestBuilder();
    }
    private okhttp3.Call getAllQualificationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/qualification-library-items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllQualificationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllQualificationsCall(_callback);

    }


    private ApiResponse<QualificationLibraryItems> getAllQualificationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllQualificationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<QualificationLibraryItems>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllQualificationsAsync(final ApiCallback<QualificationLibraryItems> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllQualificationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<QualificationLibraryItems>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllQualificationsRequestBuilder {

        private GetAllQualificationsRequestBuilder() {
        }

        /**
         * Build call for getAllQualifications
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllQualificationsCall(_callback);
        }


        /**
         * Execute getAllQualifications request
         * @return QualificationLibraryItems
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public QualificationLibraryItems execute() throws ApiException {
            ApiResponse<QualificationLibraryItems> localVarResp = getAllQualificationsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllQualifications request with HTTP info returned
         * @return ApiResponse&lt;QualificationLibraryItems&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<QualificationLibraryItems> executeWithHttpInfo() throws ApiException {
            return getAllQualificationsWithHttpInfo();
        }

        /**
         * Execute getAllQualifications request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<QualificationLibraryItems> _callback) throws ApiException {
            return getAllQualificationsAsync(_callback);
        }
    }

    /**
     * List all Qualification Library Items
     * 
     * @return GetAllQualificationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetAllQualificationsRequestBuilder getAllQualifications() throws IllegalArgumentException {
        return new GetAllQualificationsRequestBuilder();
    }
    private okhttp3.Call updateRecordCall(QualificationLibraryItemsPatchRequest qualificationLibraryItemsPatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = qualificationLibraryItemsPatchRequest;

        // create path and map variables
        String localVarPath = "/qualification-library-items/{id}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRecordValidateBeforeCall(QualificationLibraryItemsPatchRequest qualificationLibraryItemsPatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qualificationLibraryItemsPatchRequest' is set
        if (qualificationLibraryItemsPatchRequest == null) {
            throw new ApiException("Missing the required parameter 'qualificationLibraryItemsPatchRequest' when calling updateRecord(Async)");
        }

        return updateRecordCall(qualificationLibraryItemsPatchRequest, _callback);

    }


    private ApiResponse<QualificationLibraryItems> updateRecordWithHttpInfo(QualificationLibraryItemsPatchRequest qualificationLibraryItemsPatchRequest) throws ApiException {
        okhttp3.Call localVarCall = updateRecordValidateBeforeCall(qualificationLibraryItemsPatchRequest, null);
        Type localVarReturnType = new TypeToken<QualificationLibraryItems>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateRecordAsync(QualificationLibraryItemsPatchRequest qualificationLibraryItemsPatchRequest, final ApiCallback<QualificationLibraryItems> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRecordValidateBeforeCall(qualificationLibraryItemsPatchRequest, _callback);
        Type localVarReturnType = new TypeToken<QualificationLibraryItems>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRecordRequestBuilder {
        private String name;
        private String qualificationTypeId;
        private String qualificationExpiryType;
        private String qualificationRegistrationNumberVisibilityType;
        private String qualificationAttachmentRequirementType;
        private Double expiryWarningPeriod;
        private Boolean sendExpiryWarning;

        private UpdateRecordRequestBuilder() {
        }

        /**
         * Set name
         * @param name The name of this [Qualification Library Item](https://developers.intellihr.io/docs/v1/) (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set qualificationTypeId
         * @param qualificationTypeId The identifier string for the Qualification Type Id. (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder qualificationTypeId(String qualificationTypeId) {
            this.qualificationTypeId = qualificationTypeId;
            return this;
        }
        
        /**
         * Set qualificationExpiryType
         * @param qualificationExpiryType The expiry type for this library item (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder qualificationExpiryType(String qualificationExpiryType) {
            this.qualificationExpiryType = qualificationExpiryType;
            return this;
        }
        
        /**
         * Set qualificationRegistrationNumberVisibilityType
         * @param qualificationRegistrationNumberVisibilityType The expiry type for this library item (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder qualificationRegistrationNumberVisibilityType(String qualificationRegistrationNumberVisibilityType) {
            this.qualificationRegistrationNumberVisibilityType = qualificationRegistrationNumberVisibilityType;
            return this;
        }
        
        /**
         * Set qualificationAttachmentRequirementType
         * @param qualificationAttachmentRequirementType If documents are required for this library item (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder qualificationAttachmentRequirementType(String qualificationAttachmentRequirementType) {
            this.qualificationAttachmentRequirementType = qualificationAttachmentRequirementType;
            return this;
        }
        
        /**
         * Set expiryWarningPeriod
         * @param expiryWarningPeriod Period in days, that there is a warning before the expiry of the qualification. If qualificationExpiryType is set to EXPIRY_INAPPLICABLE, this value will be ignored. (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder expiryWarningPeriod(Double expiryWarningPeriod) {
            this.expiryWarningPeriod = expiryWarningPeriod;
            return this;
        }
        
        /**
         * Set sendExpiryWarning
         * @param sendExpiryWarning If this [Qualification Library Item](https://developers.intellihr.io/docs/v1/) will send expiry warning/s using the periods defined. If qualificationExpiryType is set to EXPIRY_INAPPLICABLE, this value will be ignored. (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder sendExpiryWarning(Boolean sendExpiryWarning) {
            this.sendExpiryWarning = sendExpiryWarning;
            return this;
        }
        
        /**
         * Build call for updateRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            QualificationLibraryItemsPatchRequest qualificationLibraryItemsPatchRequest = buildBodyParams();
            return updateRecordCall(qualificationLibraryItemsPatchRequest, _callback);
        }

        private QualificationLibraryItemsPatchRequest buildBodyParams() {
            QualificationLibraryItemsPatchRequest qualificationLibraryItemsPatchRequest = new QualificationLibraryItemsPatchRequest();
            qualificationLibraryItemsPatchRequest.name(this.name);
            qualificationLibraryItemsPatchRequest.qualificationTypeId(this.qualificationTypeId);
            if (this.qualificationExpiryType != null)
            qualificationLibraryItemsPatchRequest.qualificationExpiryType(QualificationLibraryItemsPatchRequest.QualificationExpiryTypeEnum.fromValue(this.qualificationExpiryType));
            if (this.qualificationRegistrationNumberVisibilityType != null)
            qualificationLibraryItemsPatchRequest.qualificationRegistrationNumberVisibilityType(QualificationLibraryItemsPatchRequest.QualificationRegistrationNumberVisibilityTypeEnum.fromValue(this.qualificationRegistrationNumberVisibilityType));
            if (this.qualificationAttachmentRequirementType != null)
            qualificationLibraryItemsPatchRequest.qualificationAttachmentRequirementType(QualificationLibraryItemsPatchRequest.QualificationAttachmentRequirementTypeEnum.fromValue(this.qualificationAttachmentRequirementType));
            qualificationLibraryItemsPatchRequest.expiryWarningPeriod(this.expiryWarningPeriod);
            qualificationLibraryItemsPatchRequest.sendExpiryWarning(this.sendExpiryWarning);
            return qualificationLibraryItemsPatchRequest;
        }

        /**
         * Execute updateRecord request
         * @return QualificationLibraryItems
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public QualificationLibraryItems execute() throws ApiException {
            QualificationLibraryItemsPatchRequest qualificationLibraryItemsPatchRequest = buildBodyParams();
            ApiResponse<QualificationLibraryItems> localVarResp = updateRecordWithHttpInfo(qualificationLibraryItemsPatchRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateRecord request with HTTP info returned
         * @return ApiResponse&lt;QualificationLibraryItems&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<QualificationLibraryItems> executeWithHttpInfo() throws ApiException {
            QualificationLibraryItemsPatchRequest qualificationLibraryItemsPatchRequest = buildBodyParams();
            return updateRecordWithHttpInfo(qualificationLibraryItemsPatchRequest);
        }

        /**
         * Execute updateRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<QualificationLibraryItems> _callback) throws ApiException {
            QualificationLibraryItemsPatchRequest qualificationLibraryItemsPatchRequest = buildBodyParams();
            return updateRecordAsync(qualificationLibraryItemsPatchRequest, _callback);
        }
    }

    /**
     * Patch an existing Qualification Library Item
     * Patch attributes of an existing [Qualification Library Items](https://developers.intellihr.io/docs/v1/) record with the provided data.
     * @param qualificationLibraryItemsPatchRequest  (required)
     * @return UpdateRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRecordRequestBuilder updateRecord() throws IllegalArgumentException {
        return new UpdateRecordRequestBuilder();
    }
}
