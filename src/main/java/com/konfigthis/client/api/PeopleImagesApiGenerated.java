/*
 * intelliHR Public API
 * You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)
 *
 * The version of the OpenAPI document: V1
 * Contact: support@intellihr.co
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PersonIdImageCreateRequest;
import com.konfigthis.client.model.PersonIdImageCreateResponse;
import com.konfigthis.client.model.PersonIdImageFindResponse;
import com.konfigthis.client.model.PersonIdImagePatchRequest;
import com.konfigthis.client.model.PersonIdImagePatchRequestCoordinates;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PeopleImagesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PeopleImagesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PeopleImagesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call generateTemporaryImageUrlCall(String personId, PersonIdImageCreateRequest personIdImageCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = personIdImageCreateRequest;

        // create path and map variables
        String localVarPath = "/people/{personId}/images"
            .replace("{" + "personId" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateTemporaryImageUrlValidateBeforeCall(String personId, PersonIdImageCreateRequest personIdImageCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling generateTemporaryImageUrl(Async)");
        }

        // verify the required parameter 'personIdImageCreateRequest' is set
        if (personIdImageCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'personIdImageCreateRequest' when calling generateTemporaryImageUrl(Async)");
        }

        return generateTemporaryImageUrlCall(personId, personIdImageCreateRequest, _callback);

    }


    private ApiResponse<PersonIdImageCreateResponse> generateTemporaryImageUrlWithHttpInfo(String personId, PersonIdImageCreateRequest personIdImageCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = generateTemporaryImageUrlValidateBeforeCall(personId, personIdImageCreateRequest, null);
        Type localVarReturnType = new TypeToken<PersonIdImageCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateTemporaryImageUrlAsync(String personId, PersonIdImageCreateRequest personIdImageCreateRequest, final ApiCallback<PersonIdImageCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateTemporaryImageUrlValidateBeforeCall(personId, personIdImageCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<PersonIdImageCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateTemporaryImageUrlRequestBuilder {
        private final String personId;
        private String imageType;
        private String extension;

        private GenerateTemporaryImageUrlRequestBuilder(String personId) {
            this.personId = personId;
        }

        /**
         * Set imageType
         * @param imageType The Image Type. Enum: &#x60;PERSON_PROFILE&#x60;, &#x60;PROFILE_COVER&#x60;. (optional, default to PERSON_PROFILE)
         * @return GenerateTemporaryImageUrlRequestBuilder
         */
        public GenerateTemporaryImageUrlRequestBuilder imageType(String imageType) {
            this.imageType = imageType;
            return this;
        }
        
        /**
         * Set extension
         * @param extension The extension of the image, not including the dot (optional)
         * @return GenerateTemporaryImageUrlRequestBuilder
         */
        public GenerateTemporaryImageUrlRequestBuilder extension(String extension) {
            this.extension = extension;
            return this;
        }
        
        /**
         * Build call for generateTemporaryImageUrl
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PersonIdImageCreateRequest personIdImageCreateRequest = buildBodyParams();
            return generateTemporaryImageUrlCall(personId, personIdImageCreateRequest, _callback);
        }

        private PersonIdImageCreateRequest buildBodyParams() {
            PersonIdImageCreateRequest personIdImageCreateRequest = new PersonIdImageCreateRequest();
            personIdImageCreateRequest.imageType(this.imageType);
            personIdImageCreateRequest.extension(this.extension);
            return personIdImageCreateRequest;
        }

        /**
         * Execute generateTemporaryImageUrl request
         * @return PersonIdImageCreateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public PersonIdImageCreateResponse execute() throws ApiException {
            PersonIdImageCreateRequest personIdImageCreateRequest = buildBodyParams();
            ApiResponse<PersonIdImageCreateResponse> localVarResp = generateTemporaryImageUrlWithHttpInfo(personId, personIdImageCreateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateTemporaryImageUrl request with HTTP info returned
         * @return ApiResponse&lt;PersonIdImageCreateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonIdImageCreateResponse> executeWithHttpInfo() throws ApiException {
            PersonIdImageCreateRequest personIdImageCreateRequest = buildBodyParams();
            return generateTemporaryImageUrlWithHttpInfo(personId, personIdImageCreateRequest);
        }

        /**
         * Execute generateTemporaryImageUrl request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonIdImageCreateResponse> _callback) throws ApiException {
            PersonIdImageCreateRequest personIdImageCreateRequest = buildBodyParams();
            return generateTemporaryImageUrlAsync(personId, personIdImageCreateRequest, _callback);
        }
    }

    /**
     * Generate an temporary image upload URL for the provided Person.
     * Generates an upload url for an temporary image of the specified type to an existing [Person](https://developers.intellihr.io/docs/v1/)
     * @param personId Id string param for relevant [Person](https://developers.intellihr.io/docs/v1/) (required)
     * @param personIdImageCreateRequest  (required)
     * @return GenerateTemporaryImageUrlRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GenerateTemporaryImageUrlRequestBuilder generateTemporaryImageUrl(String personId) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
            

        return new GenerateTemporaryImageUrlRequestBuilder(personId);
    }
    private okhttp3.Call getTemporaryImageCall(String personId, String imageType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{personId}/images"
            .replace("{" + "personId" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (imageType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageType", imageType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTemporaryImageValidateBeforeCall(String personId, String imageType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling getTemporaryImage(Async)");
        }

        return getTemporaryImageCall(personId, imageType, _callback);

    }


    private ApiResponse<PersonIdImageFindResponse> getTemporaryImageWithHttpInfo(String personId, String imageType) throws ApiException {
        okhttp3.Call localVarCall = getTemporaryImageValidateBeforeCall(personId, imageType, null);
        Type localVarReturnType = new TypeToken<PersonIdImageFindResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTemporaryImageAsync(String personId, String imageType, final ApiCallback<PersonIdImageFindResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTemporaryImageValidateBeforeCall(personId, imageType, _callback);
        Type localVarReturnType = new TypeToken<PersonIdImageFindResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTemporaryImageRequestBuilder {
        private final String personId;
        private String imageType;

        private GetTemporaryImageRequestBuilder(String personId) {
            this.personId = personId;
        }

        /**
         * Set imageType
         * @param imageType The Image Type. Enum: &#x60;PERSON_PROFILE&#x60;, &#x60;PROFILE_COVER&#x60;. (optional)
         * @return GetTemporaryImageRequestBuilder
         */
        public GetTemporaryImageRequestBuilder imageType(String imageType) {
            this.imageType = imageType;
            return this;
        }
        
        /**
         * Build call for getTemporaryImage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTemporaryImageCall(personId, imageType, _callback);
        }


        /**
         * Execute getTemporaryImage request
         * @return PersonIdImageFindResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public PersonIdImageFindResponse execute() throws ApiException {
            ApiResponse<PersonIdImageFindResponse> localVarResp = getTemporaryImageWithHttpInfo(personId, imageType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTemporaryImage request with HTTP info returned
         * @return ApiResponse&lt;PersonIdImageFindResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonIdImageFindResponse> executeWithHttpInfo() throws ApiException {
            return getTemporaryImageWithHttpInfo(personId, imageType);
        }

        /**
         * Execute getTemporaryImage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonIdImageFindResponse> _callback) throws ApiException {
            return getTemporaryImageAsync(personId, imageType, _callback);
        }
    }

    /**
     * Get a temporary image
     * Returns the current temporary image of the specified type for the provided [Person](https://developers.intellihr.io/docs/v1/).
     * @param personId Id string param for relevant [Person](https://developers.intellihr.io/docs/v1/) (required)
     * @return GetTemporaryImageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetTemporaryImageRequestBuilder getTemporaryImage(String personId) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
            

        return new GetTemporaryImageRequestBuilder(personId);
    }
    private okhttp3.Call promoteImageCall(String personId, PersonIdImagePatchRequest personIdImagePatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = personIdImagePatchRequest;

        // create path and map variables
        String localVarPath = "/people/{personId}/images"
            .replace("{" + "personId" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call promoteImageValidateBeforeCall(String personId, PersonIdImagePatchRequest personIdImagePatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling promoteImage(Async)");
        }

        // verify the required parameter 'personIdImagePatchRequest' is set
        if (personIdImagePatchRequest == null) {
            throw new ApiException("Missing the required parameter 'personIdImagePatchRequest' when calling promoteImage(Async)");
        }

        return promoteImageCall(personId, personIdImagePatchRequest, _callback);

    }


    private ApiResponse<Void> promoteImageWithHttpInfo(String personId, PersonIdImagePatchRequest personIdImagePatchRequest) throws ApiException {
        okhttp3.Call localVarCall = promoteImageValidateBeforeCall(personId, personIdImagePatchRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call promoteImageAsync(String personId, PersonIdImagePatchRequest personIdImagePatchRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = promoteImageValidateBeforeCall(personId, personIdImagePatchRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class PromoteImageRequestBuilder {
        private final String personId;
        private String imageType;
        private Integer rotation;
        private PersonIdImagePatchRequestCoordinates coordinates;

        private PromoteImageRequestBuilder(String personId) {
            this.personId = personId;
        }

        /**
         * Set imageType
         * @param imageType The Image Type. Enum: &#x60;PERSON_PROFILE&#x60;, &#x60;PROFILE_COVER&#x60;. (optional, default to PERSON_PROFILE)
         * @return PromoteImageRequestBuilder
         */
        public PromoteImageRequestBuilder imageType(String imageType) {
            this.imageType = imageType;
            return this;
        }
        
        /**
         * Set rotation
         * @param rotation the degree to rotate the image from 0-359 (optional, default to 0)
         * @return PromoteImageRequestBuilder
         */
        public PromoteImageRequestBuilder rotation(Integer rotation) {
            this.rotation = rotation;
            return this;
        }
        
        /**
         * Set coordinates
         * @param coordinates  (optional)
         * @return PromoteImageRequestBuilder
         */
        public PromoteImageRequestBuilder coordinates(PersonIdImagePatchRequestCoordinates coordinates) {
            this.coordinates = coordinates;
            return this;
        }
        
        /**
         * Build call for promoteImage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PersonIdImagePatchRequest personIdImagePatchRequest = buildBodyParams();
            return promoteImageCall(personId, personIdImagePatchRequest, _callback);
        }

        private PersonIdImagePatchRequest buildBodyParams() {
            PersonIdImagePatchRequest personIdImagePatchRequest = new PersonIdImagePatchRequest();
            personIdImagePatchRequest.imageType(this.imageType);
            personIdImagePatchRequest.rotation(this.rotation);
            personIdImagePatchRequest.coordinates(this.coordinates);
            return personIdImagePatchRequest;
        }

        /**
         * Execute promoteImage request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            PersonIdImagePatchRequest personIdImagePatchRequest = buildBodyParams();
            promoteImageWithHttpInfo(personId, personIdImagePatchRequest);
        }

        /**
         * Execute promoteImage request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            PersonIdImagePatchRequest personIdImagePatchRequest = buildBodyParams();
            return promoteImageWithHttpInfo(personId, personIdImagePatchRequest);
        }

        /**
         * Execute promoteImage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            PersonIdImagePatchRequest personIdImagePatchRequest = buildBodyParams();
            return promoteImageAsync(personId, personIdImagePatchRequest, _callback);
        }
    }

    /**
     * Promote temporary image
     * Activates the temporary image as the active image on a [Person](https://developers.intellihr.io/docs/v1/), has some minor editing options.
     * @param personId Id string param for relevant [Person](https://developers.intellihr.io/docs/v1/) (required)
     * @param personIdImagePatchRequest  (required)
     * @return PromoteImageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PromoteImageRequestBuilder promoteImage(String personId) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
            

        return new PromoteImageRequestBuilder(personId);
    }
}
