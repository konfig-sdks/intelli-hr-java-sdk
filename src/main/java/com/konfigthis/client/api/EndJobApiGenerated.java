/*
 * intelliHR Public API
 * You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)
 *
 * The version of the OpenAPI document: V1
 * Contact: support@intellihr.co
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.JobEndPatchRequest;
import com.konfigthis.client.model.JobEndPatchResponse;
import com.konfigthis.client.model.JobEndRemoveResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EndJobApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EndJobApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EndJobApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call cancelEndDateCall( UNKNOWN_PARAMETER_NAME, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job-end/{id}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (UNKNOWN_PARAMETER_NAME != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cancelDisablingUserAccount", UNKNOWN_PARAMETER_NAME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelEndDateValidateBeforeCall( UNKNOWN_PARAMETER_NAME, final ApiCallback _callback) throws ApiException {
        return cancelEndDateCall(UNKNOWN_PARAMETER_NAME, _callback);

    }


    private ApiResponse<JobEndRemoveResponse> cancelEndDateWithHttpInfo( UNKNOWN_PARAMETER_NAME) throws ApiException {
        okhttp3.Call localVarCall = cancelEndDateValidateBeforeCall(UNKNOWN_PARAMETER_NAME, null);
        Type localVarReturnType = new TypeToken<JobEndRemoveResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cancelEndDateAsync( UNKNOWN_PARAMETER_NAME, final ApiCallback<JobEndRemoveResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelEndDateValidateBeforeCall(UNKNOWN_PARAMETER_NAME, _callback);
        Type localVarReturnType = new TypeToken<JobEndRemoveResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CancelEndDateRequestBuilder {
        private  UNKNOWN_PARAMETER_NAME;

        private CancelEndDateRequestBuilder() {
        }

        /**
         * Set UNKNOWN_PARAMETER_NAME
         * @param UNKNOWN_PARAMETER_NAME Whether to cancel the disabling of the users account upon the job end date, if user doesn&#39;t exist the Boolean has no effect yet the request will still succeed. (optional)
         * @return CancelEndDateRequestBuilder
         */
        public CancelEndDateRequestBuilder UNKNOWN_PARAMETER_NAME( UNKNOWN_PARAMETER_NAME) {
            this.UNKNOWN_PARAMETER_NAME = UNKNOWN_PARAMETER_NAME;
            return this;
        }
        
        /**
         * Build call for cancelEndDate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cancelEndDateCall(UNKNOWN_PARAMETER_NAME, _callback);
        }


        /**
         * Execute cancelEndDate request
         * @return JobEndRemoveResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public JobEndRemoveResponse execute() throws ApiException {
            ApiResponse<JobEndRemoveResponse> localVarResp = cancelEndDateWithHttpInfo(UNKNOWN_PARAMETER_NAME);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute cancelEndDate request with HTTP info returned
         * @return ApiResponse&lt;JobEndRemoveResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobEndRemoveResponse> executeWithHttpInfo() throws ApiException {
            return cancelEndDateWithHttpInfo(UNKNOWN_PARAMETER_NAME);
        }

        /**
         * Execute cancelEndDate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobEndRemoveResponse> _callback) throws ApiException {
            return cancelEndDateAsync(UNKNOWN_PARAMETER_NAME, _callback);
        }
    }

    /**
     * Cancel job end date
     * If a job end date has been finalised, this will cancel the finalisation
     * @return CancelEndDateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CancelEndDateRequestBuilder cancelEndDate() throws IllegalArgumentException {
        return new CancelEndDateRequestBuilder();
    }
    private okhttp3.Call jobFinalizeCall(JobEndPatchRequest jobEndPatchRequest,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2,  UNKNOWN_PARAMETER_NAME3, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jobEndPatchRequest;

        // create path and map variables
        String localVarPath = "/job-end/{id}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (UNKNOWN_PARAMETER_NAME != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shouldNotFinaliseEndDate", UNKNOWN_PARAMETER_NAME));
        }

        if (UNKNOWN_PARAMETER_NAME2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shouldRetainUserAccount", UNKNOWN_PARAMETER_NAME2));
        }

        if (UNKNOWN_PARAMETER_NAME3 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("suppressEvents", UNKNOWN_PARAMETER_NAME3));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobFinalizeValidateBeforeCall(JobEndPatchRequest jobEndPatchRequest,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2,  UNKNOWN_PARAMETER_NAME3, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobEndPatchRequest' is set
        if (jobEndPatchRequest == null) {
            throw new ApiException("Missing the required parameter 'jobEndPatchRequest' when calling jobFinalize(Async)");
        }

        return jobFinalizeCall(jobEndPatchRequest, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, UNKNOWN_PARAMETER_NAME3, _callback);

    }


    private ApiResponse<JobEndPatchResponse> jobFinalizeWithHttpInfo(JobEndPatchRequest jobEndPatchRequest,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2,  UNKNOWN_PARAMETER_NAME3) throws ApiException {
        okhttp3.Call localVarCall = jobFinalizeValidateBeforeCall(jobEndPatchRequest, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, UNKNOWN_PARAMETER_NAME3, null);
        Type localVarReturnType = new TypeToken<JobEndPatchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call jobFinalizeAsync(JobEndPatchRequest jobEndPatchRequest,  UNKNOWN_PARAMETER_NAME,  UNKNOWN_PARAMETER_NAME2,  UNKNOWN_PARAMETER_NAME3, final ApiCallback<JobEndPatchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobFinalizeValidateBeforeCall(jobEndPatchRequest, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, UNKNOWN_PARAMETER_NAME3, _callback);
        Type localVarReturnType = new TypeToken<JobEndPatchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class JobFinalizeRequestBuilder {
        private String endDate;
        private String reassignDirectReportsTo;
        private String turnoverType;
        private String turnoverReason;
        private  UNKNOWN_PARAMETER_NAME;
        private  UNKNOWN_PARAMETER_NAME2;
        private  UNKNOWN_PARAMETER_NAME3;

        private JobFinalizeRequestBuilder() {
        }

        /**
         * Set endDate
         * @param endDate The &lt;b&gt;exclusive&lt;/b&gt; date this [Job](https://developers.intellihr.io/docs/v1/) ended or will end within the organisation. For example, if the person&#39;s last working date is on 2025-04-23, the &#x60;endDate&#x60; should be set as 2025-04-24 to reflect the exclusive date. Required if not finalising an end date, or the job does not have an end date. This date will follow the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.6).   YYYY-MM-DD date formatting is also supported, although by using this format the date will be stored as the start of day in UTC time, not the requesting tenants timezone. (optional)
         * @return JobFinalizeRequestBuilder
         */
        public JobFinalizeRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set reassignDirectReportsTo
         * @param reassignDirectReportsTo The identifier string for the [Job](https://developers.intellihr.io/docs/v1/) of the person that the direct report will be reassigned to. (optional)
         * @return JobFinalizeRequestBuilder
         */
        public JobFinalizeRequestBuilder reassignDirectReportsTo(String reassignDirectReportsTo) {
            this.reassignDirectReportsTo = reassignDirectReportsTo;
            return this;
        }
        
        /**
         * Set turnoverType
         * @param turnoverType The type of turnover this end of job would be classified as: &#x60;voluntary&#x60;, &#x60;involuntary&#x60; or &#x60;unknown&#x60;. Required if finalising an end date. (optional)
         * @return JobFinalizeRequestBuilder
         */
        public JobFinalizeRequestBuilder turnoverType(String turnoverType) {
            this.turnoverType = turnoverType;
            return this;
        }
        
        /**
         * Set turnoverReason
         * @param turnoverReason The name of the turnover reason. (optional)
         * @return JobFinalizeRequestBuilder
         */
        public JobFinalizeRequestBuilder turnoverReason(String turnoverReason) {
            this.turnoverReason = turnoverReason;
            return this;
        }
        
        /**
         * Set UNKNOWN_PARAMETER_NAME
         * @param UNKNOWN_PARAMETER_NAME If true, do not finalise the job. (optional)
         * @return JobFinalizeRequestBuilder
         */
        public JobFinalizeRequestBuilder UNKNOWN_PARAMETER_NAME( UNKNOWN_PARAMETER_NAME) {
            this.UNKNOWN_PARAMETER_NAME = UNKNOWN_PARAMETER_NAME;
            return this;
        }
        
        /**
         * Set UNKNOWN_PARAMETER_NAME2
         * @param UNKNOWN_PARAMETER_NAME2 If true, keeps the user account when finalising the job. (optional)
         * @return JobFinalizeRequestBuilder
         */
        public JobFinalizeRequestBuilder UNKNOWN_PARAMETER_NAME2( UNKNOWN_PARAMETER_NAME2) {
            this.UNKNOWN_PARAMETER_NAME2 = UNKNOWN_PARAMETER_NAME2;
            return this;
        }
        
        /**
         * Set UNKNOWN_PARAMETER_NAME3
         * @param UNKNOWN_PARAMETER_NAME3 When true, no events will be fired from this action (optional)
         * @return JobFinalizeRequestBuilder
         */
        public JobFinalizeRequestBuilder UNKNOWN_PARAMETER_NAME3( UNKNOWN_PARAMETER_NAME3) {
            this.UNKNOWN_PARAMETER_NAME3 = UNKNOWN_PARAMETER_NAME3;
            return this;
        }
        
        /**
         * Build call for jobFinalize
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            JobEndPatchRequest jobEndPatchRequest = buildBodyParams();
            return jobFinalizeCall(jobEndPatchRequest, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, UNKNOWN_PARAMETER_NAME3, _callback);
        }

        private JobEndPatchRequest buildBodyParams() {
            JobEndPatchRequest jobEndPatchRequest = new JobEndPatchRequest();
            jobEndPatchRequest.endDate(this.endDate);
            jobEndPatchRequest.reassignDirectReportsTo(this.reassignDirectReportsTo);
            jobEndPatchRequest.turnoverType(this.turnoverType);
            jobEndPatchRequest.turnoverReason(this.turnoverReason);
            return jobEndPatchRequest;
        }

        /**
         * Execute jobFinalize request
         * @return JobEndPatchResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public JobEndPatchResponse execute() throws ApiException {
            JobEndPatchRequest jobEndPatchRequest = buildBodyParams();
            ApiResponse<JobEndPatchResponse> localVarResp = jobFinalizeWithHttpInfo(jobEndPatchRequest, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, UNKNOWN_PARAMETER_NAME3);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute jobFinalize request with HTTP info returned
         * @return ApiResponse&lt;JobEndPatchResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobEndPatchResponse> executeWithHttpInfo() throws ApiException {
            JobEndPatchRequest jobEndPatchRequest = buildBodyParams();
            return jobFinalizeWithHttpInfo(jobEndPatchRequest, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, UNKNOWN_PARAMETER_NAME3);
        }

        /**
         * Execute jobFinalize request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobEndPatchResponse> _callback) throws ApiException {
            JobEndPatchRequest jobEndPatchRequest = buildBodyParams();
            return jobFinalizeAsync(jobEndPatchRequest, UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2, UNKNOWN_PARAMETER_NAME3, _callback);
        }
    }

    /**
     * End a job
     * Set an end date, and finalise a job.
     * @param jobEndPatchRequest  (required)
     * @return JobFinalizeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public JobFinalizeRequestBuilder jobFinalize() throws IllegalArgumentException {
        return new JobFinalizeRequestBuilder();
    }
}
