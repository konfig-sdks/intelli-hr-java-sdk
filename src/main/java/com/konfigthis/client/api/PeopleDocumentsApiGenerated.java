/*
 * intelliHR Public API
 * You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)
 *
 * The version of the OpenAPI document: V1
 * Contact: support@intellihr.co
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PeopleDocumentsCreateRequest;
import com.konfigthis.client.model.PeopleDocumentsCreateResponse;
import com.konfigthis.client.model.PeopleDocumentsFindResponse;
import com.konfigthis.client.model.PeopleDocumentsPatchRequest;
import com.konfigthis.client.model.PeopleDocumentsPatchResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PeopleDocumentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PeopleDocumentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PeopleDocumentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createPresignedUploadUrlCall(String personId, PeopleDocumentsCreateRequest peopleDocumentsCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = peopleDocumentsCreateRequest;

        // create path and map variables
        String localVarPath = "/people/{personId}/documents"
            .replace("{" + "personId" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPresignedUploadUrlValidateBeforeCall(String personId, PeopleDocumentsCreateRequest peopleDocumentsCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling createPresignedUploadUrl(Async)");
        }

        // verify the required parameter 'peopleDocumentsCreateRequest' is set
        if (peopleDocumentsCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'peopleDocumentsCreateRequest' when calling createPresignedUploadUrl(Async)");
        }

        return createPresignedUploadUrlCall(personId, peopleDocumentsCreateRequest, _callback);

    }


    private ApiResponse<PeopleDocumentsCreateResponse> createPresignedUploadUrlWithHttpInfo(String personId, PeopleDocumentsCreateRequest peopleDocumentsCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createPresignedUploadUrlValidateBeforeCall(personId, peopleDocumentsCreateRequest, null);
        Type localVarReturnType = new TypeToken<PeopleDocumentsCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPresignedUploadUrlAsync(String personId, PeopleDocumentsCreateRequest peopleDocumentsCreateRequest, final ApiCallback<PeopleDocumentsCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPresignedUploadUrlValidateBeforeCall(personId, peopleDocumentsCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<PeopleDocumentsCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePresignedUploadUrlRequestBuilder {
        private final String filename;
        private final String mime;
        private final Integer size;
        private final String extension;
        private final String personId;

        private CreatePresignedUploadUrlRequestBuilder(String filename, String mime, Integer size, String extension, String personId) {
            this.filename = filename;
            this.mime = mime;
            this.size = size;
            this.extension = extension;
            this.personId = personId;
        }

        /**
         * Build call for createPresignedUploadUrl
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PeopleDocumentsCreateRequest peopleDocumentsCreateRequest = buildBodyParams();
            return createPresignedUploadUrlCall(personId, peopleDocumentsCreateRequest, _callback);
        }

        private PeopleDocumentsCreateRequest buildBodyParams() {
            PeopleDocumentsCreateRequest peopleDocumentsCreateRequest = new PeopleDocumentsCreateRequest();
            peopleDocumentsCreateRequest.filename(this.filename);
            peopleDocumentsCreateRequest.mime(this.mime);
            peopleDocumentsCreateRequest.size(this.size);
            peopleDocumentsCreateRequest.extension(this.extension);
            return peopleDocumentsCreateRequest;
        }

        /**
         * Execute createPresignedUploadUrl request
         * @return PeopleDocumentsCreateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public PeopleDocumentsCreateResponse execute() throws ApiException {
            PeopleDocumentsCreateRequest peopleDocumentsCreateRequest = buildBodyParams();
            ApiResponse<PeopleDocumentsCreateResponse> localVarResp = createPresignedUploadUrlWithHttpInfo(personId, peopleDocumentsCreateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPresignedUploadUrl request with HTTP info returned
         * @return ApiResponse&lt;PeopleDocumentsCreateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PeopleDocumentsCreateResponse> executeWithHttpInfo() throws ApiException {
            PeopleDocumentsCreateRequest peopleDocumentsCreateRequest = buildBodyParams();
            return createPresignedUploadUrlWithHttpInfo(personId, peopleDocumentsCreateRequest);
        }

        /**
         * Execute createPresignedUploadUrl request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PeopleDocumentsCreateResponse> _callback) throws ApiException {
            PeopleDocumentsCreateRequest peopleDocumentsCreateRequest = buildBodyParams();
            return createPresignedUploadUrlAsync(personId, peopleDocumentsCreateRequest, _callback);
        }
    }

    /**
     * 
     * Create a presigned upload URL
     * @param personId personId parameter (required)
     * @param peopleDocumentsCreateRequest  (required)
     * @return CreatePresignedUploadUrlRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreatePresignedUploadUrlRequestBuilder createPresignedUploadUrl(String filename, String mime, Integer size, String extension, String personId) throws IllegalArgumentException {
        if (filename == null) throw new IllegalArgumentException("\"filename\" is required but got null");
            

        if (mime == null) throw new IllegalArgumentException("\"mime\" is required but got null");
            

        if (size == null) throw new IllegalArgumentException("\"size\" is required but got null");
        if (extension == null) throw new IllegalArgumentException("\"extension\" is required but got null");
            

        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
            

        return new CreatePresignedUploadUrlRequestBuilder(filename, mime, size, extension, personId);
    }
    private okhttp3.Call listCall(String personId, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{personId}/documents"
            .replace("{" + "personId" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String personId, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling list(Async)");
        }

        return listCall(personId, limit, page, _callback);

    }


    private ApiResponse<PeopleDocumentsFindResponse> listWithHttpInfo(String personId, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(personId, limit, page, null);
        Type localVarReturnType = new TypeToken<PeopleDocumentsFindResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String personId, Integer limit, Integer page, final ApiCallback<PeopleDocumentsFindResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(personId, limit, page, _callback);
        Type localVarReturnType = new TypeToken<PeopleDocumentsFindResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private final String personId;
        private Integer limit;
        private Integer page;

        private ListRequestBuilder(String personId) {
            this.personId = personId;
        }

        /**
         * Set limit
         * @param limit The number of items per page (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set page
         * @param page The page number (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(personId, limit, page, _callback);
        }


        /**
         * Execute list request
         * @return PeopleDocumentsFindResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public PeopleDocumentsFindResponse execute() throws ApiException {
            ApiResponse<PeopleDocumentsFindResponse> localVarResp = listWithHttpInfo(personId, limit, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;PeopleDocumentsFindResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PeopleDocumentsFindResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(personId, limit, page);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PeopleDocumentsFindResponse> _callback) throws ApiException {
            return listAsync(personId, limit, page, _callback);
        }
    }

    /**
     * List all Documents of a person
     * Returns a list of all [Documents](https://developers.intellihr.io/docs/v1/) of a given [person]((https://developers.intellihr.io/docs/v1/).
     * @param personId Id string param for relevant [Person](https://developers.intellihr.io/docs/v1/) (required)
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list(String personId) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
            

        return new ListRequestBuilder(personId);
    }
    private okhttp3.Call updateDocumentCall(String personId, PeopleDocumentsPatchRequest peopleDocumentsPatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = peopleDocumentsPatchRequest;

        // create path and map variables
        String localVarPath = "/people/{personId}/documents/{id}"
            .replace("{" + "personId" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDocumentValidateBeforeCall(String personId, PeopleDocumentsPatchRequest peopleDocumentsPatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling updateDocument(Async)");
        }

        // verify the required parameter 'peopleDocumentsPatchRequest' is set
        if (peopleDocumentsPatchRequest == null) {
            throw new ApiException("Missing the required parameter 'peopleDocumentsPatchRequest' when calling updateDocument(Async)");
        }

        return updateDocumentCall(personId, peopleDocumentsPatchRequest, _callback);

    }


    private ApiResponse<PeopleDocumentsPatchResponse> updateDocumentWithHttpInfo(String personId, PeopleDocumentsPatchRequest peopleDocumentsPatchRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDocumentValidateBeforeCall(personId, peopleDocumentsPatchRequest, null);
        Type localVarReturnType = new TypeToken<PeopleDocumentsPatchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDocumentAsync(String personId, PeopleDocumentsPatchRequest peopleDocumentsPatchRequest, final ApiCallback<PeopleDocumentsPatchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDocumentValidateBeforeCall(personId, peopleDocumentsPatchRequest, _callback);
        Type localVarReturnType = new TypeToken<PeopleDocumentsPatchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDocumentRequestBuilder {
        private final String personId;
        private String filename;
        private Object uploadStatus;

        private UpdateDocumentRequestBuilder(String personId) {
            this.personId = personId;
        }

        /**
         * Set filename
         * @param filename The filename of the document. This will be used for display name. Includes extension. (optional)
         * @return UpdateDocumentRequestBuilder
         */
        public UpdateDocumentRequestBuilder filename(String filename) {
            this.filename = filename;
            return this;
        }
        
        /**
         * Set uploadStatus
         * @param uploadStatus The upload status of this [Document](https://developers.intellihr.io/docs/v1/). Enum: &#x60;SUCCESS&#x60;, &#x60;PENDING&#x60;, &#x60;FAILED&#x60;. (optional)
         * @return UpdateDocumentRequestBuilder
         */
        public UpdateDocumentRequestBuilder uploadStatus(Object uploadStatus) {
            this.uploadStatus = uploadStatus;
            return this;
        }
        
        /**
         * Build call for updateDocument
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PeopleDocumentsPatchRequest peopleDocumentsPatchRequest = buildBodyParams();
            return updateDocumentCall(personId, peopleDocumentsPatchRequest, _callback);
        }

        private PeopleDocumentsPatchRequest buildBodyParams() {
            PeopleDocumentsPatchRequest peopleDocumentsPatchRequest = new PeopleDocumentsPatchRequest();
            peopleDocumentsPatchRequest.filename(this.filename);
            peopleDocumentsPatchRequest.uploadStatus(this.uploadStatus);
            return peopleDocumentsPatchRequest;
        }

        /**
         * Execute updateDocument request
         * @return PeopleDocumentsPatchResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public PeopleDocumentsPatchResponse execute() throws ApiException {
            PeopleDocumentsPatchRequest peopleDocumentsPatchRequest = buildBodyParams();
            ApiResponse<PeopleDocumentsPatchResponse> localVarResp = updateDocumentWithHttpInfo(personId, peopleDocumentsPatchRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateDocument request with HTTP info returned
         * @return ApiResponse&lt;PeopleDocumentsPatchResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PeopleDocumentsPatchResponse> executeWithHttpInfo() throws ApiException {
            PeopleDocumentsPatchRequest peopleDocumentsPatchRequest = buildBodyParams();
            return updateDocumentWithHttpInfo(personId, peopleDocumentsPatchRequest);
        }

        /**
         * Execute updateDocument request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PeopleDocumentsPatchResponse> _callback) throws ApiException {
            PeopleDocumentsPatchRequest peopleDocumentsPatchRequest = buildBodyParams();
            return updateDocumentAsync(personId, peopleDocumentsPatchRequest, _callback);
        }
    }

    /**
     * 
     * Update a Document
     * @param personId personId parameter (required)
     * @param peopleDocumentsPatchRequest  (required)
     * @return UpdateDocumentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDocumentRequestBuilder updateDocument(String personId) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
            

        return new UpdateDocumentRequestBuilder(personId);
    }
}
