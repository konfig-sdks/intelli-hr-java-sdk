/*
 * intelliHR Public API
 * You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)
 *
 * The version of the OpenAPI document: V1
 * Contact: support@intellihr.co
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BusinessEntitiesCreateRequestCustomFieldsValue;
import com.konfigthis.client.model.BusinessEntitiesPatchRequestCustomFieldsValue;
import com.konfigthis.client.model.People;
import com.konfigthis.client.model.PeopleCreateRequest;
import com.konfigthis.client.model.PeopleCreateRequestAddressesInner;
import com.konfigthis.client.model.PeopleCreateRequestEmailAddressesInner;
import com.konfigthis.client.model.PeopleCreateRequestEmergencyContact;
import com.konfigthis.client.model.PeopleCreateRequestMedicalConditionsInner;
import com.konfigthis.client.model.PeopleCreateRequestPhoneNumbersInner;
import com.konfigthis.client.model.PeopleCreateRequestWorkRight;
import com.konfigthis.client.model.PeopleList;
import com.konfigthis.client.model.PeopleListAllPeopleFiltersParameter;
import com.konfigthis.client.model.PeopleUpdateRequest;
import com.konfigthis.client.model.PeopleUpdateRequestAddressesInner;
import com.konfigthis.client.model.PeopleUpdateRequestEmailAddressesInner;
import com.konfigthis.client.model.PeopleUpdateRequestEmergencyContact;
import com.konfigthis.client.model.PeopleUpdateRequestMedicalConditionsInner;
import com.konfigthis.client.model.PeopleUpdateRequestPhoneNumbersInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PeopleApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PeopleApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PeopleApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewPersonCall(PeopleCreateRequest peopleCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = peopleCreateRequest;

        // create path and map variables
        String localVarPath = "/people";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewPersonValidateBeforeCall(PeopleCreateRequest peopleCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'peopleCreateRequest' is set
        if (peopleCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'peopleCreateRequest' when calling createNewPerson(Async)");
        }

        return createNewPersonCall(peopleCreateRequest, _callback);

    }


    private ApiResponse<People> createNewPersonWithHttpInfo(PeopleCreateRequest peopleCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewPersonValidateBeforeCall(peopleCreateRequest, null);
        Type localVarReturnType = new TypeToken<People>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewPersonAsync(PeopleCreateRequest peopleCreateRequest, final ApiCallback<People> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewPersonValidateBeforeCall(peopleCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<People>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewPersonRequestBuilder {
        private final String lastName;
        private Object title;
        private Object firstName;
        private Object middleName;
        private Object preferredName;
        private Object dateOfBirth;
        private String gender;
        private Object employeeNumber;
        private PeopleCreateRequestEmergencyContact emergencyContact;
        private Object primaryEmailAddress;
        private Object primaryPhoneNumber;
        private List<PeopleCreateRequestEmailAddressesInner> emailAddresses;
        private List<PeopleCreateRequestPhoneNumbersInner> phoneNumbers;
        private List<PeopleCreateRequestAddressesInner> addresses;
        private Map<String, BusinessEntitiesCreateRequestCustomFieldsValue> customFields;
        private List<PeopleCreateRequestMedicalConditionsInner> medicalConditions;
        private PeopleCreateRequestWorkRight workRight;
        private Object workRightExpiryDate;
        private Object userAccount;

        private CreateNewPersonRequestBuilder(String lastName) {
            this.lastName = lastName;
        }

        /**
         * Set title
         * @param title  (optional)
         * @return CreateNewPersonRequestBuilder
         */
        public CreateNewPersonRequestBuilder title(Object title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName  (optional)
         * @return CreateNewPersonRequestBuilder
         */
        public CreateNewPersonRequestBuilder firstName(Object firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set middleName
         * @param middleName  (optional)
         * @return CreateNewPersonRequestBuilder
         */
        public CreateNewPersonRequestBuilder middleName(Object middleName) {
            this.middleName = middleName;
            return this;
        }
        
        /**
         * Set preferredName
         * @param preferredName  (optional)
         * @return CreateNewPersonRequestBuilder
         */
        public CreateNewPersonRequestBuilder preferredName(Object preferredName) {
            this.preferredName = preferredName;
            return this;
        }
        
        /**
         * Set dateOfBirth
         * @param dateOfBirth  (optional)
         * @return CreateNewPersonRequestBuilder
         */
        public CreateNewPersonRequestBuilder dateOfBirth(Object dateOfBirth) {
            this.dateOfBirth = dateOfBirth;
            return this;
        }
        
        /**
         * Set gender
         * @param gender Human readable string for the [Person&#39;s](https://developers.intellihr.io/docs/v1/) gender, e.g. &#x60;Male&#x60;. Searching is done case-insensitively and &#39;starts-with&#39; e.g. passing &#x60;male&#x60; will match with a [Gender](https://developers.intellihr.io/docs/v1/) called \\\&quot;Male\\\&quot; as will \\\&quot;m\\\&quot; or \\\&quot;M\\\&quot;. If multiple [Genders](https://developers.intellihr.io/docs/v1/) match the first will be chosen. The gender options available are: &#x60;Female&#x60;, &#x60;Male&#x60;, &#x60;Non-binary&#x60;, &#x60;Other&#x60;, &#x60;Undisclosed&#x60;. (optional, default to Other)
         * @return CreateNewPersonRequestBuilder
         */
        public CreateNewPersonRequestBuilder gender(String gender) {
            this.gender = gender;
            return this;
        }
        
        /**
         * Set employeeNumber
         * @param employeeNumber  (optional)
         * @return CreateNewPersonRequestBuilder
         */
        public CreateNewPersonRequestBuilder employeeNumber(Object employeeNumber) {
            this.employeeNumber = employeeNumber;
            return this;
        }
        
        /**
         * Set emergencyContact
         * @param emergencyContact  (optional)
         * @return CreateNewPersonRequestBuilder
         */
        public CreateNewPersonRequestBuilder emergencyContact(PeopleCreateRequestEmergencyContact emergencyContact) {
            this.emergencyContact = emergencyContact;
            return this;
        }
        
        /**
         * Set primaryEmailAddress
         * @param primaryEmailAddress  (optional)
         * @return CreateNewPersonRequestBuilder
         */
        public CreateNewPersonRequestBuilder primaryEmailAddress(Object primaryEmailAddress) {
            this.primaryEmailAddress = primaryEmailAddress;
            return this;
        }
        
        /**
         * Set primaryPhoneNumber
         * @param primaryPhoneNumber  (optional)
         * @return CreateNewPersonRequestBuilder
         */
        public CreateNewPersonRequestBuilder primaryPhoneNumber(Object primaryPhoneNumber) {
            this.primaryPhoneNumber = primaryPhoneNumber;
            return this;
        }
        
        /**
         * Set emailAddresses
         * @param emailAddresses Information about this [Person&#39;s](https://developers.intellihr.io/docs/v1/) email addresses. This will replace all of their current emails. The provided email addresses will be converted to lowercase. Note that a [Person](https://developers.intellihr.io/docs/v1/) must have at least one primary email address. (optional)
         * @return CreateNewPersonRequestBuilder
         */
        public CreateNewPersonRequestBuilder emailAddresses(List<PeopleCreateRequestEmailAddressesInner> emailAddresses) {
            this.emailAddresses = emailAddresses;
            return this;
        }
        
        /**
         * Set phoneNumbers
         * @param phoneNumbers Information about this [Person&#39;s](https://developers.intellihr.io/docs/v1/) phone numbers. This will replace all of their current phone numbers. Note that a [Person](https://developers.intellihr.io/docs/v1/) must have at least one primary phone number. (optional)
         * @return CreateNewPersonRequestBuilder
         */
        public CreateNewPersonRequestBuilder phoneNumbers(List<PeopleCreateRequestPhoneNumbersInner> phoneNumbers) {
            this.phoneNumbers = phoneNumbers;
            return this;
        }
        
        /**
         * Set addresses
         * @param addresses Information about this [Person&#39;s](https://developers.intellihr.io/docs/v1/) addresses. This will insert all of their current addresses. (optional)
         * @return CreateNewPersonRequestBuilder
         */
        public CreateNewPersonRequestBuilder addresses(List<PeopleCreateRequestAddressesInner> addresses) {
            this.addresses = addresses;
            return this;
        }
        
        /**
         * Set customFields
         * @param customFields The custom field values for this [Person](https://developers.intellihr.io/docs/v1/) (optional)
         * @return CreateNewPersonRequestBuilder
         */
        public CreateNewPersonRequestBuilder customFields(Map<String, BusinessEntitiesCreateRequestCustomFieldsValue> customFields) {
            this.customFields = customFields;
            return this;
        }
        
        /**
         * Set medicalConditions
         * @param medicalConditions The medical conditions that this person has (optional)
         * @return CreateNewPersonRequestBuilder
         */
        public CreateNewPersonRequestBuilder medicalConditions(List<PeopleCreateRequestMedicalConditionsInner> medicalConditions) {
            this.medicalConditions = medicalConditions;
            return this;
        }
        
        /**
         * Set workRight
         * @param workRight  (optional)
         * @return CreateNewPersonRequestBuilder
         */
        public CreateNewPersonRequestBuilder workRight(PeopleCreateRequestWorkRight workRight) {
            this.workRight = workRight;
            return this;
        }
        
        /**
         * Set workRightExpiryDate
         * @param workRightExpiryDate  (optional)
         * @return CreateNewPersonRequestBuilder
         */
        public CreateNewPersonRequestBuilder workRightExpiryDate(Object workRightExpiryDate) {
            this.workRightExpiryDate = workRightExpiryDate;
            return this;
        }
        
        /**
         * Set userAccount
         * @param userAccount  (optional)
         * @return CreateNewPersonRequestBuilder
         */
        public CreateNewPersonRequestBuilder userAccount(Object userAccount) {
            this.userAccount = userAccount;
            return this;
        }
        
        /**
         * Build call for createNewPerson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PeopleCreateRequest peopleCreateRequest = buildBodyParams();
            return createNewPersonCall(peopleCreateRequest, _callback);
        }

        private PeopleCreateRequest buildBodyParams() {
            PeopleCreateRequest peopleCreateRequest = new PeopleCreateRequest();
            peopleCreateRequest.title(this.title);
            peopleCreateRequest.firstName(this.firstName);
            peopleCreateRequest.middleName(this.middleName);
            peopleCreateRequest.lastName(this.lastName);
            peopleCreateRequest.preferredName(this.preferredName);
            peopleCreateRequest.dateOfBirth(this.dateOfBirth);
            peopleCreateRequest.gender(this.gender);
            peopleCreateRequest.employeeNumber(this.employeeNumber);
            peopleCreateRequest.emergencyContact(this.emergencyContact);
            peopleCreateRequest.primaryEmailAddress(this.primaryEmailAddress);
            peopleCreateRequest.primaryPhoneNumber(this.primaryPhoneNumber);
            peopleCreateRequest.emailAddresses(this.emailAddresses);
            peopleCreateRequest.phoneNumbers(this.phoneNumbers);
            peopleCreateRequest.addresses(this.addresses);
            peopleCreateRequest.customFields(this.customFields);
            peopleCreateRequest.medicalConditions(this.medicalConditions);
            peopleCreateRequest.workRight(this.workRight);
            peopleCreateRequest.workRightExpiryDate(this.workRightExpiryDate);
            peopleCreateRequest.userAccount(this.userAccount);
            return peopleCreateRequest;
        }

        /**
         * Execute createNewPerson request
         * @return People
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public People execute() throws ApiException {
            PeopleCreateRequest peopleCreateRequest = buildBodyParams();
            ApiResponse<People> localVarResp = createNewPersonWithHttpInfo(peopleCreateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewPerson request with HTTP info returned
         * @return ApiResponse&lt;People&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<People> executeWithHttpInfo() throws ApiException {
            PeopleCreateRequest peopleCreateRequest = buildBodyParams();
            return createNewPersonWithHttpInfo(peopleCreateRequest);
        }

        /**
         * Execute createNewPerson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<People> _callback) throws ApiException {
            PeopleCreateRequest peopleCreateRequest = buildBodyParams();
            return createNewPersonAsync(peopleCreateRequest, _callback);
        }
    }

    /**
     * 
     * Create a person
     * @param peopleCreateRequest  (required)
     * @return CreateNewPersonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewPersonRequestBuilder createNewPerson(String lastName) throws IllegalArgumentException {
        if (lastName == null) throw new IllegalArgumentException("\"lastName\" is required but got null");
            

        return new CreateNewPersonRequestBuilder(lastName);
    }
    private okhttp3.Call findByIdCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{id}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findByIdValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return findByIdCall(_callback);

    }


    private ApiResponse<People> findByIdWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = findByIdValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<People>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findByIdAsync(final ApiCallback<People> _callback) throws ApiException {

        okhttp3.Call localVarCall = findByIdValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<People>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindByIdRequestBuilder {

        private FindByIdRequestBuilder() {
        }

        /**
         * Build call for findById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findByIdCall(_callback);
        }


        /**
         * Execute findById request
         * @return People
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public People execute() throws ApiException {
            ApiResponse<People> localVarResp = findByIdWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findById request with HTTP info returned
         * @return ApiResponse&lt;People&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<People> executeWithHttpInfo() throws ApiException {
            return findByIdWithHttpInfo();
        }

        /**
         * Execute findById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<People> _callback) throws ApiException {
            return findByIdAsync(_callback);
        }
    }

    /**
     * Find a Person by ID
     * Get a single Person record by UUIDv4 identifier.
     * @return FindByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FindByIdRequestBuilder findById() throws IllegalArgumentException {
        return new FindByIdRequestBuilder();
    }
    private okhttp3.Call listAllPeopleCall(PeopleListAllPeopleFiltersParameter filters, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllPeopleValidateBeforeCall(PeopleListAllPeopleFiltersParameter filters, String sort, final ApiCallback _callback) throws ApiException {
        return listAllPeopleCall(filters, sort, _callback);

    }


    private ApiResponse<PeopleList> listAllPeopleWithHttpInfo(PeopleListAllPeopleFiltersParameter filters, String sort) throws ApiException {
        okhttp3.Call localVarCall = listAllPeopleValidateBeforeCall(filters, sort, null);
        Type localVarReturnType = new TypeToken<PeopleList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllPeopleAsync(PeopleListAllPeopleFiltersParameter filters, String sort, final ApiCallback<PeopleList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllPeopleValidateBeforeCall(filters, sort, _callback);
        Type localVarReturnType = new TypeToken<PeopleList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllPeopleRequestBuilder {
        private PeopleListAllPeopleFiltersParameter filters;
        private String sort;

        private ListAllPeopleRequestBuilder() {
        }

        /**
         * Set filters
         * @param filters Filters can be applied in the query string to limit the data returned from this endpoint. Filters are provided in the format &#x60;filters[&lt;filter_name&gt;][&lt;operation_type&gt;]&#x3D;&lt;filter_value&gt;&#x60;.For example, a filter to get items matching a specific filter value would be &#x60;filters[jobId][eq]&#x3D;dc996d73-a75e-499c-a96e-bd7d0df45f57,26d0ffc4-60f6-4672-a603-caaa4564af12&#x60;  Below is a list of operation types available on filters, note that each filter may not support every type:  • Equality &#x60;[eq]&#x60;: Checks for an exact match with the given filter value  The list of supported filters is given below. (optional)
         * @return ListAllPeopleRequestBuilder
         */
        public ListAllPeopleRequestBuilder filters(PeopleListAllPeopleFiltersParameter filters) {
            this.filters = filters;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sorting can be applied in the query string to order the data returned from this endpoint. Sort can be prepended with a minus to return the data in descending (-) order. For example, a sort to get the most recent records first would be &#x60;-createdAt&#x60;. (optional)
         * @return ListAllPeopleRequestBuilder
         */
        public ListAllPeopleRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for listAllPeople
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllPeopleCall(filters, sort, _callback);
        }


        /**
         * Execute listAllPeople request
         * @return PeopleList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public PeopleList execute() throws ApiException {
            ApiResponse<PeopleList> localVarResp = listAllPeopleWithHttpInfo(filters, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllPeople request with HTTP info returned
         * @return ApiResponse&lt;PeopleList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PeopleList> executeWithHttpInfo() throws ApiException {
            return listAllPeopleWithHttpInfo(filters, sort);
        }

        /**
         * Execute listAllPeople request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PeopleList> _callback) throws ApiException {
            return listAllPeopleAsync(filters, sort, _callback);
        }
    }

    /**
     * List all people
     * Returns a list of all [People](https://developers.intellihr.io/docs/v1/) as at the current date.
     * @return ListAllPeopleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListAllPeopleRequestBuilder listAllPeople() throws IllegalArgumentException {
        return new ListAllPeopleRequestBuilder();
    }
    private okhttp3.Call updatePersonByIdCall(PeopleUpdateRequest peopleUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = peopleUpdateRequest;

        // create path and map variables
        String localVarPath = "/people/{id}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePersonByIdValidateBeforeCall(PeopleUpdateRequest peopleUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'peopleUpdateRequest' is set
        if (peopleUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'peopleUpdateRequest' when calling updatePersonById(Async)");
        }

        return updatePersonByIdCall(peopleUpdateRequest, _callback);

    }


    private ApiResponse<People> updatePersonByIdWithHttpInfo(PeopleUpdateRequest peopleUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePersonByIdValidateBeforeCall(peopleUpdateRequest, null);
        Type localVarReturnType = new TypeToken<People>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePersonByIdAsync(PeopleUpdateRequest peopleUpdateRequest, final ApiCallback<People> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePersonByIdValidateBeforeCall(peopleUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<People>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePersonByIdRequestBuilder {
        private Object title;
        private Object firstName;
        private Object middleName;
        private String lastName;
        private Object preferredName;
        private Object dateOfBirth;
        private String gender;
        private Object employeeNumber;
        private PeopleUpdateRequestEmergencyContact emergencyContact;
        private List<PeopleUpdateRequestEmailAddressesInner> emailAddresses;
        private List<PeopleUpdateRequestPhoneNumbersInner> phoneNumbers;
        private List<PeopleUpdateRequestAddressesInner> addresses;
        private Map<String, BusinessEntitiesPatchRequestCustomFieldsValue> customFields;
        private List<PeopleUpdateRequestMedicalConditionsInner> medicalConditions;
        private Object workRight;
        private Object workRightExpiryDate;

        private UpdatePersonByIdRequestBuilder() {
        }

        /**
         * Set title
         * @param title  (optional)
         * @return UpdatePersonByIdRequestBuilder
         */
        public UpdatePersonByIdRequestBuilder title(Object title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName  (optional)
         * @return UpdatePersonByIdRequestBuilder
         */
        public UpdatePersonByIdRequestBuilder firstName(Object firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set middleName
         * @param middleName  (optional)
         * @return UpdatePersonByIdRequestBuilder
         */
        public UpdatePersonByIdRequestBuilder middleName(Object middleName) {
            this.middleName = middleName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName The [Person&#39;s](https://developers.intellihr.io/docs/v1/) Last Name. (optional)
         * @return UpdatePersonByIdRequestBuilder
         */
        public UpdatePersonByIdRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set preferredName
         * @param preferredName  (optional)
         * @return UpdatePersonByIdRequestBuilder
         */
        public UpdatePersonByIdRequestBuilder preferredName(Object preferredName) {
            this.preferredName = preferredName;
            return this;
        }
        
        /**
         * Set dateOfBirth
         * @param dateOfBirth  (optional)
         * @return UpdatePersonByIdRequestBuilder
         */
        public UpdatePersonByIdRequestBuilder dateOfBirth(Object dateOfBirth) {
            this.dateOfBirth = dateOfBirth;
            return this;
        }
        
        /**
         * Set gender
         * @param gender Human readable string for the [Person&#39;s](https://developers.intellihr.io/docs/v1/) gender, e.g. &#x60;Male&#x60;. Searching is done case-insensitively and &#39;starts-with&#39; e.g. passing &#x60;male&#x60; will match with a [Gender](https://developers.intellihr.io/docs/v1/) called \\\&quot;Male\\\&quot; as will \\\&quot;m\\\&quot; or \\\&quot;M\\\&quot;. If multiple [Genders](https://developers.intellihr.io/docs/v1/) match the first will be chosen. The gender options available are: &#x60;Female&#x60;, &#x60;Male&#x60;, &#x60;Non-binary&#x60;, &#x60;Other&#x60;, &#x60;Undisclosed&#x60;. (optional, default to Other)
         * @return UpdatePersonByIdRequestBuilder
         */
        public UpdatePersonByIdRequestBuilder gender(String gender) {
            this.gender = gender;
            return this;
        }
        
        /**
         * Set employeeNumber
         * @param employeeNumber  (optional)
         * @return UpdatePersonByIdRequestBuilder
         */
        public UpdatePersonByIdRequestBuilder employeeNumber(Object employeeNumber) {
            this.employeeNumber = employeeNumber;
            return this;
        }
        
        /**
         * Set emergencyContact
         * @param emergencyContact  (optional)
         * @return UpdatePersonByIdRequestBuilder
         */
        public UpdatePersonByIdRequestBuilder emergencyContact(PeopleUpdateRequestEmergencyContact emergencyContact) {
            this.emergencyContact = emergencyContact;
            return this;
        }
        
        /**
         * Set emailAddresses
         * @param emailAddresses Information about this [Person&#39;s](https://developers.intellihr.io/docs/v1/) email addresses. This will replace all of their current emails. The provided email addresses will be converted to lowercase. Note that a [Person](https://developers.intellihr.io/docs/v1/) must have at least one primary email address. (optional)
         * @return UpdatePersonByIdRequestBuilder
         */
        public UpdatePersonByIdRequestBuilder emailAddresses(List<PeopleUpdateRequestEmailAddressesInner> emailAddresses) {
            this.emailAddresses = emailAddresses;
            return this;
        }
        
        /**
         * Set phoneNumbers
         * @param phoneNumbers Information about this [Person&#39;s](https://developers.intellihr.io/docs/v1/) phone numbers. This will replace all of their current phone numbers. Note that a [Person](https://developers.intellihr.io/docs/v1/) must have at least one primary phone number. (optional)
         * @return UpdatePersonByIdRequestBuilder
         */
        public UpdatePersonByIdRequestBuilder phoneNumbers(List<PeopleUpdateRequestPhoneNumbersInner> phoneNumbers) {
            this.phoneNumbers = phoneNumbers;
            return this;
        }
        
        /**
         * Set addresses
         * @param addresses Information about this [Person&#39;s](https://developers.intellihr.io/docs/v1/) addresses. This will replace all of their current addresses. (optional)
         * @return UpdatePersonByIdRequestBuilder
         */
        public UpdatePersonByIdRequestBuilder addresses(List<PeopleUpdateRequestAddressesInner> addresses) {
            this.addresses = addresses;
            return this;
        }
        
        /**
         * Set customFields
         * @param customFields The custom field values for this [Person](https://developers.intellihr.io/docs/v1/) (optional)
         * @return UpdatePersonByIdRequestBuilder
         */
        public UpdatePersonByIdRequestBuilder customFields(Map<String, BusinessEntitiesPatchRequestCustomFieldsValue> customFields) {
            this.customFields = customFields;
            return this;
        }
        
        /**
         * Set medicalConditions
         * @param medicalConditions The medical conditions that this person has (optional)
         * @return UpdatePersonByIdRequestBuilder
         */
        public UpdatePersonByIdRequestBuilder medicalConditions(List<PeopleUpdateRequestMedicalConditionsInner> medicalConditions) {
            this.medicalConditions = medicalConditions;
            return this;
        }
        
        /**
         * Set workRight
         * @param workRight  (optional)
         * @return UpdatePersonByIdRequestBuilder
         */
        public UpdatePersonByIdRequestBuilder workRight(Object workRight) {
            this.workRight = workRight;
            return this;
        }
        
        /**
         * Set workRightExpiryDate
         * @param workRightExpiryDate  (optional)
         * @return UpdatePersonByIdRequestBuilder
         */
        public UpdatePersonByIdRequestBuilder workRightExpiryDate(Object workRightExpiryDate) {
            this.workRightExpiryDate = workRightExpiryDate;
            return this;
        }
        
        /**
         * Build call for updatePersonById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PeopleUpdateRequest peopleUpdateRequest = buildBodyParams();
            return updatePersonByIdCall(peopleUpdateRequest, _callback);
        }

        private PeopleUpdateRequest buildBodyParams() {
            PeopleUpdateRequest peopleUpdateRequest = new PeopleUpdateRequest();
            peopleUpdateRequest.title(this.title);
            peopleUpdateRequest.firstName(this.firstName);
            peopleUpdateRequest.middleName(this.middleName);
            peopleUpdateRequest.lastName(this.lastName);
            peopleUpdateRequest.preferredName(this.preferredName);
            peopleUpdateRequest.dateOfBirth(this.dateOfBirth);
            peopleUpdateRequest.gender(this.gender);
            peopleUpdateRequest.employeeNumber(this.employeeNumber);
            peopleUpdateRequest.emergencyContact(this.emergencyContact);
            peopleUpdateRequest.emailAddresses(this.emailAddresses);
            peopleUpdateRequest.phoneNumbers(this.phoneNumbers);
            peopleUpdateRequest.addresses(this.addresses);
            peopleUpdateRequest.customFields(this.customFields);
            peopleUpdateRequest.medicalConditions(this.medicalConditions);
            peopleUpdateRequest.workRight(this.workRight);
            peopleUpdateRequest.workRightExpiryDate(this.workRightExpiryDate);
            return peopleUpdateRequest;
        }

        /**
         * Execute updatePersonById request
         * @return People
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public People execute() throws ApiException {
            PeopleUpdateRequest peopleUpdateRequest = buildBodyParams();
            ApiResponse<People> localVarResp = updatePersonByIdWithHttpInfo(peopleUpdateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePersonById request with HTTP info returned
         * @return ApiResponse&lt;People&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<People> executeWithHttpInfo() throws ApiException {
            PeopleUpdateRequest peopleUpdateRequest = buildBodyParams();
            return updatePersonByIdWithHttpInfo(peopleUpdateRequest);
        }

        /**
         * Execute updatePersonById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<People> _callback) throws ApiException {
            PeopleUpdateRequest peopleUpdateRequest = buildBodyParams();
            return updatePersonByIdAsync(peopleUpdateRequest, _callback);
        }
    }

    /**
     * 
     * Update a person
     * @param peopleUpdateRequest  (required)
     * @return UpdatePersonByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePersonByIdRequestBuilder updatePersonById() throws IllegalArgumentException {
        return new UpdatePersonByIdRequestBuilder();
    }
}
