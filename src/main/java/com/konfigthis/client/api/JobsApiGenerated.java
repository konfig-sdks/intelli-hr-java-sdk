/*
 * intelliHR Public API
 * You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)
 *
 * The version of the OpenAPI document: V1
 * Contact: support@intellihr.co
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BusinessEntitiesCreateRequestCustomFieldsValue;
import com.konfigthis.client.model.BusinessEntitiesPatchRequestCustomFieldsValue;
import com.konfigthis.client.model.JobCreateRequest;
import com.konfigthis.client.model.JobCreateRequestBusinessEntity;
import com.konfigthis.client.model.JobCreateRequestBusinessUnit;
import com.konfigthis.client.model.JobCreateRequestEmploymentCondition;
import com.konfigthis.client.model.JobCreateRequestEstablishment;
import com.konfigthis.client.model.JobCreateRequestLocation;
import com.konfigthis.client.model.JobCreateRequestPayGrade;
import com.konfigthis.client.model.JobCreateRequestPerson;
import com.konfigthis.client.model.JobCreateRequestRecruitment;
import com.konfigthis.client.model.JobCreateRequestRemunerationSchedule;
import com.konfigthis.client.model.JobCreateRequestSupervisorJob;
import com.konfigthis.client.model.JobCreateRequestSupervisorPerson;
import com.konfigthis.client.model.JobCreateRequestWorkClass;
import com.konfigthis.client.model.JobCreateRequestWorkType;
import com.konfigthis.client.model.JobCreateResponse;
import com.konfigthis.client.model.JobPatchRequest;
import com.konfigthis.client.model.JobPatchRequestBusinessEntity;
import com.konfigthis.client.model.JobPatchRequestBusinessUnit;
import com.konfigthis.client.model.JobPatchRequestEmploymentCondition;
import com.konfigthis.client.model.JobPatchRequestEstablishment;
import com.konfigthis.client.model.JobPatchRequestJobChangeReason;
import com.konfigthis.client.model.JobPatchRequestLocation;
import com.konfigthis.client.model.JobPatchRequestPayGrade;
import com.konfigthis.client.model.JobPatchRequestRemunerationSchedule;
import com.konfigthis.client.model.JobPatchRequestSupervisorJob;
import com.konfigthis.client.model.JobPatchRequestSupervisorPerson;
import com.konfigthis.client.model.JobPatchRequestWorkClass;
import com.konfigthis.client.model.JobPatchRequestWorkType;
import com.konfigthis.client.model.JobPatchResponse;
import com.konfigthis.client.model.Jobs;
import com.konfigthis.client.model.JobsGetAllFiltersParameter;
import com.konfigthis.client.model.JobsList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class JobsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JobsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public JobsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createRecordCall(JobCreateRequest jobCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jobCreateRequest;

        // create path and map variables
        String localVarPath = "/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRecordValidateBeforeCall(JobCreateRequest jobCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobCreateRequest' is set
        if (jobCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'jobCreateRequest' when calling createRecord(Async)");
        }

        return createRecordCall(jobCreateRequest, _callback);

    }


    private ApiResponse<JobCreateResponse> createRecordWithHttpInfo(JobCreateRequest jobCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createRecordValidateBeforeCall(jobCreateRequest, null);
        Type localVarReturnType = new TypeToken<JobCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createRecordAsync(JobCreateRequest jobCreateRequest, final ApiCallback<JobCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRecordValidateBeforeCall(jobCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<JobCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRecordRequestBuilder {
        private final JobCreateRequestPerson person;
        private final String companyStartDate;
        private final String name;
        private final JobCreateRequestBusinessEntity businessEntity;
        private final JobCreateRequestBusinessUnit businessUnit;
        private final JobCreateRequestWorkClass workClass;
        private String companyEndDate;
        private String startDate;
        private String endDate;
        private JobCreateRequestEstablishment establishment;
        private JobCreateRequestSupervisorPerson supervisorPerson;
        private JobCreateRequestSupervisorJob supervisorJob;
        private JobCreateRequestLocation location;
        private JobCreateRequestWorkType workType;
        private String fte;
        private JobCreateRequestPayGrade payGrade;
        private JobCreateRequestEmploymentCondition employmentCondition;
        private JobCreateRequestRemunerationSchedule remunerationSchedule;
        private JobCreateRequestRecruitment recruitment;
        private Map<String, BusinessEntitiesCreateRequestCustomFieldsValue> customFields;

        private CreateRecordRequestBuilder(JobCreateRequestPerson person, String companyStartDate, String name, JobCreateRequestBusinessEntity businessEntity, JobCreateRequestBusinessUnit businessUnit, JobCreateRequestWorkClass workClass) {
            this.person = person;
            this.companyStartDate = companyStartDate;
            this.name = name;
            this.businessEntity = businessEntity;
            this.businessUnit = businessUnit;
            this.workClass = workClass;
        }

        /**
         * Set companyEndDate
         * @param companyEndDate The &lt;b&gt;exclusive&lt;/b&gt; date this [Job](https://developers.intellihr.io/docs/v1/) ended or will end within the organisation. For example, if the person&#39;s last working date is on 2025-04-23, the &#x60;companyEndDate&#x60; should be set as 2025-04-24 to reflect the exclusive date. This date will follow the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.6).   YYYY-MM-DD date formatting is also supported, although by using this format the date will be stored as the start of day in UTC time, not the requesting tenants timezone. (optional)
         * @return CreateRecordRequestBuilder
         */
        public CreateRecordRequestBuilder companyEndDate(String companyEndDate) {
            this.companyEndDate = companyEndDate;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate The date this [Job](https://developers.intellihr.io/docs/v1/) started or will start within the organisation. This date will follow the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.6).   YYYY-MM-DD date formatting is also supported, although by using this format the date will be stored as the start of day in UTC time, not the requesting tenants timezone. (optional)
         * @return CreateRecordRequestBuilder
         */
        public CreateRecordRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate The &lt;b&gt;exclusive&lt;/b&gt; date this [Job](https://developers.intellihr.io/docs/v1/) ended or will end within the organisation. For example, if the person&#39;s last working date is on 2025-04-23, the &#x60;endDate&#x60; should be set as 2025-04-24 to reflect the exclusive date. This date will follow the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.6).   YYYY-MM-DD date formatting is also supported, although by using this format the date will be stored as the start of day in UTC time, not the requesting tenants timezone. (optional)
         * @return CreateRecordRequestBuilder
         */
        public CreateRecordRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set establishment
         * @param establishment  (optional)
         * @return CreateRecordRequestBuilder
         */
        public CreateRecordRequestBuilder establishment(JobCreateRequestEstablishment establishment) {
            this.establishment = establishment;
            return this;
        }
        
        /**
         * Set supervisorPerson
         * @param supervisorPerson  (optional)
         * @return CreateRecordRequestBuilder
         */
        public CreateRecordRequestBuilder supervisorPerson(JobCreateRequestSupervisorPerson supervisorPerson) {
            this.supervisorPerson = supervisorPerson;
            return this;
        }
        
        /**
         * Set supervisorJob
         * @param supervisorJob  (optional)
         * @return CreateRecordRequestBuilder
         */
        public CreateRecordRequestBuilder supervisorJob(JobCreateRequestSupervisorJob supervisorJob) {
            this.supervisorJob = supervisorJob;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return CreateRecordRequestBuilder
         */
        public CreateRecordRequestBuilder location(JobCreateRequestLocation location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set workType
         * @param workType  (optional)
         * @return CreateRecordRequestBuilder
         */
        public CreateRecordRequestBuilder workType(JobCreateRequestWorkType workType) {
            this.workType = workType;
            return this;
        }
        
        /**
         * Set fte
         * @param fte The full time equivalent of this [Job](https://developers.intellihr.io/docs/v1/). Indicating the workload of an employee that can be comparable across different contexts. This is null for people without an FTE. (optional)
         * @return CreateRecordRequestBuilder
         */
        public CreateRecordRequestBuilder fte(String fte) {
            this.fte = fte;
            return this;
        }
        
        /**
         * Set payGrade
         * @param payGrade  (optional)
         * @return CreateRecordRequestBuilder
         */
        public CreateRecordRequestBuilder payGrade(JobCreateRequestPayGrade payGrade) {
            this.payGrade = payGrade;
            return this;
        }
        
        /**
         * Set employmentCondition
         * @param employmentCondition  (optional)
         * @return CreateRecordRequestBuilder
         */
        public CreateRecordRequestBuilder employmentCondition(JobCreateRequestEmploymentCondition employmentCondition) {
            this.employmentCondition = employmentCondition;
            return this;
        }
        
        /**
         * Set remunerationSchedule
         * @param remunerationSchedule  (optional)
         * @return CreateRecordRequestBuilder
         */
        public CreateRecordRequestBuilder remunerationSchedule(JobCreateRequestRemunerationSchedule remunerationSchedule) {
            this.remunerationSchedule = remunerationSchedule;
            return this;
        }
        
        /**
         * Set recruitment
         * @param recruitment  (optional)
         * @return CreateRecordRequestBuilder
         */
        public CreateRecordRequestBuilder recruitment(JobCreateRequestRecruitment recruitment) {
            this.recruitment = recruitment;
            return this;
        }
        
        /**
         * Set customFields
         * @param customFields The custom field values for this Job (optional)
         * @return CreateRecordRequestBuilder
         */
        public CreateRecordRequestBuilder customFields(Map<String, BusinessEntitiesCreateRequestCustomFieldsValue> customFields) {
            this.customFields = customFields;
            return this;
        }
        
        /**
         * Build call for createRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            JobCreateRequest jobCreateRequest = buildBodyParams();
            return createRecordCall(jobCreateRequest, _callback);
        }

        private JobCreateRequest buildBodyParams() {
            JobCreateRequest jobCreateRequest = new JobCreateRequest();
            jobCreateRequest.person(this.person);
            jobCreateRequest.companyStartDate(this.companyStartDate);
            jobCreateRequest.companyEndDate(this.companyEndDate);
            jobCreateRequest.startDate(this.startDate);
            jobCreateRequest.endDate(this.endDate);
            jobCreateRequest.name(this.name);
            jobCreateRequest.businessEntity(this.businessEntity);
            jobCreateRequest.businessUnit(this.businessUnit);
            jobCreateRequest.establishment(this.establishment);
            jobCreateRequest.supervisorPerson(this.supervisorPerson);
            jobCreateRequest.supervisorJob(this.supervisorJob);
            jobCreateRequest.location(this.location);
            jobCreateRequest.workClass(this.workClass);
            jobCreateRequest.workType(this.workType);
            jobCreateRequest.fte(this.fte);
            jobCreateRequest.payGrade(this.payGrade);
            jobCreateRequest.employmentCondition(this.employmentCondition);
            jobCreateRequest.remunerationSchedule(this.remunerationSchedule);
            jobCreateRequest.recruitment(this.recruitment);
            jobCreateRequest.customFields(this.customFields);
            return jobCreateRequest;
        }

        /**
         * Execute createRecord request
         * @return JobCreateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public JobCreateResponse execute() throws ApiException {
            JobCreateRequest jobCreateRequest = buildBodyParams();
            ApiResponse<JobCreateResponse> localVarResp = createRecordWithHttpInfo(jobCreateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createRecord request with HTTP info returned
         * @return ApiResponse&lt;JobCreateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobCreateResponse> executeWithHttpInfo() throws ApiException {
            JobCreateRequest jobCreateRequest = buildBodyParams();
            return createRecordWithHttpInfo(jobCreateRequest);
        }

        /**
         * Execute createRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobCreateResponse> _callback) throws ApiException {
            JobCreateRequest jobCreateRequest = buildBodyParams();
            return createRecordAsync(jobCreateRequest, _callback);
        }
    }

    /**
     * Create a new Job
     * Create a new Job record with the provided data.
     * @param jobCreateRequest  (required)
     * @return CreateRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateRecordRequestBuilder createRecord(JobCreateRequestPerson person, String companyStartDate, String name, JobCreateRequestBusinessEntity businessEntity, JobCreateRequestBusinessUnit businessUnit, JobCreateRequestWorkClass workClass) throws IllegalArgumentException {
        if (person == null) throw new IllegalArgumentException("\"person\" is required but got null");
        if (companyStartDate == null) throw new IllegalArgumentException("\"companyStartDate\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (businessEntity == null) throw new IllegalArgumentException("\"businessEntity\" is required but got null");
        if (businessUnit == null) throw new IllegalArgumentException("\"businessUnit\" is required but got null");
        if (workClass == null) throw new IllegalArgumentException("\"workClass\" is required but got null");
        return new CreateRecordRequestBuilder(person, companyStartDate, name, businessEntity, businessUnit, workClass);
    }
    private okhttp3.Call findByIdCall(String asAt, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{id}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findByIdValidateBeforeCall(String asAt, final ApiCallback _callback) throws ApiException {
        return findByIdCall(asAt, _callback);

    }


    private ApiResponse<Jobs> findByIdWithHttpInfo(String asAt) throws ApiException {
        okhttp3.Call localVarCall = findByIdValidateBeforeCall(asAt, null);
        Type localVarReturnType = new TypeToken<Jobs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findByIdAsync(String asAt, final ApiCallback<Jobs> _callback) throws ApiException {

        okhttp3.Call localVarCall = findByIdValidateBeforeCall(asAt, _callback);
        Type localVarReturnType = new TypeToken<Jobs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindByIdRequestBuilder {
        private String asAt;

        private FindByIdRequestBuilder() {
        }

        /**
         * Set asAt
         * @param asAt Used to configure what date to return this job data for, as a [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.6) datetime.   All data returned from the job endpoints represent the values of the Person&#39;s job attributes at a specific point in time.   By default, the current datetime is used, but this parameter can be used to configure a different datetime to see historical data. (optional)
         * @return FindByIdRequestBuilder
         */
        public FindByIdRequestBuilder asAt(String asAt) {
            this.asAt = asAt;
            return this;
        }
        
        /**
         * Build call for findById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findByIdCall(asAt, _callback);
        }


        /**
         * Execute findById request
         * @return Jobs
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Jobs execute() throws ApiException {
            ApiResponse<Jobs> localVarResp = findByIdWithHttpInfo(asAt);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findById request with HTTP info returned
         * @return ApiResponse&lt;Jobs&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Jobs> executeWithHttpInfo() throws ApiException {
            return findByIdWithHttpInfo(asAt);
        }

        /**
         * Execute findById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Jobs> _callback) throws ApiException {
            return findByIdAsync(asAt, _callback);
        }
    }

    /**
     * Find a Job by ID
     * Get a single Job record by UUIDv4 identifier.
     * @return FindByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FindByIdRequestBuilder findById() throws IllegalArgumentException {
        return new FindByIdRequestBuilder();
    }
    private okhttp3.Call getAllCall(JobsGetAllFiltersParameter filters, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(JobsGetAllFiltersParameter filters, String sort, final ApiCallback _callback) throws ApiException {
        return getAllCall(filters, sort, _callback);

    }


    private ApiResponse<JobsList> getAllWithHttpInfo(JobsGetAllFiltersParameter filters, String sort) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(filters, sort, null);
        Type localVarReturnType = new TypeToken<JobsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(JobsGetAllFiltersParameter filters, String sort, final ApiCallback<JobsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(filters, sort, _callback);
        Type localVarReturnType = new TypeToken<JobsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private JobsGetAllFiltersParameter filters;
        private String sort;

        private GetAllRequestBuilder() {
        }

        /**
         * Set filters
         * @param filters Filters can be applied in the query string to limit the data returned from this endpoint. Filters are provided in the format &#x60;filters[&lt;filter_name&gt;][&lt;operation_type&gt;]&#x3D;&lt;filter_value&gt;&#x60;.For example, a filter to get items matching a specific filter value would be &#x60;filters[personId][eq]&#x3D;dc996d73-a75e-499c-a96e-bd7d0df45f57,26d0ffc4-60f6-4672-a603-caaa4564af12&#x60;  Below is a list of operation types available on filters, note that each filter may not support every type:  • Equality &#x60;[eq]&#x60;: Checks for an exact match with the given filter value  The list of supported filters is given below. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder filters(JobsGetAllFiltersParameter filters) {
            this.filters = filters;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sorting can be applied in the query string to order the data returned from this endpoint. Sort can be prepended with a minus to return the data in descending (-) order. For example, a sort to get the most recent records first would be &#x60;-createdAt&#x60;. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(filters, sort, _callback);
        }


        /**
         * Execute getAll request
         * @return JobsList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public JobsList execute() throws ApiException {
            ApiResponse<JobsList> localVarResp = getAllWithHttpInfo(filters, sort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;JobsList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobsList> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(filters, sort);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobsList> _callback) throws ApiException {
            return getAllAsync(filters, sort, _callback);
        }
    }

    /**
     * List all Jobs
     * Returns a list of all [Job](https://developers.intellihr.io/docs/v1/) entity records as at the current date.
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll() throws IllegalArgumentException {
        return new GetAllRequestBuilder();
    }
    private okhttp3.Call updateAttributesCall(JobPatchRequest jobPatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jobPatchRequest;

        // create path and map variables
        String localVarPath = "/jobs/{id}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAttributesValidateBeforeCall(JobPatchRequest jobPatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobPatchRequest' is set
        if (jobPatchRequest == null) {
            throw new ApiException("Missing the required parameter 'jobPatchRequest' when calling updateAttributes(Async)");
        }

        return updateAttributesCall(jobPatchRequest, _callback);

    }


    private ApiResponse<JobPatchResponse> updateAttributesWithHttpInfo(JobPatchRequest jobPatchRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAttributesValidateBeforeCall(jobPatchRequest, null);
        Type localVarReturnType = new TypeToken<JobPatchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAttributesAsync(JobPatchRequest jobPatchRequest, final ApiCallback<JobPatchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAttributesValidateBeforeCall(jobPatchRequest, _callback);
        Type localVarReturnType = new TypeToken<JobPatchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateAttributesRequestBuilder {
        private final Object effectiveFrom;
        private String effectiveTo;
        private String name;
        private JobPatchRequestBusinessEntity businessEntity;
        private JobPatchRequestBusinessUnit businessUnit;
        private JobPatchRequestEstablishment establishment;
        private JobPatchRequestJobChangeReason jobChangeReason;
        private JobPatchRequestSupervisorPerson supervisorPerson;
        private JobPatchRequestSupervisorJob supervisorJob;
        private JobPatchRequestLocation location;
        private JobPatchRequestWorkClass workClass;
        private JobPatchRequestWorkType workType;
        private String fte;
        private JobPatchRequestPayGrade payGrade;
        private JobPatchRequestEmploymentCondition employmentCondition;
        private JobPatchRequestRemunerationSchedule remunerationSchedule;
        private Map<String, BusinessEntitiesPatchRequestCustomFieldsValue> customFields;

        private UpdateAttributesRequestBuilder(Object effectiveFrom) {
            this.effectiveFrom = effectiveFrom;
        }

        /**
         * Set effectiveTo
         * @param effectiveTo The date this [Job](https://developers.intellihr.io/docs/v1/) Update is effective to within the organisation. Note that this doesn&#39;t affect the end date of the overall job itself. This date will follow the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.6).   YYYY-MM-DD date formatting is also supported, although by using this format the date will be stored as the start of day in UTC time, not the requesting tenants timezone. (optional)
         * @return UpdateAttributesRequestBuilder
         */
        public UpdateAttributesRequestBuilder effectiveTo(String effectiveTo) {
            this.effectiveTo = effectiveTo;
            return this;
        }
        
        /**
         * Set name
         * @param name The job name to be updated. Will attempt to match to an existing [Position Title](https://developers.intellihr.io/docs/v1/), otherwise creates a new [Position Title](https://developers.intellihr.io/docs/v1/). (optional)
         * @return UpdateAttributesRequestBuilder
         */
        public UpdateAttributesRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set businessEntity
         * @param businessEntity  (optional)
         * @return UpdateAttributesRequestBuilder
         */
        public UpdateAttributesRequestBuilder businessEntity(JobPatchRequestBusinessEntity businessEntity) {
            this.businessEntity = businessEntity;
            return this;
        }
        
        /**
         * Set businessUnit
         * @param businessUnit  (optional)
         * @return UpdateAttributesRequestBuilder
         */
        public UpdateAttributesRequestBuilder businessUnit(JobPatchRequestBusinessUnit businessUnit) {
            this.businessUnit = businessUnit;
            return this;
        }
        
        /**
         * Set establishment
         * @param establishment  (optional)
         * @return UpdateAttributesRequestBuilder
         */
        public UpdateAttributesRequestBuilder establishment(JobPatchRequestEstablishment establishment) {
            this.establishment = establishment;
            return this;
        }
        
        /**
         * Set jobChangeReason
         * @param jobChangeReason  (optional)
         * @return UpdateAttributesRequestBuilder
         */
        public UpdateAttributesRequestBuilder jobChangeReason(JobPatchRequestJobChangeReason jobChangeReason) {
            this.jobChangeReason = jobChangeReason;
            return this;
        }
        
        /**
         * Set supervisorPerson
         * @param supervisorPerson  (optional)
         * @return UpdateAttributesRequestBuilder
         */
        public UpdateAttributesRequestBuilder supervisorPerson(JobPatchRequestSupervisorPerson supervisorPerson) {
            this.supervisorPerson = supervisorPerson;
            return this;
        }
        
        /**
         * Set supervisorJob
         * @param supervisorJob  (optional)
         * @return UpdateAttributesRequestBuilder
         */
        public UpdateAttributesRequestBuilder supervisorJob(JobPatchRequestSupervisorJob supervisorJob) {
            this.supervisorJob = supervisorJob;
            return this;
        }
        
        /**
         * Set location
         * @param location  (optional)
         * @return UpdateAttributesRequestBuilder
         */
        public UpdateAttributesRequestBuilder location(JobPatchRequestLocation location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set workClass
         * @param workClass  (optional)
         * @return UpdateAttributesRequestBuilder
         */
        public UpdateAttributesRequestBuilder workClass(JobPatchRequestWorkClass workClass) {
            this.workClass = workClass;
            return this;
        }
        
        /**
         * Set workType
         * @param workType  (optional)
         * @return UpdateAttributesRequestBuilder
         */
        public UpdateAttributesRequestBuilder workType(JobPatchRequestWorkType workType) {
            this.workType = workType;
            return this;
        }
        
        /**
         * Set fte
         * @param fte The full time equivalent of this [Job](https://developers.intellihr.io/docs/v1/). Indicating the workload of an employee that can be comparable across different contexts. This is null for people without an FTE. (optional)
         * @return UpdateAttributesRequestBuilder
         */
        public UpdateAttributesRequestBuilder fte(String fte) {
            this.fte = fte;
            return this;
        }
        
        /**
         * Set payGrade
         * @param payGrade  (optional)
         * @return UpdateAttributesRequestBuilder
         */
        public UpdateAttributesRequestBuilder payGrade(JobPatchRequestPayGrade payGrade) {
            this.payGrade = payGrade;
            return this;
        }
        
        /**
         * Set employmentCondition
         * @param employmentCondition  (optional)
         * @return UpdateAttributesRequestBuilder
         */
        public UpdateAttributesRequestBuilder employmentCondition(JobPatchRequestEmploymentCondition employmentCondition) {
            this.employmentCondition = employmentCondition;
            return this;
        }
        
        /**
         * Set remunerationSchedule
         * @param remunerationSchedule  (optional)
         * @return UpdateAttributesRequestBuilder
         */
        public UpdateAttributesRequestBuilder remunerationSchedule(JobPatchRequestRemunerationSchedule remunerationSchedule) {
            this.remunerationSchedule = remunerationSchedule;
            return this;
        }
        
        /**
         * Set customFields
         * @param customFields The custom field values for this Job (optional)
         * @return UpdateAttributesRequestBuilder
         */
        public UpdateAttributesRequestBuilder customFields(Map<String, BusinessEntitiesPatchRequestCustomFieldsValue> customFields) {
            this.customFields = customFields;
            return this;
        }
        
        /**
         * Build call for updateAttributes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            JobPatchRequest jobPatchRequest = buildBodyParams();
            return updateAttributesCall(jobPatchRequest, _callback);
        }

        private JobPatchRequest buildBodyParams() {
            JobPatchRequest jobPatchRequest = new JobPatchRequest();
            jobPatchRequest.effectiveFrom(this.effectiveFrom);
            jobPatchRequest.effectiveTo(this.effectiveTo);
            jobPatchRequest.name(this.name);
            jobPatchRequest.businessEntity(this.businessEntity);
            jobPatchRequest.businessUnit(this.businessUnit);
            jobPatchRequest.establishment(this.establishment);
            jobPatchRequest.jobChangeReason(this.jobChangeReason);
            jobPatchRequest.supervisorPerson(this.supervisorPerson);
            jobPatchRequest.supervisorJob(this.supervisorJob);
            jobPatchRequest.location(this.location);
            jobPatchRequest.workClass(this.workClass);
            jobPatchRequest.workType(this.workType);
            jobPatchRequest.fte(this.fte);
            jobPatchRequest.payGrade(this.payGrade);
            jobPatchRequest.employmentCondition(this.employmentCondition);
            jobPatchRequest.remunerationSchedule(this.remunerationSchedule);
            jobPatchRequest.customFields(this.customFields);
            return jobPatchRequest;
        }

        /**
         * Execute updateAttributes request
         * @return JobPatchResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public JobPatchResponse execute() throws ApiException {
            JobPatchRequest jobPatchRequest = buildBodyParams();
            ApiResponse<JobPatchResponse> localVarResp = updateAttributesWithHttpInfo(jobPatchRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateAttributes request with HTTP info returned
         * @return ApiResponse&lt;JobPatchResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobPatchResponse> executeWithHttpInfo() throws ApiException {
            JobPatchRequest jobPatchRequest = buildBodyParams();
            return updateAttributesWithHttpInfo(jobPatchRequest);
        }

        /**
         * Execute updateAttributes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobPatchResponse> _callback) throws ApiException {
            JobPatchRequest jobPatchRequest = buildBodyParams();
            return updateAttributesAsync(jobPatchRequest, _callback);
        }
    }

    /**
     * Patch an existing Job
     * Patch attributes of an existing Job record with the provided data.
     * @param jobPatchRequest  (required)
     * @return UpdateAttributesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAttributesRequestBuilder updateAttributes(Object effectiveFrom) throws IllegalArgumentException {
        
        return new UpdateAttributesRequestBuilder(effectiveFrom);
    }
}
