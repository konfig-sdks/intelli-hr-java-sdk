/*
 * intelliHR Public API
 * You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)
 *
 * The version of the OpenAPI document: V1
 * Contact: support@intellihr.co
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PersonId;
import com.konfigthis.client.model.PersonIdCreateRequest;
import com.konfigthis.client.model.PersonIdList;
import com.konfigthis.client.model.PersonIdPatchRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PeopleSkillsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PeopleSkillsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PeopleSkillsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call assignSkillToPersonCall(String personId, PersonIdCreateRequest personIdCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = personIdCreateRequest;

        // create path and map variables
        String localVarPath = "/people/{personId}/skills"
            .replace("{" + "personId" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignSkillToPersonValidateBeforeCall(String personId, PersonIdCreateRequest personIdCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling assignSkillToPerson(Async)");
        }

        // verify the required parameter 'personIdCreateRequest' is set
        if (personIdCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'personIdCreateRequest' when calling assignSkillToPerson(Async)");
        }

        return assignSkillToPersonCall(personId, personIdCreateRequest, _callback);

    }


    private ApiResponse<PersonId> assignSkillToPersonWithHttpInfo(String personId, PersonIdCreateRequest personIdCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = assignSkillToPersonValidateBeforeCall(personId, personIdCreateRequest, null);
        Type localVarReturnType = new TypeToken<PersonId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call assignSkillToPersonAsync(String personId, PersonIdCreateRequest personIdCreateRequest, final ApiCallback<PersonId> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignSkillToPersonValidateBeforeCall(personId, personIdCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<PersonId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AssignSkillToPersonRequestBuilder {
        private final String skillId;
        private final String skillLevel;
        private final String personId;

        private AssignSkillToPersonRequestBuilder(String skillId, String skillLevel, String personId) {
            this.skillId = skillId;
            this.skillLevel = skillLevel;
            this.personId = personId;
        }

        /**
         * Build call for assignSkillToPerson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PersonIdCreateRequest personIdCreateRequest = buildBodyParams();
            return assignSkillToPersonCall(personId, personIdCreateRequest, _callback);
        }

        private PersonIdCreateRequest buildBodyParams() {
            PersonIdCreateRequest personIdCreateRequest = new PersonIdCreateRequest();
            personIdCreateRequest.skillId(this.skillId);
            personIdCreateRequest.skillLevel(this.skillLevel);
            return personIdCreateRequest;
        }

        /**
         * Execute assignSkillToPerson request
         * @return PersonId
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public PersonId execute() throws ApiException {
            PersonIdCreateRequest personIdCreateRequest = buildBodyParams();
            ApiResponse<PersonId> localVarResp = assignSkillToPersonWithHttpInfo(personId, personIdCreateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute assignSkillToPerson request with HTTP info returned
         * @return ApiResponse&lt;PersonId&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonId> executeWithHttpInfo() throws ApiException {
            PersonIdCreateRequest personIdCreateRequest = buildBodyParams();
            return assignSkillToPersonWithHttpInfo(personId, personIdCreateRequest);
        }

        /**
         * Execute assignSkillToPerson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonId> _callback) throws ApiException {
            PersonIdCreateRequest personIdCreateRequest = buildBodyParams();
            return assignSkillToPersonAsync(personId, personIdCreateRequest, _callback);
        }
    }

    /**
     * Assign a Skill to a Person
     * Assigns a [Skill](https://developers.intellihr.io/docs/v1/) to an existing [Person](https://developers.intellihr.io/docs/v1/)
     * @param personId Id string param for relevant [Person](https://developers.intellihr.io/docs/v1/) (required)
     * @param personIdCreateRequest  (required)
     * @return AssignSkillToPersonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AssignSkillToPersonRequestBuilder assignSkillToPerson(String skillId, String skillLevel, String personId) throws IllegalArgumentException {
        if (skillId == null) throw new IllegalArgumentException("\"skillId\" is required but got null");
            if (skillId != null && skillId.length() < 36) {
              throw new IllegalArgumentException("Invalid value for skillId. Length must be greater than or equal to 36.");
            }

        if (skillLevel == null) throw new IllegalArgumentException("\"skillLevel\" is required but got null");
            

        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
            

        return new AssignSkillToPersonRequestBuilder(skillId, skillLevel, personId);
    }
    private okhttp3.Call deleteAssignedSkillByIdCall(String personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{personId}/skills/{id}"
            .replace("{" + "personId" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAssignedSkillByIdValidateBeforeCall(String personId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling deleteAssignedSkillById(Async)");
        }

        return deleteAssignedSkillByIdCall(personId, _callback);

    }


    private ApiResponse<Void> deleteAssignedSkillByIdWithHttpInfo(String personId) throws ApiException {
        okhttp3.Call localVarCall = deleteAssignedSkillByIdValidateBeforeCall(personId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAssignedSkillByIdAsync(String personId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAssignedSkillByIdValidateBeforeCall(personId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteAssignedSkillByIdRequestBuilder {
        private final String personId;

        private DeleteAssignedSkillByIdRequestBuilder(String personId) {
            this.personId = personId;
        }

        /**
         * Build call for deleteAssignedSkillById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAssignedSkillByIdCall(personId, _callback);
        }


        /**
         * Execute deleteAssignedSkillById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteAssignedSkillByIdWithHttpInfo(personId);
        }

        /**
         * Execute deleteAssignedSkillById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteAssignedSkillByIdWithHttpInfo(personId);
        }

        /**
         * Execute deleteAssignedSkillById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAssignedSkillByIdAsync(personId, _callback);
        }
    }

    /**
     * Delete an Assigned Skill by ID
     * Deletes the assigned [Skill](https://developers.intellihr.io/docs/v1/) from a [Person](https://developers.intellihr.io/docs/v1/).
     * @param personId Id string param for relevant [Person](https://developers.intellihr.io/docs/v1/) (required)
     * @return DeleteAssignedSkillByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAssignedSkillByIdRequestBuilder deleteAssignedSkillById(String personId) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
            

        return new DeleteAssignedSkillByIdRequestBuilder(personId);
    }
    private okhttp3.Call findSkillByIdCall(String personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{personId}/skills/{id}"
            .replace("{" + "personId" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findSkillByIdValidateBeforeCall(String personId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling findSkillById(Async)");
        }

        return findSkillByIdCall(personId, _callback);

    }


    private ApiResponse<PersonId> findSkillByIdWithHttpInfo(String personId) throws ApiException {
        okhttp3.Call localVarCall = findSkillByIdValidateBeforeCall(personId, null);
        Type localVarReturnType = new TypeToken<PersonId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findSkillByIdAsync(String personId, final ApiCallback<PersonId> _callback) throws ApiException {

        okhttp3.Call localVarCall = findSkillByIdValidateBeforeCall(personId, _callback);
        Type localVarReturnType = new TypeToken<PersonId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindSkillByIdRequestBuilder {
        private final String personId;

        private FindSkillByIdRequestBuilder(String personId) {
            this.personId = personId;
        }

        /**
         * Build call for findSkillById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findSkillByIdCall(personId, _callback);
        }


        /**
         * Execute findSkillById request
         * @return PersonId
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public PersonId execute() throws ApiException {
            ApiResponse<PersonId> localVarResp = findSkillByIdWithHttpInfo(personId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findSkillById request with HTTP info returned
         * @return ApiResponse&lt;PersonId&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonId> executeWithHttpInfo() throws ApiException {
            return findSkillByIdWithHttpInfo(personId);
        }

        /**
         * Execute findSkillById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonId> _callback) throws ApiException {
            return findSkillByIdAsync(personId, _callback);
        }
    }

    /**
     * Find a Person&#39;s Skill by ID
     * Returns a single [Skill](https://developers.intellihr.io/docs/v1/) for the provided [Person](https://developers.intellihr.io/docs/v1/).
     * @param personId Id string param for relevant [Person](https://developers.intellihr.io/docs/v1/) (required)
     * @return FindSkillByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FindSkillByIdRequestBuilder findSkillById(String personId) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
            

        return new FindSkillByIdRequestBuilder(personId);
    }
    private okhttp3.Call listPersonSkillsCall(String personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{personId}/skills"
            .replace("{" + "personId" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPersonSkillsValidateBeforeCall(String personId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling listPersonSkills(Async)");
        }

        return listPersonSkillsCall(personId, _callback);

    }


    private ApiResponse<PersonIdList> listPersonSkillsWithHttpInfo(String personId) throws ApiException {
        okhttp3.Call localVarCall = listPersonSkillsValidateBeforeCall(personId, null);
        Type localVarReturnType = new TypeToken<PersonIdList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPersonSkillsAsync(String personId, final ApiCallback<PersonIdList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPersonSkillsValidateBeforeCall(personId, _callback);
        Type localVarReturnType = new TypeToken<PersonIdList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPersonSkillsRequestBuilder {
        private final String personId;

        private ListPersonSkillsRequestBuilder(String personId) {
            this.personId = personId;
        }

        /**
         * Build call for listPersonSkills
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPersonSkillsCall(personId, _callback);
        }


        /**
         * Execute listPersonSkills request
         * @return PersonIdList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public PersonIdList execute() throws ApiException {
            ApiResponse<PersonIdList> localVarResp = listPersonSkillsWithHttpInfo(personId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPersonSkills request with HTTP info returned
         * @return ApiResponse&lt;PersonIdList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonIdList> executeWithHttpInfo() throws ApiException {
            return listPersonSkillsWithHttpInfo(personId);
        }

        /**
         * Execute listPersonSkills request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonIdList> _callback) throws ApiException {
            return listPersonSkillsAsync(personId, _callback);
        }
    }

    /**
     * List all Skills assigned to a Person
     * Returns a list of all [Skills](https://developers.intellihr.io/docs/v1/) for the provided [Person](https://developers.intellihr.io/docs/v1/).  Note that this endpoint is not Paginated.
     * @param personId Id string param for relevant [Person](https://developers.intellihr.io/docs/v1/) (required)
     * @return ListPersonSkillsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListPersonSkillsRequestBuilder listPersonSkills(String personId) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
            

        return new ListPersonSkillsRequestBuilder(personId);
    }
    private okhttp3.Call updateAssignedSkillCall(String personId, PersonIdPatchRequest personIdPatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = personIdPatchRequest;

        // create path and map variables
        String localVarPath = "/people/{personId}/skills/{id}"
            .replace("{" + "personId" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAssignedSkillValidateBeforeCall(String personId, PersonIdPatchRequest personIdPatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling updateAssignedSkill(Async)");
        }

        // verify the required parameter 'personIdPatchRequest' is set
        if (personIdPatchRequest == null) {
            throw new ApiException("Missing the required parameter 'personIdPatchRequest' when calling updateAssignedSkill(Async)");
        }

        return updateAssignedSkillCall(personId, personIdPatchRequest, _callback);

    }


    private ApiResponse<PersonId> updateAssignedSkillWithHttpInfo(String personId, PersonIdPatchRequest personIdPatchRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAssignedSkillValidateBeforeCall(personId, personIdPatchRequest, null);
        Type localVarReturnType = new TypeToken<PersonId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAssignedSkillAsync(String personId, PersonIdPatchRequest personIdPatchRequest, final ApiCallback<PersonId> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAssignedSkillValidateBeforeCall(personId, personIdPatchRequest, _callback);
        Type localVarReturnType = new TypeToken<PersonId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateAssignedSkillRequestBuilder {
        private final String personId;
        private String skillLevel;

        private UpdateAssignedSkillRequestBuilder(String personId) {
            this.personId = personId;
        }

        /**
         * Set skillLevel
         * @param skillLevel The Skill Level you wish to apply to this Skill. Enum: &#x60;Expert&#x60;, &#x60;Proficient&#x60;, &#x60;Interested&#x60;, &#x60;Basic&#x60;. (optional)
         * @return UpdateAssignedSkillRequestBuilder
         */
        public UpdateAssignedSkillRequestBuilder skillLevel(String skillLevel) {
            this.skillLevel = skillLevel;
            return this;
        }
        
        /**
         * Build call for updateAssignedSkill
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PersonIdPatchRequest personIdPatchRequest = buildBodyParams();
            return updateAssignedSkillCall(personId, personIdPatchRequest, _callback);
        }

        private PersonIdPatchRequest buildBodyParams() {
            PersonIdPatchRequest personIdPatchRequest = new PersonIdPatchRequest();
            personIdPatchRequest.skillLevel(this.skillLevel);
            return personIdPatchRequest;
        }

        /**
         * Execute updateAssignedSkill request
         * @return PersonId
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public PersonId execute() throws ApiException {
            PersonIdPatchRequest personIdPatchRequest = buildBodyParams();
            ApiResponse<PersonId> localVarResp = updateAssignedSkillWithHttpInfo(personId, personIdPatchRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateAssignedSkill request with HTTP info returned
         * @return ApiResponse&lt;PersonId&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonId> executeWithHttpInfo() throws ApiException {
            PersonIdPatchRequest personIdPatchRequest = buildBodyParams();
            return updateAssignedSkillWithHttpInfo(personId, personIdPatchRequest);
        }

        /**
         * Execute updateAssignedSkill request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonId> _callback) throws ApiException {
            PersonIdPatchRequest personIdPatchRequest = buildBodyParams();
            return updateAssignedSkillAsync(personId, personIdPatchRequest, _callback);
        }
    }

    /**
     * Update an Assigned Skill
     * Update an assigned [Skill](https://developers.intellihr.io/docs/v1/) on a [Person](https://developers.intellihr.io/docs/v1/)
     * @param personId Id string param for relevant [Person](https://developers.intellihr.io/docs/v1/) (required)
     * @param personIdPatchRequest  (required)
     * @return UpdateAssignedSkillRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAssignedSkillRequestBuilder updateAssignedSkill(String personId) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
            

        return new UpdateAssignedSkillRequestBuilder(personId);
    }
}
