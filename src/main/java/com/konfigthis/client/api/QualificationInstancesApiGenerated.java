/*
 * intelliHR Public API
 * You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)
 *
 * The version of the OpenAPI document: V1
 * Contact: support@intellihr.co
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.QualificationInstancesCreateRequest;
import com.konfigthis.client.model.QualificationInstancesListAllFiltersParameter;
import com.konfigthis.client.model.QualificationInstancesPatchRequest;
import com.konfigthis.client.model.Qualifications;
import com.konfigthis.client.model.QualificationsList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class QualificationInstancesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public QualificationInstancesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public QualificationInstancesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewInstanceCall(QualificationInstancesCreateRequest qualificationInstancesCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = qualificationInstancesCreateRequest;

        // create path and map variables
        String localVarPath = "/qualifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewInstanceValidateBeforeCall(QualificationInstancesCreateRequest qualificationInstancesCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qualificationInstancesCreateRequest' is set
        if (qualificationInstancesCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'qualificationInstancesCreateRequest' when calling createNewInstance(Async)");
        }

        return createNewInstanceCall(qualificationInstancesCreateRequest, _callback);

    }


    private ApiResponse<Qualifications> createNewInstanceWithHttpInfo(QualificationInstancesCreateRequest qualificationInstancesCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewInstanceValidateBeforeCall(qualificationInstancesCreateRequest, null);
        Type localVarReturnType = new TypeToken<Qualifications>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewInstanceAsync(QualificationInstancesCreateRequest qualificationInstancesCreateRequest, final ApiCallback<Qualifications> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewInstanceValidateBeforeCall(qualificationInstancesCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<Qualifications>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewInstanceRequestBuilder {
        private final String personId;
        private final String qualificationLibraryItemId;
        private final String status;
        private Object issuingOrganisation;
        private Object registrationNumber;
        private Object issueDate;
        private Object expiryDate;
        private Object expiryNotificationQueuedAt;
        private Object notes;

        private CreateNewInstanceRequestBuilder(String personId, String qualificationLibraryItemId, String status) {
            this.personId = personId;
            this.qualificationLibraryItemId = qualificationLibraryItemId;
            this.status = status;
        }

        /**
         * Set issuingOrganisation
         * @param issuingOrganisation  (optional)
         * @return CreateNewInstanceRequestBuilder
         */
        public CreateNewInstanceRequestBuilder issuingOrganisation(Object issuingOrganisation) {
            this.issuingOrganisation = issuingOrganisation;
            return this;
        }
        
        /**
         * Set registrationNumber
         * @param registrationNumber  (optional)
         * @return CreateNewInstanceRequestBuilder
         */
        public CreateNewInstanceRequestBuilder registrationNumber(Object registrationNumber) {
            this.registrationNumber = registrationNumber;
            return this;
        }
        
        /**
         * Set issueDate
         * @param issueDate  (optional)
         * @return CreateNewInstanceRequestBuilder
         */
        public CreateNewInstanceRequestBuilder issueDate(Object issueDate) {
            this.issueDate = issueDate;
            return this;
        }
        
        /**
         * Set expiryDate
         * @param expiryDate  (optional)
         * @return CreateNewInstanceRequestBuilder
         */
        public CreateNewInstanceRequestBuilder expiryDate(Object expiryDate) {
            this.expiryDate = expiryDate;
            return this;
        }
        
        /**
         * Set expiryNotificationQueuedAt
         * @param expiryNotificationQueuedAt  (optional)
         * @return CreateNewInstanceRequestBuilder
         */
        public CreateNewInstanceRequestBuilder expiryNotificationQueuedAt(Object expiryNotificationQueuedAt) {
            this.expiryNotificationQueuedAt = expiryNotificationQueuedAt;
            return this;
        }
        
        /**
         * Set notes
         * @param notes  (optional)
         * @return CreateNewInstanceRequestBuilder
         */
        public CreateNewInstanceRequestBuilder notes(Object notes) {
            this.notes = notes;
            return this;
        }
        
        /**
         * Build call for createNewInstance
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            QualificationInstancesCreateRequest qualificationInstancesCreateRequest = buildBodyParams();
            return createNewInstanceCall(qualificationInstancesCreateRequest, _callback);
        }

        private QualificationInstancesCreateRequest buildBodyParams() {
            QualificationInstancesCreateRequest qualificationInstancesCreateRequest = new QualificationInstancesCreateRequest();
            qualificationInstancesCreateRequest.personId(this.personId);
            qualificationInstancesCreateRequest.qualificationLibraryItemId(this.qualificationLibraryItemId);
            if (this.status != null)
            qualificationInstancesCreateRequest.status(QualificationInstancesCreateRequest.StatusEnum.fromValue(this.status));
            qualificationInstancesCreateRequest.issuingOrganisation(this.issuingOrganisation);
            qualificationInstancesCreateRequest.registrationNumber(this.registrationNumber);
            qualificationInstancesCreateRequest.issueDate(this.issueDate);
            qualificationInstancesCreateRequest.expiryDate(this.expiryDate);
            qualificationInstancesCreateRequest.expiryNotificationQueuedAt(this.expiryNotificationQueuedAt);
            qualificationInstancesCreateRequest.notes(this.notes);
            return qualificationInstancesCreateRequest;
        }

        /**
         * Execute createNewInstance request
         * @return Qualifications
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Qualifications execute() throws ApiException {
            QualificationInstancesCreateRequest qualificationInstancesCreateRequest = buildBodyParams();
            ApiResponse<Qualifications> localVarResp = createNewInstanceWithHttpInfo(qualificationInstancesCreateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewInstance request with HTTP info returned
         * @return ApiResponse&lt;Qualifications&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Qualifications> executeWithHttpInfo() throws ApiException {
            QualificationInstancesCreateRequest qualificationInstancesCreateRequest = buildBodyParams();
            return createNewInstanceWithHttpInfo(qualificationInstancesCreateRequest);
        }

        /**
         * Execute createNewInstance request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Qualifications> _callback) throws ApiException {
            QualificationInstancesCreateRequest qualificationInstancesCreateRequest = buildBodyParams();
            return createNewInstanceAsync(qualificationInstancesCreateRequest, _callback);
        }
    }

    /**
     * Create a new Qualification Instance
     * Returns the created [Qualification Instance](https://developers.intellihr.io/docs/v1/).
     * @param qualificationInstancesCreateRequest  (required)
     * @return CreateNewInstanceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewInstanceRequestBuilder createNewInstance(String personId, String qualificationLibraryItemId, String status) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
            if (personId != null && personId.length() < 36) {
              throw new IllegalArgumentException("Invalid value for personId. Length must be greater than or equal to 36.");
            }

        if (qualificationLibraryItemId == null) throw new IllegalArgumentException("\"qualificationLibraryItemId\" is required but got null");
            if (qualificationLibraryItemId != null && qualificationLibraryItemId.length() < 36) {
              throw new IllegalArgumentException("Invalid value for qualificationLibraryItemId. Length must be greater than or equal to 36.");
            }

        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        return new CreateNewInstanceRequestBuilder(personId, qualificationLibraryItemId, status);
    }
    private okhttp3.Call deleteByIdCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/qualifications/{id}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByIdValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return deleteByIdCall(_callback);

    }


    private ApiResponse<Void> deleteByIdWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteByIdAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteByIdRequestBuilder {

        private DeleteByIdRequestBuilder() {
        }

        /**
         * Build call for deleteById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByIdCall(_callback);
        }


        /**
         * Execute deleteById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteByIdWithHttpInfo();
        }

        /**
         * Execute deleteById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteByIdWithHttpInfo();
        }

        /**
         * Execute deleteById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteByIdAsync(_callback);
        }
    }

    /**
     * Delete a Qualification Instance by ID
     * Deletes the [Qualification Instance](https://developers.intellihr.io/docs/v1/) by the given ID.
     * @return DeleteByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByIdRequestBuilder deleteById() throws IllegalArgumentException {
        return new DeleteByIdRequestBuilder();
    }
    private okhttp3.Call findByIdCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/qualifications/{id}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findByIdValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return findByIdCall(_callback);

    }


    private ApiResponse<Qualifications> findByIdWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = findByIdValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Qualifications>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findByIdAsync(final ApiCallback<Qualifications> _callback) throws ApiException {

        okhttp3.Call localVarCall = findByIdValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Qualifications>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindByIdRequestBuilder {

        private FindByIdRequestBuilder() {
        }

        /**
         * Build call for findById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findByIdCall(_callback);
        }


        /**
         * Execute findById request
         * @return Qualifications
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Qualifications execute() throws ApiException {
            ApiResponse<Qualifications> localVarResp = findByIdWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findById request with HTTP info returned
         * @return ApiResponse&lt;Qualifications&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Qualifications> executeWithHttpInfo() throws ApiException {
            return findByIdWithHttpInfo();
        }

        /**
         * Execute findById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Qualifications> _callback) throws ApiException {
            return findByIdAsync(_callback);
        }
    }

    /**
     * Find a Qualification Instance by ID
     * Returns a single [Qualification Instance](https://developers.intellihr.io/docs/v1/) by its identifier.
     * @return FindByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FindByIdRequestBuilder findById() throws IllegalArgumentException {
        return new FindByIdRequestBuilder();
    }
    private okhttp3.Call listAllCall(QualificationInstancesListAllFiltersParameter filters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/qualifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllValidateBeforeCall(QualificationInstancesListAllFiltersParameter filters, final ApiCallback _callback) throws ApiException {
        return listAllCall(filters, _callback);

    }


    private ApiResponse<QualificationsList> listAllWithHttpInfo(QualificationInstancesListAllFiltersParameter filters) throws ApiException {
        okhttp3.Call localVarCall = listAllValidateBeforeCall(filters, null);
        Type localVarReturnType = new TypeToken<QualificationsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAsync(QualificationInstancesListAllFiltersParameter filters, final ApiCallback<QualificationsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllValidateBeforeCall(filters, _callback);
        Type localVarReturnType = new TypeToken<QualificationsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllRequestBuilder {
        private QualificationInstancesListAllFiltersParameter filters;

        private ListAllRequestBuilder() {
        }

        /**
         * Set filters
         * @param filters Filters can be applied in the query string to limit the data returned from this endpoint. Filters are provided in the format &#x60;filters[&lt;filter_name&gt;][&lt;operation_type&gt;]&#x3D;&lt;filter_value&gt;&#x60;.For example, a filter to get items matching a specific filter value would be &#x60;filters[personId][eq]&#x3D;dc996d73-a75e-499c-a96e-bd7d0df45f57,26d0ffc4-60f6-4672-a603-caaa4564af12&#x60;  Below is a list of operation types available on filters, note that each filter may not support every type:  • Equality &#x60;[eq]&#x60;: Checks for an exact match with the given filter value  The list of supported filters is given below. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder filters(QualificationInstancesListAllFiltersParameter filters) {
            this.filters = filters;
            return this;
        }
        
        /**
         * Build call for listAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCall(filters, _callback);
        }


        /**
         * Execute listAll request
         * @return QualificationsList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public QualificationsList execute() throws ApiException {
            ApiResponse<QualificationsList> localVarResp = listAllWithHttpInfo(filters);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAll request with HTTP info returned
         * @return ApiResponse&lt;QualificationsList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<QualificationsList> executeWithHttpInfo() throws ApiException {
            return listAllWithHttpInfo(filters);
        }

        /**
         * Execute listAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<QualificationsList> _callback) throws ApiException {
            return listAllAsync(filters, _callback);
        }
    }

    /**
     * List all Qualification Instances
     * 
     * @return ListAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListAllRequestBuilder listAll() throws IllegalArgumentException {
        return new ListAllRequestBuilder();
    }
    private okhttp3.Call updateInstanceByIdCall(QualificationInstancesPatchRequest qualificationInstancesPatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = qualificationInstancesPatchRequest;

        // create path and map variables
        String localVarPath = "/qualifications/{id}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInstanceByIdValidateBeforeCall(QualificationInstancesPatchRequest qualificationInstancesPatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qualificationInstancesPatchRequest' is set
        if (qualificationInstancesPatchRequest == null) {
            throw new ApiException("Missing the required parameter 'qualificationInstancesPatchRequest' when calling updateInstanceById(Async)");
        }

        return updateInstanceByIdCall(qualificationInstancesPatchRequest, _callback);

    }


    private ApiResponse<Qualifications> updateInstanceByIdWithHttpInfo(QualificationInstancesPatchRequest qualificationInstancesPatchRequest) throws ApiException {
        okhttp3.Call localVarCall = updateInstanceByIdValidateBeforeCall(qualificationInstancesPatchRequest, null);
        Type localVarReturnType = new TypeToken<Qualifications>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateInstanceByIdAsync(QualificationInstancesPatchRequest qualificationInstancesPatchRequest, final ApiCallback<Qualifications> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInstanceByIdValidateBeforeCall(qualificationInstancesPatchRequest, _callback);
        Type localVarReturnType = new TypeToken<Qualifications>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateInstanceByIdRequestBuilder {
        private String status;
        private Object issuingOrganisation;
        private Object registrationNumber;
        private Object issueDate;
        private Object expiryDate;
        private Object expiryNotificationQueuedAt;
        private Object notes;

        private UpdateInstanceByIdRequestBuilder() {
        }

        /**
         * Set status
         * @param status The status of this [Qualification Instance](https://developers.intellihr.io/docs/v1/) (optional)
         * @return UpdateInstanceByIdRequestBuilder
         */
        public UpdateInstanceByIdRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set issuingOrganisation
         * @param issuingOrganisation  (optional)
         * @return UpdateInstanceByIdRequestBuilder
         */
        public UpdateInstanceByIdRequestBuilder issuingOrganisation(Object issuingOrganisation) {
            this.issuingOrganisation = issuingOrganisation;
            return this;
        }
        
        /**
         * Set registrationNumber
         * @param registrationNumber  (optional)
         * @return UpdateInstanceByIdRequestBuilder
         */
        public UpdateInstanceByIdRequestBuilder registrationNumber(Object registrationNumber) {
            this.registrationNumber = registrationNumber;
            return this;
        }
        
        /**
         * Set issueDate
         * @param issueDate  (optional)
         * @return UpdateInstanceByIdRequestBuilder
         */
        public UpdateInstanceByIdRequestBuilder issueDate(Object issueDate) {
            this.issueDate = issueDate;
            return this;
        }
        
        /**
         * Set expiryDate
         * @param expiryDate  (optional)
         * @return UpdateInstanceByIdRequestBuilder
         */
        public UpdateInstanceByIdRequestBuilder expiryDate(Object expiryDate) {
            this.expiryDate = expiryDate;
            return this;
        }
        
        /**
         * Set expiryNotificationQueuedAt
         * @param expiryNotificationQueuedAt  (optional)
         * @return UpdateInstanceByIdRequestBuilder
         */
        public UpdateInstanceByIdRequestBuilder expiryNotificationQueuedAt(Object expiryNotificationQueuedAt) {
            this.expiryNotificationQueuedAt = expiryNotificationQueuedAt;
            return this;
        }
        
        /**
         * Set notes
         * @param notes  (optional)
         * @return UpdateInstanceByIdRequestBuilder
         */
        public UpdateInstanceByIdRequestBuilder notes(Object notes) {
            this.notes = notes;
            return this;
        }
        
        /**
         * Build call for updateInstanceById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            QualificationInstancesPatchRequest qualificationInstancesPatchRequest = buildBodyParams();
            return updateInstanceByIdCall(qualificationInstancesPatchRequest, _callback);
        }

        private QualificationInstancesPatchRequest buildBodyParams() {
            QualificationInstancesPatchRequest qualificationInstancesPatchRequest = new QualificationInstancesPatchRequest();
            if (this.status != null)
            qualificationInstancesPatchRequest.status(QualificationInstancesPatchRequest.StatusEnum.fromValue(this.status));
            qualificationInstancesPatchRequest.issuingOrganisation(this.issuingOrganisation);
            qualificationInstancesPatchRequest.registrationNumber(this.registrationNumber);
            qualificationInstancesPatchRequest.issueDate(this.issueDate);
            qualificationInstancesPatchRequest.expiryDate(this.expiryDate);
            qualificationInstancesPatchRequest.expiryNotificationQueuedAt(this.expiryNotificationQueuedAt);
            qualificationInstancesPatchRequest.notes(this.notes);
            return qualificationInstancesPatchRequest;
        }

        /**
         * Execute updateInstanceById request
         * @return Qualifications
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Qualifications execute() throws ApiException {
            QualificationInstancesPatchRequest qualificationInstancesPatchRequest = buildBodyParams();
            ApiResponse<Qualifications> localVarResp = updateInstanceByIdWithHttpInfo(qualificationInstancesPatchRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateInstanceById request with HTTP info returned
         * @return ApiResponse&lt;Qualifications&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Qualifications> executeWithHttpInfo() throws ApiException {
            QualificationInstancesPatchRequest qualificationInstancesPatchRequest = buildBodyParams();
            return updateInstanceByIdWithHttpInfo(qualificationInstancesPatchRequest);
        }

        /**
         * Execute updateInstanceById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Qualifications> _callback) throws ApiException {
            QualificationInstancesPatchRequest qualificationInstancesPatchRequest = buildBodyParams();
            return updateInstanceByIdAsync(qualificationInstancesPatchRequest, _callback);
        }
    }

    /**
     * Update a Qualification Instance by ID
     * Returns the updated [Qualification Instance](https://developers.intellihr.io/docs/v1/).
     * @param qualificationInstancesPatchRequest  (required)
     * @return UpdateInstanceByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateInstanceByIdRequestBuilder updateInstanceById() throws IllegalArgumentException {
        return new UpdateInstanceByIdRequestBuilder();
    }
}
