/*
 * intelliHR Public API
 * You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)
 *
 * The version of the OpenAPI document: V1
 * Contact: support@intellihr.co
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PayGradeCreateRequest;
import com.konfigthis.client.model.PayGradeCreateRequestEmploymentCondition;
import com.konfigthis.client.model.PayGradeCreateRequestPayStepsInner;
import com.konfigthis.client.model.PayGradeUpdateRequest;
import com.konfigthis.client.model.PayGradeUpdateRequestEmploymentCondition;
import com.konfigthis.client.model.PayGradeUpdateRequestPayStepsInner;
import com.konfigthis.client.model.PayGrades;
import com.konfigthis.client.model.PayGradesList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PayGradesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PayGradesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PayGradesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createRecordCall(PayGradeCreateRequest payGradeCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payGradeCreateRequest;

        // create path and map variables
        String localVarPath = "/pay-grades";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRecordValidateBeforeCall(PayGradeCreateRequest payGradeCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payGradeCreateRequest' is set
        if (payGradeCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'payGradeCreateRequest' when calling createRecord(Async)");
        }

        return createRecordCall(payGradeCreateRequest, _callback);

    }


    private ApiResponse<PayGrades> createRecordWithHttpInfo(PayGradeCreateRequest payGradeCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createRecordValidateBeforeCall(payGradeCreateRequest, null);
        Type localVarReturnType = new TypeToken<PayGrades>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createRecordAsync(PayGradeCreateRequest payGradeCreateRequest, final ApiCallback<PayGrades> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRecordValidateBeforeCall(payGradeCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<PayGrades>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRecordRequestBuilder {
        private final String name;
        private String description;
        private String code;
        private PayGradeCreateRequestEmploymentCondition employmentCondition;
        private String payGradeType;
        private Boolean isOverridable;
        private Double permanentHourlyRate;
        private String permanentHourlyRateCurrency;
        private Double casualHourlyRate;
        private String casualHourlyRateCurrency;
        private Double annualSalary;
        private String annualSalaryCurrency;
        private List<PayGradeCreateRequestPayStepsInner> paySteps;

        private CreateRecordRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set description
         * @param description Description of the [Pay Grade](https://developers.intellihr.io/docs/v1/). (optional)
         * @return CreateRecordRequestBuilder
         */
        public CreateRecordRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set code
         * @param code Administrative, short code associated to the [Pay Grade](https://developers.intellihr.io/docs/v1/). (optional)
         * @return CreateRecordRequestBuilder
         */
        public CreateRecordRequestBuilder code(String code) {
            this.code = code;
            return this;
        }
        
        /**
         * Set employmentCondition
         * @param employmentCondition  (optional)
         * @return CreateRecordRequestBuilder
         */
        public CreateRecordRequestBuilder employmentCondition(PayGradeCreateRequestEmploymentCondition employmentCondition) {
            this.employmentCondition = employmentCondition;
            return this;
        }
        
        /**
         * Set payGradeType
         * @param payGradeType The type of this [Pay Grade](https://developers.intellihr.io/docs/v1/). Enum: &#x60;FIXED&#x60; or &#x60;STEP&#x60;. (optional, default to FIXED)
         * @return CreateRecordRequestBuilder
         */
        public CreateRecordRequestBuilder payGradeType(String payGradeType) {
            this.payGradeType = payGradeType;
            return this;
        }
        
        /**
         * Set isOverridable
         * @param isOverridable Allow this [Pay Grade](https://developers.intellihr.io/docs/v1/) value to be overwritten. (optional, default to false)
         * @return CreateRecordRequestBuilder
         */
        public CreateRecordRequestBuilder isOverridable(Boolean isOverridable) {
            this.isOverridable = isOverridable;
            return this;
        }
        
        /**
         * Set permanentHourlyRate
         * @param permanentHourlyRate Stores the hourly rate for permanent [Jobs](https://developers.intellihr.io/docs/v1/). These inputs will be ignored if you also pass in pay Step values. (optional)
         * @return CreateRecordRequestBuilder
         */
        public CreateRecordRequestBuilder permanentHourlyRate(Double permanentHourlyRate) {
            this.permanentHourlyRate = permanentHourlyRate;
            return this;
        }
        
        /**
         * Set permanentHourlyRateCurrency
         * @param permanentHourlyRateCurrency The currency that the permanentHourlyRate is being paid in. An international currency code. Typically AUD for Australian dollar, USD for American dollar etc. See [Official list of codes](https://www.iban.com/currency-codes). (optional)
         * @return CreateRecordRequestBuilder
         */
        public CreateRecordRequestBuilder permanentHourlyRateCurrency(String permanentHourlyRateCurrency) {
            this.permanentHourlyRateCurrency = permanentHourlyRateCurrency;
            return this;
        }
        
        /**
         * Set casualHourlyRate
         * @param casualHourlyRate Stores the hourly rate for casual [Jobs](https://developers.intellihr.io/docs/v1/). These inputs will be ignored if you also pass in pay Step values. (optional)
         * @return CreateRecordRequestBuilder
         */
        public CreateRecordRequestBuilder casualHourlyRate(Double casualHourlyRate) {
            this.casualHourlyRate = casualHourlyRate;
            return this;
        }
        
        /**
         * Set casualHourlyRateCurrency
         * @param casualHourlyRateCurrency The currency that the casualHourlyRate is being paid in. An international currency code. Typically AUD for Australian dollar, USD for American dollar etc. See [Official list of codes](https://www.iban.com/currency-codes). (optional)
         * @return CreateRecordRequestBuilder
         */
        public CreateRecordRequestBuilder casualHourlyRateCurrency(String casualHourlyRateCurrency) {
            this.casualHourlyRateCurrency = casualHourlyRateCurrency;
            return this;
        }
        
        /**
         * Set annualSalary
         * @param annualSalary Stores the annual salary for [Jobs](https://developers.intellihr.io/docs/v1/). These inputs will be ignored if you also pass in pay Step values. (optional)
         * @return CreateRecordRequestBuilder
         */
        public CreateRecordRequestBuilder annualSalary(Double annualSalary) {
            this.annualSalary = annualSalary;
            return this;
        }
        
        /**
         * Set annualSalaryCurrency
         * @param annualSalaryCurrency The currency that the annualSalary is being paid in. An international currency code. Typically AUD for Australian dollar, USD for American dollar etc. See [Official list of codes](https://www.iban.com/currency-codes). (optional)
         * @return CreateRecordRequestBuilder
         */
        public CreateRecordRequestBuilder annualSalaryCurrency(String annualSalaryCurrency) {
            this.annualSalaryCurrency = annualSalaryCurrency;
            return this;
        }
        
        /**
         * Set paySteps
         * @param paySteps An array of Paygrade Step Rates. This array is to be used when payGradeType of \\\&quot;Step\\\&quot; is used. (optional)
         * @return CreateRecordRequestBuilder
         */
        public CreateRecordRequestBuilder paySteps(List<PayGradeCreateRequestPayStepsInner> paySteps) {
            this.paySteps = paySteps;
            return this;
        }
        
        /**
         * Build call for createRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayGradeCreateRequest payGradeCreateRequest = buildBodyParams();
            return createRecordCall(payGradeCreateRequest, _callback);
        }

        private PayGradeCreateRequest buildBodyParams() {
            PayGradeCreateRequest payGradeCreateRequest = new PayGradeCreateRequest();
            payGradeCreateRequest.description(this.description);
            payGradeCreateRequest.name(this.name);
            payGradeCreateRequest.code(this.code);
            payGradeCreateRequest.employmentCondition(this.employmentCondition);
            payGradeCreateRequest.payGradeType(this.payGradeType);
            payGradeCreateRequest.isOverridable(this.isOverridable);
            payGradeCreateRequest.permanentHourlyRate(this.permanentHourlyRate);
            payGradeCreateRequest.permanentHourlyRateCurrency(this.permanentHourlyRateCurrency);
            payGradeCreateRequest.casualHourlyRate(this.casualHourlyRate);
            payGradeCreateRequest.casualHourlyRateCurrency(this.casualHourlyRateCurrency);
            payGradeCreateRequest.annualSalary(this.annualSalary);
            payGradeCreateRequest.annualSalaryCurrency(this.annualSalaryCurrency);
            payGradeCreateRequest.paySteps(this.paySteps);
            return payGradeCreateRequest;
        }

        /**
         * Execute createRecord request
         * @return PayGrades
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public PayGrades execute() throws ApiException {
            PayGradeCreateRequest payGradeCreateRequest = buildBodyParams();
            ApiResponse<PayGrades> localVarResp = createRecordWithHttpInfo(payGradeCreateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createRecord request with HTTP info returned
         * @return ApiResponse&lt;PayGrades&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayGrades> executeWithHttpInfo() throws ApiException {
            PayGradeCreateRequest payGradeCreateRequest = buildBodyParams();
            return createRecordWithHttpInfo(payGradeCreateRequest);
        }

        /**
         * Execute createRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayGrades> _callback) throws ApiException {
            PayGradeCreateRequest payGradeCreateRequest = buildBodyParams();
            return createRecordAsync(payGradeCreateRequest, _callback);
        }
    }

    /**
     * Create a new Pay Grade
     * Create a new Pay Grade record with the provided data.
     * @param payGradeCreateRequest  (required)
     * @return CreateRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateRecordRequestBuilder createRecord(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateRecordRequestBuilder(name);
    }
    private okhttp3.Call deleteByIdCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pay-grades/{id}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByIdValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return deleteByIdCall(_callback);

    }


    private ApiResponse<Void> deleteByIdWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteByIdAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteByIdRequestBuilder {

        private DeleteByIdRequestBuilder() {
        }

        /**
         * Build call for deleteById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByIdCall(_callback);
        }


        /**
         * Execute deleteById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteByIdWithHttpInfo();
        }

        /**
         * Execute deleteById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteByIdWithHttpInfo();
        }

        /**
         * Execute deleteById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteByIdAsync(_callback);
        }
    }

    /**
     * Delete a Pay Grade by ID
     * Deletes the [Pay Grade](https://developers.intellihr.io/docs/v1/) by the given ID.
     * @return DeleteByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByIdRequestBuilder deleteById() throws IllegalArgumentException {
        return new DeleteByIdRequestBuilder();
    }
    private okhttp3.Call findByIdCall(String asAt, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pay-grades/{id}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findByIdValidateBeforeCall(String asAt, final ApiCallback _callback) throws ApiException {
        return findByIdCall(asAt, _callback);

    }


    private ApiResponse<PayGrades> findByIdWithHttpInfo(String asAt) throws ApiException {
        okhttp3.Call localVarCall = findByIdValidateBeforeCall(asAt, null);
        Type localVarReturnType = new TypeToken<PayGrades>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findByIdAsync(String asAt, final ApiCallback<PayGrades> _callback) throws ApiException {

        okhttp3.Call localVarCall = findByIdValidateBeforeCall(asAt, _callback);
        Type localVarReturnType = new TypeToken<PayGrades>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindByIdRequestBuilder {
        private String asAt;

        private FindByIdRequestBuilder() {
        }

        /**
         * Set asAt
         * @param asAt Used to configure what date to return this data, as a [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.6) datetime.   All data returned from the endpoints represent the values of the attributes at a specific point in time.   By default, the current datetime is used, but this parameter can be used to configure a different datetime to see historical data. (optional)
         * @return FindByIdRequestBuilder
         */
        public FindByIdRequestBuilder asAt(String asAt) {
            this.asAt = asAt;
            return this;
        }
        
        /**
         * Build call for findById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findByIdCall(asAt, _callback);
        }


        /**
         * Execute findById request
         * @return PayGrades
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public PayGrades execute() throws ApiException {
            ApiResponse<PayGrades> localVarResp = findByIdWithHttpInfo(asAt);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findById request with HTTP info returned
         * @return ApiResponse&lt;PayGrades&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayGrades> executeWithHttpInfo() throws ApiException {
            return findByIdWithHttpInfo(asAt);
        }

        /**
         * Execute findById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayGrades> _callback) throws ApiException {
            return findByIdAsync(asAt, _callback);
        }
    }

    /**
     * Find a Pay Grade by ID
     * Returns a single pay grade.
     * @return FindByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FindByIdRequestBuilder findById() throws IllegalArgumentException {
        return new FindByIdRequestBuilder();
    }
    private okhttp3.Call getAllCall(String asAt, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pay-grades";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(String asAt, final ApiCallback _callback) throws ApiException {
        return getAllCall(asAt, _callback);

    }


    private ApiResponse<PayGradesList> getAllWithHttpInfo(String asAt) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(asAt, null);
        Type localVarReturnType = new TypeToken<PayGradesList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(String asAt, final ApiCallback<PayGradesList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(asAt, _callback);
        Type localVarReturnType = new TypeToken<PayGradesList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private String asAt;

        private GetAllRequestBuilder() {
        }

        /**
         * Set asAt
         * @param asAt Used to configure what date to return this data, as a [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.6) datetime.   All data returned from the endpoints represent the values of the attributes at a specific point in time.   By default, the current datetime is used, but this parameter can be used to configure a different datetime to see historical data. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder asAt(String asAt) {
            this.asAt = asAt;
            return this;
        }
        
        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(asAt, _callback);
        }


        /**
         * Execute getAll request
         * @return PayGradesList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public PayGradesList execute() throws ApiException {
            ApiResponse<PayGradesList> localVarResp = getAllWithHttpInfo(asAt);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;PayGradesList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayGradesList> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(asAt);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayGradesList> _callback) throws ApiException {
            return getAllAsync(asAt, _callback);
        }
    }

    /**
     * List all pay grades
     * Returns a list of all pay grades.
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll() throws IllegalArgumentException {
        return new GetAllRequestBuilder();
    }
    private okhttp3.Call updateRecordCall(PayGradeUpdateRequest payGradeUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payGradeUpdateRequest;

        // create path and map variables
        String localVarPath = "/pay-grades/{id}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRecordValidateBeforeCall(PayGradeUpdateRequest payGradeUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payGradeUpdateRequest' is set
        if (payGradeUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'payGradeUpdateRequest' when calling updateRecord(Async)");
        }

        return updateRecordCall(payGradeUpdateRequest, _callback);

    }


    private ApiResponse<PayGrades> updateRecordWithHttpInfo(PayGradeUpdateRequest payGradeUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateRecordValidateBeforeCall(payGradeUpdateRequest, null);
        Type localVarReturnType = new TypeToken<PayGrades>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateRecordAsync(PayGradeUpdateRequest payGradeUpdateRequest, final ApiCallback<PayGrades> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRecordValidateBeforeCall(payGradeUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<PayGrades>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRecordRequestBuilder {
        private final String effectiveFrom;
        private String description;
        private String effectiveTo;
        private Boolean isEnabled;
        private String name;
        private String code;
        private PayGradeUpdateRequestEmploymentCondition employmentCondition;
        private String payGradeType;
        private Boolean isOverridable;
        private Double permanentHourlyRate;
        private String permanentHourlyRateCurrency;
        private Double casualHourlyRate;
        private String casualHourlyRateCurrency;
        private Double annualSalary;
        private String annualSalaryCurrency;
        private List<PayGradeUpdateRequestPayStepsInner> paySteps;

        private UpdateRecordRequestBuilder(String effectiveFrom) {
            this.effectiveFrom = effectiveFrom;
        }

        /**
         * Set description
         * @param description Description of the [Pay Grade](https://developers.intellihr.io/docs/v1/). (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set effectiveTo
         * @param effectiveTo The date this [Pay Grade](https://developers.intellihr.io/docs/v1/) Update is effective to within the organisation.. This date will follow the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.6).   YYYY-MM-DD date formatting is also supported, although by using this format the date will be stored as the start of day in UTC time, not the requesting tenants timezone. (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder effectiveTo(String effectiveTo) {
            this.effectiveTo = effectiveTo;
            return this;
        }
        
        /**
         * Set isEnabled
         * @param isEnabled Toggle the availability of the [Pay Grade](https://developers.intellihr.io/docs/v1/) on or off within the organisation. (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder isEnabled(Boolean isEnabled) {
            this.isEnabled = isEnabled;
            return this;
        }
        
        /**
         * Set name
         * @param name The name assigned to this [Pay Grade](https://developers.intellihr.io/docs/v1/). (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set code
         * @param code Administrative, short code associated to the [Pay Grade](https://developers.intellihr.io/docs/v1/). (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder code(String code) {
            this.code = code;
            return this;
        }
        
        /**
         * Set employmentCondition
         * @param employmentCondition  (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder employmentCondition(PayGradeUpdateRequestEmploymentCondition employmentCondition) {
            this.employmentCondition = employmentCondition;
            return this;
        }
        
        /**
         * Set payGradeType
         * @param payGradeType The type of this [Pay Grade](https://developers.intellihr.io/docs/v1/). Enum: &#x60;FIXED&#x60; or &#x60;STEP&#x60;. (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder payGradeType(String payGradeType) {
            this.payGradeType = payGradeType;
            return this;
        }
        
        /**
         * Set isOverridable
         * @param isOverridable Allow this [Pay Grade](https://developers.intellihr.io/docs/v1/) value to be overwritten. (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder isOverridable(Boolean isOverridable) {
            this.isOverridable = isOverridable;
            return this;
        }
        
        /**
         * Set permanentHourlyRate
         * @param permanentHourlyRate Stores the hourly rate for permanent [Jobs](https://developers.intellihr.io/docs/v1/). These inputs will be ignored if you also pass in pay Step values. (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder permanentHourlyRate(Double permanentHourlyRate) {
            this.permanentHourlyRate = permanentHourlyRate;
            return this;
        }
        
        /**
         * Set permanentHourlyRateCurrency
         * @param permanentHourlyRateCurrency The currency that the permanentHourlyRate is being paid in. An international currency code. Typically AUD for Australian dollar, USD for American dollar etc. See [Official list of codes](https://www.iban.com/currency-codes). (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder permanentHourlyRateCurrency(String permanentHourlyRateCurrency) {
            this.permanentHourlyRateCurrency = permanentHourlyRateCurrency;
            return this;
        }
        
        /**
         * Set casualHourlyRate
         * @param casualHourlyRate Stores the hourly rate for casual [Jobs](https://developers.intellihr.io/docs/v1/). These inputs will be ignored if you also pass in pay Step values. (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder casualHourlyRate(Double casualHourlyRate) {
            this.casualHourlyRate = casualHourlyRate;
            return this;
        }
        
        /**
         * Set casualHourlyRateCurrency
         * @param casualHourlyRateCurrency The currency that the casualHourlyRate is being paid in. An international currency code. Typically AUD for Australian dollar, USD for American dollar etc. See [Official list of codes](https://www.iban.com/currency-codes). (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder casualHourlyRateCurrency(String casualHourlyRateCurrency) {
            this.casualHourlyRateCurrency = casualHourlyRateCurrency;
            return this;
        }
        
        /**
         * Set annualSalary
         * @param annualSalary Stores the annual salary for [Jobs](https://developers.intellihr.io/docs/v1/). These inputs will be ignored if you also pass in pay Step values. (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder annualSalary(Double annualSalary) {
            this.annualSalary = annualSalary;
            return this;
        }
        
        /**
         * Set annualSalaryCurrency
         * @param annualSalaryCurrency The currency that the annualSalary is being paid in. An international currency code. Typically AUD for Australian dollar, USD for American dollar etc. See [Official list of codes](https://www.iban.com/currency-codes). (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder annualSalaryCurrency(String annualSalaryCurrency) {
            this.annualSalaryCurrency = annualSalaryCurrency;
            return this;
        }
        
        /**
         * Set paySteps
         * @param paySteps An array of Paygrade Step Rates. This will replace the current Pay Steps with a new list.  Providing an &#x60;id&#x60; for an existing Pay Step will update that record instead of createing a new Pay Step. (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder paySteps(List<PayGradeUpdateRequestPayStepsInner> paySteps) {
            this.paySteps = paySteps;
            return this;
        }
        
        /**
         * Build call for updateRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayGradeUpdateRequest payGradeUpdateRequest = buildBodyParams();
            return updateRecordCall(payGradeUpdateRequest, _callback);
        }

        private PayGradeUpdateRequest buildBodyParams() {
            PayGradeUpdateRequest payGradeUpdateRequest = new PayGradeUpdateRequest();
            payGradeUpdateRequest.description(this.description);
            payGradeUpdateRequest.effectiveFrom(this.effectiveFrom);
            payGradeUpdateRequest.effectiveTo(this.effectiveTo);
            payGradeUpdateRequest.isEnabled(this.isEnabled);
            payGradeUpdateRequest.name(this.name);
            payGradeUpdateRequest.code(this.code);
            payGradeUpdateRequest.employmentCondition(this.employmentCondition);
            payGradeUpdateRequest.payGradeType(this.payGradeType);
            payGradeUpdateRequest.isOverridable(this.isOverridable);
            payGradeUpdateRequest.permanentHourlyRate(this.permanentHourlyRate);
            payGradeUpdateRequest.permanentHourlyRateCurrency(this.permanentHourlyRateCurrency);
            payGradeUpdateRequest.casualHourlyRate(this.casualHourlyRate);
            payGradeUpdateRequest.casualHourlyRateCurrency(this.casualHourlyRateCurrency);
            payGradeUpdateRequest.annualSalary(this.annualSalary);
            payGradeUpdateRequest.annualSalaryCurrency(this.annualSalaryCurrency);
            payGradeUpdateRequest.paySteps(this.paySteps);
            return payGradeUpdateRequest;
        }

        /**
         * Execute updateRecord request
         * @return PayGrades
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public PayGrades execute() throws ApiException {
            PayGradeUpdateRequest payGradeUpdateRequest = buildBodyParams();
            ApiResponse<PayGrades> localVarResp = updateRecordWithHttpInfo(payGradeUpdateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateRecord request with HTTP info returned
         * @return ApiResponse&lt;PayGrades&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayGrades> executeWithHttpInfo() throws ApiException {
            PayGradeUpdateRequest payGradeUpdateRequest = buildBodyParams();
            return updateRecordWithHttpInfo(payGradeUpdateRequest);
        }

        /**
         * Execute updateRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayGrades> _callback) throws ApiException {
            PayGradeUpdateRequest payGradeUpdateRequest = buildBodyParams();
            return updateRecordAsync(payGradeUpdateRequest, _callback);
        }
    }

    /**
     * Patch an existing Pay Grade
     * Patch attributes of an existing Pay Grade record with the provided data.
     * @param payGradeUpdateRequest  (required)
     * @return UpdateRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRecordRequestBuilder updateRecord(String effectiveFrom) throws IllegalArgumentException {
        if (effectiveFrom == null) throw new IllegalArgumentException("\"effectiveFrom\" is required but got null");
            

        return new UpdateRecordRequestBuilder(effectiveFrom);
    }
}
